// From github_scraper
[
{"title": "Rails 7.0.7 regression collection caching JSON", "link": "https://github.com/rails/rails/issues/48979", "labels": [], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.3950357437133789, "creation_date": "2023-08-19T09:15:53Z", "issue_submitter": "javinto", "body": "Steps to reproduce\nWithin index.json.jbuilder I have\njson.array! records, partial: 'view1', as: :model, cached: Proc.new{|record| [record, params.key?(:marker), record.geo_coordinates==geo_point] }\nExpected behavior\nRails 7.0.6 gives me JSON output\nActual behavior\nRails 7.0.7 gives me\nNoMethodError: undefined method `to_str' for {\"longitude\"=>3.88933, \"latitude\"=>51.50608, ...}:Hash (NoMethodError)\n\n            if fragment = rendered_partial.body&.to_str\n                                               ^^^^^^^^\nDid you mean?  to_set\n               to_s\n\n\nSystem configuration\nRails version: 7.0.7\nRuby version: 3.2.2", "number_of_comments": 2, "comment_authors": ["javinto", "javinto"]},
{"title": "ActiveRecord - Dependent destroy relies on cached ActiveRecord::Relation", "link": "https://github.com/rails/rails/issues/48968", "labels": [], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6372244358062744, "creation_date": "2023-08-17T18:50:35Z", "issue_submitter": "sergioisidoro", "body": "Steps to reproduce\nclass ThingsTodo < ApplicationRecord\n   belongs_to :task # without FK constraint\n\nclass Task < ApplicationRecord\n   has_many :things_todo, dependent: :destroy\n\n   after_create :init_things_todo\n   \n   def init_things_todo\n       # call service that creates things to do\n       InitializeTodo.call(self)\n\n@todo = Todo.create()\n@todo.id  # 123\n@todo.things_todo.count  # Zero, Expected\nThingsTodo.count # Not Zero, Expected\n\n@todo.destroy!\nThingsTodo.count # Not Zero, NOT expected?\nThingsTodo.first.id # 123\n\nThingsTodo.destroy_all\n\n@todo = Todo.create()\n@todo.reload\n@todo.destroy!\nThingsTodo.count # Zero \nExpected behavior\nAlthough I do not expect the just created object to contain the initialised related objects - created by the after_save callback, I was expecting the the dependent: :destroy to make a query to delete the related records, instead of using the cached ActiveRecord::Relation.\nActual behavior\nDependent destroy calls destroy on the cached ActiveRecord::Relation (which is empty). This might be by design as a way to avoid one extra query, but it took me a while to realise because in this case there was no foreign key constraint. I was also getting a fk_constraint error on another case, and didn't realise why I was getting it until I found this.\nAlso note that this makes the behaviour of destroy and destroy async different, as destroy async will make a separate query with find_by.\nGoing forward\nA) make dependent destroy make a query, with a performance penalty.\nB) Expand on the warning in the documentations - https://guides.rubyonrails.org/association_basics.html#options-for-belongs-to-dependent - to include this caveat.\nSystem configuration\nRails version: 7.0.4\nRuby version: 3.2.2", "number_of_comments": 1, "comment_authors": ["sergioisidoro"]},
{"title": "Regression in Postgres aggregate function data type inference/casting in Rails >= 7.0.5", "link": "https://github.com/rails/rails/issues/48946", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.655099630355835, "creation_date": "2023-08-15T19:41:45Z", "issue_submitter": "midnightmonster", "body": "Steps to reproduce\n-- Create Postgres database, required to reproduce\nCREATE DATABASE type_inference_test;\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # gem \"rails\", github: \"rails/rails\", tag: \"v7.0.4.3\" # OK\n  # gem \"rails\", github: \"rails/rails\", tag: \"v7.0.5\"   # Fail\n  # gem \"rails\", github: \"rails/rails\", tag: \"v7.0.7\"   # Fail\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"    # Fail\n  gem \"pg\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# The issue appears appears with Postgres, not with SQLite. I have not tested other adapters.\n# ActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\n# N.b., in sqlite3 .pluck(\"sum(decimal_column)\").first returns a Float instead of a BigDecimal. Though that arguably is a bug, AFAICT it is _not_ a regression.\nActiveRecord::Base.establish_connection(adapter: \"postgresql\", database: \"type_inference_test\", encoding: \"unicode\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :line_items, force: true do |t|\n    t.integer :unit_count\n    t.decimal :subtotal\n  end\nend\n\nclass LineItem < ActiveRecord::Base\nend\n\nclass TypeInferenceBug < Minitest::Test\n  def setup\n    LineItem.create! unit_count: 5, subtotal: 47.98\n    LineItem.create! unit_count: 1, subtotal: 13.13\n  end\n\n  # This works correctly\n  def test_single_column\n    assert_kind_of Integer, LineItem.sum(:unit_count)\n    assert_kind_of Integer, LineItem.pluck(\"sum(unit_count)\").first\n    assert_kind_of BigDecimal, LineItem.sum(:subtotal)\n    assert_kind_of BigDecimal, LineItem.pluck(\"sum(subtotal)\").first\n  end\n\n  # All these fail starting in 7.0.5. ActiveRecord seems to apply the type of the last item to all numeric(?) columns.\n  def test_two_column_decimal_last\n    # Fails in 7.0.5-7.0.7, ok in 7.0.4.3\n    assert_kind_of Integer, LineItem.pluck(\"sum(unit_count)\", \"sum(subtotal)\").first.first\n  end\n\n  def test_two_column_integer_last\n    # Fails in 7.0.5-7.0.7, ok in 7.0.4.3\n    assert_kind_of BigDecimal, LineItem.pluck(\"sum(subtotal)\", \"sum(unit_count)\").first.first\n  end\n\n  def test_same_problem_with_another_aggregate_function\n    # Fails in 7.0.5-7.0.7, ok in 7.0.4.3\n    assert_kind_of BigDecimal, LineItem.pluck(\"max(subtotal)\", \"max(unit_count)\").first.first\n  end\nend\nExpected behavior\nType of values returned from pluck(\"aggregate_function(column)\",...) depends on database's data type and does not change if additional values are also plucked. Up through Rails 7.0.4.3, this worked as expected.\nActual behavior\nWhen plucking sums (or other aggregate functions) of more than one numeric column, pluck coerces all numeric(?) values to the type of the last column, at least when using the postgresql adapter. In our use, this results in integers inconveniently cast to BigDecimals and (more perniciously) decimal values representing dollars and cents being truncated to integers—and the data type of existing columns of a pluck call changing based on order or from adding an additional column.\nSystem configuration\nRails version: 7.0.7\nRuby version: 3.1.1p18", "number_of_comments": 3, "comment_authors": ["midnightmonster", "yahonda", "midnightmonster"]},
{"title": "Upgrading to Rails 7.0 changes precision when changing column type to datetime", "link": "https://github.com/rails/rails/issues/48965", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                With reproduction steps\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6681215763092041, "creation_date": "2023-08-17T10:11:05Z", "issue_submitter": "willnet", "body": "In Rails 6.1 and below, precision is nil when using change_column to set the column type to datetime without explicit option. In Rails 7.0, precision is 6 even if the migration version is specified as ActiveRecord::Migration[6.1]. This will result in different schemas when running rails db:migrate in Rails 6.1 and Rails 7.0.\n#42297 changed the default datetime precision to 6. In Rails7.0, ActiveRecord::Migration[6.1] or lower version includes the following support to maintain the original behavior.\n\n\n\n\nrails/activerecord/lib/active_record/migration/compatibility.rb\n\n\n         Line 204\n      in\n      2fa5493\n\n\n\n\n\n\n options[:precision] ||= nil \n\n\n\n\n\n\n\n\nrails/activerecord/lib/active_record/migration/compatibility.rb\n\n\n         Line 174\n      in\n      2fa5493\n\n\n\n\n\n\n options[:precision] ||= nil \n\n\n\n\n\n\nbut there seems to be no support for change_column\nSteps to reproduce\nUsing PostgreSQL because I can't reproduce with sqlite3\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"~> 7.0.0\"\n  gem \"pg\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# docker run --rm -e POSTGRES_PASSWORD=postgres -p 9999:5432 postgres\nActiveRecord::Base.establish_connection(\"postgres://postgres:postgres@localhost:9999/postgres\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema[6.1].define do\n  create_table :posts, force: true do |t|\n    t.date :published_at\n  end\nend\n\nclass ChangePublishedAt < ActiveRecord::Migration[6.1]\n  def change\n    change_column :posts, :published_at, :datetime\n  end\nend\n\nclass Post < ActiveRecord::Base\nend\n\nclass BugTest < Minitest::Test\n  def test_precision_when_change_column_to_datetime\n    ChangePublishedAt.migrate(:up)\n    Post.reset_column_information\n    published_at_column = Post.columns.find { |c| c.name == \"published_at\" }\n    assert_nil published_at_column.precision # fail. Expected 6 to be nil.\n  end\nend\nExpected behavior\nthe test pass\nActual behavior\nthe test fails.\nSystem configuration\nRails version:\n7.0.7\nRuby version:\n3.2.2", "number_of_comments": 3, "comment_authors": ["willnet", "willnet", "skipkayhil"]},
{"title": "Webdrivers::VersionError: Unable to find latest point release version for 115.0.5790 — TODO: remove 'webdrivers' as default gem in rails new", "link": "https://github.com/rails/rails/issues/48973", "labels": ["\n                railties\n", "\n                With reproduction steps\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6910152435302734, "creation_date": "2023-08-18T17:38:49Z", "issue_submitter": "jasonfb", "body": "Steps to reproduce\n• Create a brand new rails app\n• Create a basic home page + capybara home page test (feature or system spec)\n• run the test, you will get an error:\nWebdrivers::VersionError: Unable to find latest point release version for 115.0.5790\n\necho \"please give your new Importmap Rails app a TitleCase name:\" && read APP_NAME && rails new $APP_NAME --database=postgresql && cd $APP_NAME && git add . && git commit -m \"initial commit with $(rails -v), Ruby $(more ./.ruby-version)\" && printf \"Ruby version is in \\`.ruby-version\\`.\\n\\n# Setup\\n\\n\\`bin/setup\\`\\n\\n# Start Rails\\n\\n\\`bin/rails s\\`\\n\\n# Run Specs\\n\\nrun with \\`bin/rake\\`\" > README.md  && sed -i '' -e 's/ruby-//g' .ruby-version && RUBY_STRING=\"ruby \\\"$(more ./.ruby-version)\\\"\" && sed -i '' -e \"s/$RUBY_STRING/ruby File.read('.ruby-version').strip/g\" Gemfile  && git add . && git commit -m \"fixes .ruby-version file and set Gemfile to use .ruby-version file\" && ./bin/setup && git add . && git commit -m \"adds schema file\"\n\nbundle add rspec-rails rspec-wait factory_bot_rails ffaker vcr simplecov dotenv-rails webmock --group \"development, test\" && bundle add simplecov-rcov launchy --group \"test\" &&\nrails generate rspec:install &&\ngit add . && git commit -m \"adds rspec, factory bot, ffaker, vcr, simplecov, and launchy\" && printf \"\\n.env\\n.env.local\\n.env.*.local\\n\\ncoverage/\" >> .gitignore && printf \"\" >> .env.local && git add . && git commit -m \"adds .env, etc and coverage/ to .gitignore file\" && sed -i '' -e 's/RSpec.configure do |config|/RSpec.configure do |config|\\n  config.include FactoryBot::Syntax::Methods\\n/g' spec/rails_helper.rb && sed -i '' -e \"s/RSpec.configure do |config|/require 'simplecov'\\nrequire 'simplecov-rcov'\\nclass SimpleCov::Formatter::MergedFormatter\\n  def format(result)\\n    SimpleCov::Formatter::HTMLFormatter.new.format(result)\\n    SimpleCov::Formatter::RcovFormatter.new.format(result)\\n  end\\nend\\nSimpleCov.formatter = SimpleCov::Formatter::MergedFormatter\\nSimpleCov.start 'rails' do\\n  add_filter \\\"\\/vendor\\\"\\nend\\n\\nVCR.configure do |config|\\n  config.cassette_library_dir = \\\"spec\\/fixtures\\/vcr_cassettes\\\"\\n  config.hook_into :webmock\\n  config.ignore_request do |request|\\n    [\\\"127.0.0.1\\\", \\\"chromedriver.storage.googleapis.com\\\"].include? URI(request.uri).host\\n  end\\nend\\n\\n\\nRSpec.configure do |config|/g\" spec/rails_helper.rb  &&  git add . && git commit -m \"adding factorybot and simplecov to Rspec config\" && sed -i '' -e 's/< Rails::Application/< Rails::Application\\n\tconfig.generators do |generate|\\n      generate.helper false\\n\\n      generate.assets false\\n      generate.helper false\\n      generate.stylesheets false\\n      generate.test_framework :rspec,\\n                              request_specs: false,\\n                              view_specs: false,\\n                              controller_specs: false,\\n                              helper_specs: false,\\n                              routing_specs: false,\\n                              fixture: false,\\n                              fixture_replacement: \"factory_bot\"\\n    end\\n/g' config/application.rb && git add . && git commit -m \"disables extraneous generators\"\n\nadd rspec (but I think it will happen in minitest too)\nmkdir spec/features  && printf \"require 'rails_helper'\\n\\ndescribe 'homepage' do\\n  it 'can load' do\\n    visit '/'\\n    expect(page).to have_content('Hello World')\\n  end\\nend\" >>  spec/features/homepage_spec.rb && printf \"Capybara.register_driver :selenium do |app|\\n  options = Selenium::WebDriver::Chrome::Options.new(\\n    # It's the headlese arg that make Chrome headless\\n    # + you also need the disable-gpu arg due to a bug\\n    args: ['headless', 'disable-gpu window-size=1366,1200'],\\n    )\\n\\n  Capybara::Selenium::Driver.new(\\n    app,\\n    browser: :chrome,\\n    options: options\\n  )\\nend\\n\\nCapybara.default_driver = :selenium\" >> spec/rails_helper.rb && git add . && git commit -m \"basic capybara example\"\n\nrails generate controller Welcome &&\nsed -i '' -e 's/class WelcomeController < ApplicationController/class WelcomeController < ApplicationController\\n  def index\\n\\n  end/g' app/controllers/welcome_controller.rb &&\nprintf \"Hello World\" > app/views/welcome/index.html.erb &&\nsed -i '' -e  's/# root \"articles#index\"//g' config/routes.rb &&\nsed -i '' -e  's/Rails.application.routes.draw do/Rails.application.routes.draw do\\n  root to: \"welcome#index\"/g' config/routes.rb && git add . && git commit -m \"generates Welcome controller\"\n\nThe best fix is to remove the webdrivers gem completely, as it is no longer needed if you are using selenium-webdriver v 4.10.0 or above\nsee this discussion:\ntitusfortner/webdrivers#247 (comment)\n(Note if you are using an older version of webdrivers and cannot upgrade selenium-webdriver, you can fix to the older webdriver using  Webdrivers::Chromedriver.required_version = '114.0.5735.90')\nEither way, it seems like with webdrivers gem no longer being necessary for newly created Rails apps, this gem can simply be removed from rails new so as to not re-create the problem for new Rails apps and people in a learning/education environment.\nExpected behavior\nrails new works out of the box\nActual behavior\nrails new creates a Gemfile where the bug will show up the first time you create a JS-driven capybara spec.", "number_of_comments": 2, "comment_authors": ["jasonfb", "skipkayhil"]},
{"title": "rails-ujs ignores submission value of form-associated custom elements", "link": "https://github.com/rails/rails/issues/48975", "labels": [], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6979787349700928, "creation_date": "2023-08-18T18:08:52Z", "issue_submitter": "khuston", "body": "Preface\nBest practice when designing a form-associated custom element would be to have interface parity with HTMLInputElement, especially the value attribute's behavior (e.g. only null when disabled, otherwise null is converted to empty string). I am submitting this issue in part to document a potential pitfall of form-associated custom elements that don't follow this best practice and suggest that rails-ujs could use FormData and URLSearchParams to avoid the pitfall altogether.\nSteps to reproduce\nInclude a form-associated custom element that deviates from HTMLInputElement behavior by not having a value attribute at all or having a .value property that returns null. (The form-associated custom element sets its submission value through the ElementInternals API).\nUse remote: true and multipart: false (default multipart value) when creating the form.\nFire a submit event on the form to trigger rails-ujs ajax.\nObserve that rails-ujs serializes the parameters into x-www-form-urlencode without regard to the submission value.\n<script>\n    class MyControl extends HTMLElement {\n\n        static formAssociated = true;\n\n        constructor() {\n            super();\n            this.internals_ = this.attachInternals();\n            this.value_ = null;\n        }\n\n        // HTMLInputElement has a \"value\" property. We do too,\n        // but sometimes ours is null despite being enabled.\n        get value() { return this.value_; }\n        set value(v) { this.value_ = v; }\n\n        // More properties which aren't required by the standard but recommended.\n        get form() { return this.internals_.form; }\n        get name() { return this.getAttribute('name'); }\n    }\n    customElements.define('null-value', NullValueControl);\n</script>\n\n<%= form_with url: \"/things\", method: :get, remote: true do |form| %>\n  <null-value name=\"some_value\"></null-value>\n  <%= form.submit %>\n<% end %>\nExpected behavior\nThe serialized parameters should match those given by FormData, which constructs the entry list following the standard procedure that supports form-associated custom elements. The parameters can then be URL encoded, e.g.\nconst formData = new FormData(form)\nconst params = new URLSearchParams(formData)\n// params is populated with parameters based on the submission value of form-associated custom elements\n// in the above code example, the submission value of the field is null, so it doesn't appear in params at all\nNote: multipart: true on the form already results in FormData being correctly used to serialize as multipart/form-data\nActual behavior\nrails-ujs serializes parameters into x-www-form-urlencode by scanning for value attributes on form controls. A form-associated custom element may not have a value attribute or may return the property as null.\nExample 1: If the form-associated custom element has no value attribute, it is missed altogether, even if a submission value is contributed to the form.\nExample 2: If the form-associated custom element has a .value property that is null, it is serialized to the literal string 'null'.\nhttps://github.com/rails/rails/blob/main/actionview/app/assets/javascripts/rails-ujs.esm.js#L283\nSystem configuration\nRails version: 7.0.7\nRuby version: 3.1.2", "number_of_comments": 1, "comment_authors": ["khuston"]},
{"title": "ActiveModel Validations - DEPRECATION WARNING Time#to_s to Time#to_fs actioncable", "link": "https://github.com/rails/rails/issues/48960", "labels": ["\n                activesupport\n", "\n                With reproduction steps\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.751000165939331, "creation_date": "2023-08-17T01:18:18Z", "issue_submitter": "magni-", "body": "Steps to reproduce\nThe error message for comparison validations involving dates and times triggers a deprecation message (related to #48555)\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activemodel\", \"7.0.7\"\nend\n\nrequire \"active_model\"\nrequire \"active_support/core_ext/time/conversions\"\nrequire \"active_support/core_ext/time/deprecated_conversions\"\nrequire \"minitest/autorun\"\n\nTime::DATE_FORMATS[:default] = \"%F %T\"\n\nclass Reproduction\n  include ActiveModel::API\n\n  attr_accessor :first, :second\n\n  validates_comparison_of :first, less_than: :second\nend\n\nclass ReproductionTest < Minitest::Test\n  def test_error_message_does_not_trigger_deprecation_warning\n    invalid = Reproduction.new(first: Time.at(2), second: Time.at(1))\n    assert invalid.valid? == false\n\n    assert_output(nil, \"\") { invalid.errors.full_messages.to_sentence }\n  end\nend\nExpected behavior\nNo deprecation warning should be raised.\nActual behavior\nA deprecation warning is raised.\nSystem configuration\nRails version: 7.0.7\nRuby version: 3.2.2\n6.1 defaults are loaded (so disable_to_s_conversion is false) and Time::DATE_FORMATS[:default] is set.", "number_of_comments": 2, "comment_authors": ["magni-", "davidgumberg"]},
{"title": "Unexpected schema.rb change when using db:migrate:redo or db:migrate after a db:reset", "link": "https://github.com/rails/rails/issues/48976", "labels": [], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5039806365966797, "creation_date": "2023-08-18T19:28:06Z", "issue_submitter": "manuelvanrijn", "body": "Steps to reproduce\n# Clone/setup the example project\ngit clone https://github.com/manuelvanrijn/rails-issue-reset-migrate-vs-reset-migrate-redo.git\ncd rails-issue-reset-migrate-vs-reset-migrate-redo\nbin/setup\n\n# db:reset db:migrate scenario\nbin/rails db:reset db:migrate\n# At this point the schema.rb file is changed 🤔\n\n# Reset the schema\ngit checkout db/schema.rb\n\n# db:reset db:migrate:redo scenario\nbin/rails db:reset db:migrate:redo STEP=1\n# Schema file did not change 🙄\nExpected behavior\nWhen performing a db:reset with a db:migrate:redo or db:migrate, I wouldn't expect the schema.rb file to change. In my case, I'm running the db:migrate:redo in a CI task to see if the schema doesn't change, but in this case it does.\nIt has to have something to do with the where in the add_index but I was unable to figure out why the SchemaDumper would give a different outcome.\nActual behavior\nChanges the schema.rb file to a bit of different syntax, but as far as I can tell is still a valid one.\n-    t.index [\"name\"], name: \"index_blogs_on_name\", unique: true, where: \"(((state)::text <> ALL ((ARRAY['finished'::character varying, 'expired'::character varying])::text[])) AND (created_at > '2018-09-01 00:00:00'::timestamp without time zone))\"\n+    t.index [\"name\"], name: \"index_blogs_on_name\", unique: true, where: \"(((state)::text <> ALL (ARRAY[('finished'::character varying)::text, ('expired'::character varying)::text])) AND (created_at > '2018-09-01 00:00:00'::timestamp without time zone))\"\nSetting the config.active_record.schema_format = :sql give's the same outcome\nSystem configuration\nRails version: github#main\nRuby version: 3.2.2", "number_of_comments": 1, "comment_authors": ["manuelvanrijn"]},
{"title": "Google Storage Service Error when uploading attachments", "link": "https://github.com/rails/rails/issues/48909", "labels": ["\n                activestorage\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7097175121307373, "creation_date": "2023-08-08T20:17:01Z", "issue_submitter": "matiassalles99", "body": "We have been running into these kinds of errors lately when attaching multiple images to a model:\nGoogle::Cloud::AlreadyExistsError conflict: The metadata for object \"....\" was edited during the operation. Please try again.\nAfter digging into both the google cloud gem and active storage I noticed that google cloud is the only one that implements the update_metadata method within the class Service::GCSService which makes me wonder why is that the case.\nI saw that the identify method call in ActiveStorage::Blob within upload(io, identify: true) updates the metadata, and the analyze job also. Google Storage gem does some threads execution when calling the API which I don't fully understand, but I was wondering if there might be a race condition here, or get more info from people who have a deeper understanding of Active Storage with GCS\n\nThe code looks as simple as:\n   class A\n      has_many :media\n   end\n\n   class Media\n      belongs_to :user\n      has_one_attached :image\n    end\n\n    # In the controller\n    attach_to = A.first\n\n    # We get an array of directly uploaded images\n    array_of_signed_ids = params[:images]\n    media = array_of_signed_ids.map { |image| attach_to.media.build(image: image) }\n    media.each { |m| m.save! }\n    \n    respond_to ... \nExpected behavior\n\nShouldn't raise Google::Cloud::AlreadyExistsError since we are just following the normal flow of attaching images to a model\n\nActual behavior\n\nIntermittently raises Google::Cloud::AlreadyExistsError\n\nSystem configuration\nRails version:\n7.0.4\nRuby version:\n3.2.2", "number_of_comments": 1, "comment_authors": ["matiassalles99"]},
{"title": "ActionController::PermissionsPolicy does not define \"Permissions-Policy\" but \"Feature-Policy\"", "link": "https://github.com/rails/rails/issues/48878", "labels": ["\n                actionpack\n", "\n                attached PR\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7829728126525879, "creation_date": "2023-08-03T21:14:55Z", "issue_submitter": "mikevoets", "body": "Steps to reproduce\n# config/initializers/permissions_policy.rb\n\nRails.application.config.permissions_policy do |f|\n  f.camera      :none\n  f.gyroscope   :none\n  f.microphone  :none\n  f.usb         :none\n  f.fullscreen  :self\n  f.payment     :self\nend\nExpected behavior\nThis adds the following to the response headers:\nPermissions-Policy: camera=(), gyroscope=(), microphone=(), usb=(), fullscreen=(self), payment=(self)\nActual behavior\nThis adds the following to the response headers:\nFeature-Policy: camera 'none'; gyroscope 'none'; microphone 'none'; usb 'none'; fullscreen 'self'; payment 'self'\nSystem configuration\nRails version: 7.0.6\nRuby version: 3.0.6p216", "number_of_comments": 2, "comment_authors": ["mikevoets", "skipkayhil"]},
{"title": "Helper encrypted_attribute? does not honour the context properties passed to encrypts", "link": "https://github.com/rails/rails/issues/48922", "labels": ["\n                activerecord\n", "\n                encryption\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6202194690704346, "creation_date": "2023-08-10T15:09:33Z", "issue_submitter": "maximerety", "body": "Steps to reproduce\n\n\nPass a custom encryptor (or other context properties) to the encrypts helper, e.g.\n\n\n\nrails/activerecord/test/cases/encryption/encryption_schemes_test.rb\n\n\n        Lines 198 to 202\n      in\n      e6d59cd\n\n\n\n\n\n\n class EncryptedAuthor1 < Author \n\n\n\n self.table_name = \"authors\" \n\n\n\n \n\n\n\n encrypts :name, encryptor: TestEncryptor.new(\"1\" => \"2\") \n\n\n\n end \n\n\n\n\n\n\n\nCreate a record and test a supposedly encrypted attribute with encrypted_attribute?:\nauthor = EncryptedAuthor1.create name: \"1\"\nassert author.encrypted_attribute? :name\n\n\nExpected behavior\nThe attribute is expected to be encrypted, i.e. encrypted_attribute? should return true.\nActual behavior\nThe attribute appears to be unencrypted, i.e. encrypted_attribute? returns false, despite the actual value being encrypted.\nSystem configuration\nRails version: 7.0.7 / main\nRuby version: 3.2.2", "number_of_comments": 1, "comment_authors": ["maximerety"]},
{"title": "Not obvious how to customize ActiveStorage routing, and undocumented in API docs and guide", "link": "https://github.com/rails/rails/issues/48915", "labels": ["\n                activestorage\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6474521160125732, "creation_date": "2023-08-09T16:46:50Z", "issue_submitter": "technicalpickles", "body": "While setting up ActiveStorage in an existing app, we found ourselves needing to make sure that it's only available on a specific subdomain. We use this snippet in config/routes.rb when we are applying this to our application code:\ndefaults(subdomain: app_subdomain) do\n  # routes here\nend\nThe ActiveStorage Overview guide doesn't mention it at all.\nI dug around active_storage, and found this:\n\n\n\nrails/activestorage/config/routes.rb\n\n\n         Line 4\n      in\n      8ec27a4\n\n\n\n\n\n\n scope ActiveStorage.routes_prefix do \n\n\n\n\n\n\n\n\nrails/activestorage/lib/active_storage.rb\n\n\n         Line 359\n      in\n      8ec27a4\n\n\n\n\n\n\n mattr_accessor :routes_prefix, default: \"/rails/active_storage\" \n\n\n\n\n\nWhen I found that it was using scope, I realized we could pass in a Hash with options instead of a string to use as a prefix:\n# config/initializers/active_storage.rb\nRails.application.config.active_storage.routes_prefix = {path: 'rails/active_storage', subdomain: app_subdomain}\nSeeing it written out this way, routes_prefix doesn't seem as an accurate a name for what it allows.\nThis might be a few tasks actually:\n\ndocument routes_prefix in rdoc\ndocument routes_prefix on the guide\nmaybe rename routes_prefix w/ a deprecation?\n\nSteps to reproduce\nn/a\n# Your reproduction script goes here\nExpected behavior\nShould be able to find out how to customize ActiveStorage routing on either API docs or ActiveStorage guide\nActual behavior\nHad to read the code to find out how to do this\nSystem configuration\nRails version: 7-0-stable (fabd0b5)\nRuby version: 3.2.2", "number_of_comments": 1, "comment_authors": ["technicalpickles"]},
{"title": "ActiveRecord::QueryMethods#select with Hash does not match syntax for #where", "link": "https://github.com/rails/rails/issues/48862", "labels": ["\n                activerecord\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8560256958007812, "creation_date": "2023-08-01T07:50:12Z", "issue_submitter": "leejarvis", "body": "#45612 recently added support for passing a Hash to ActiveRecord::QueryMethods#select, however it does not pick up table aliases in the same way that #where does. I think this behaviour is incorrect.\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"pg\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\nActiveRecord::Base.establish_connection(adapter: \"postgresql\", database: \"select_hash_test\")\n# ActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.string :title\n  end\n\n  create_table :authors, force: true do |t|\n    t.string :name\n  end\n\n  create_table :post_authors, force: true do |t|\n    t.belongs_to :post\n    t.belongs_to :author\n  end\n\n  create_table :comments, force: true do |t|\n    t.belongs_to :post\n    t.belongs_to :author\n    t.string :text\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :post_authors\n  has_many :authors, through: :post_authors\n\n  has_many :comments\n  has_many :comment_authors, through: :comments, source: :author\nend\n\nclass PostAuthor < ActiveRecord::Base\n  belongs_to :post\n  belongs_to :author\nend\n\nclass Author < ActiveRecord::Base\n  has_many :post_authors\n  has_many :posts, through: :post_authors\n  has_many :comments\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\n  belongs_to :author\nend\n\n# test\n\nclass BugTest < Minitest::Test\n  def setup\n    Author.delete_all\n    Post.delete_all\n\n    author_1 = Author.create!(name: \"Author 1\")\n    author_2 = Author.create!(name: \"Author 2\")\n\n    post = author_1.posts.create!(title: \"Post 1\")\n    post.comments.create! text: \"Comment 1\", author: author_2\n    post.comments.create! text: \"Reply\", author: author_1\n\n    author_2.posts.create!(title: \"Post 2\")\n  end\n\n  # This test correctly picks up the `comment_authors` alias\n  #\n  # SELECT \"posts\".* FROM \"posts\"\n  # INNER JOIN \"post_authors\" ON \"post_authors\".\"post_id\" = \"posts\".\"id\"\n  # INNER JOIN \"authors\" ON \"authors\".\"id\" = \"post_authors\".\"author_id\"\n  # INNER JOIN \"comments\" ON \"comments\".\"post_id\" = \"posts\".\"id\"\n  # INNER JOIN \"authors\" \"comment_authors\" ON \"comment_authors\".\"id\" = \"comments\".\"author_id\"\n  # WHERE \"comment_authors\".\"name\" = 'Author 2'\n  def test_where_with_select_hash\n    posts = Post.joins(:authors, :comment_authors).where(comment_authors: { name: \"Author 2\" })\n\n    assert_equal 1, posts.count\n    assert_equal \"Post 1\", posts.take.title\n  end\n\n  # This test fails because the `comment_authors` alias is not picked up, instead\n  # We would need to know that Rails has generated a different alias: `comment_authors_posts`\n  #\n  # PG::UndefinedTable: ERROR:  missing FROM-clause entry for table \"comment_authors\"\n  def test_select_with_hash\n    posts = Post.joins(:authors, :comment_authors).select(comment_authors: { name: :commentor_name })\n\n    assert_equal [\"Author 1\", \"Author 2\"], posts.map(&:commentor_name).sort\n  end\nend\nExpected behavior\nActiveRecord::QueryMethods#select should be able to determine the alias for comment_authors like where does.\nActual behavior\nActiveRecord::QueryMethods#select raises an error because the alias table does not match the one that Rails generates\nSystem configuration\nRails version: main from GitHub, currently 35a614c\nRuby version: ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [arm64-darwin21]", "number_of_comments": 3, "comment_authors": ["leejarvis", "akhilgkrishnan", "leejarvis"]},
{"title": "If multiple after_commits are defined with the same callback only the last one is evaluated", "link": "https://github.com/rails/rails/issues/48910", "labels": ["\n                activerecord\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7176976203918457, "creation_date": "2023-08-09T09:17:02Z", "issue_submitter": "melefabrizio", "body": "Steps to reproduce\nWhen two after_commit hooks with the same callback are defined, i.e. on different conditions, only the last one is evaluated.\nclass Post < ActiveRecord::Base\n  has_many :comments\n  after_commit :do_something, on: :create\n  after_commit :do_something, on: :update\n\n  def do_something\n    comments << Comment.new\n  end\nend\nIn this case, a Post.create! action does not fire the do_something method. An update does.\nHere is the standard test case\nExpected behavior\nBoth hooks should be evaluated and executed.\nActual behavior\nOnly the last one is evaluated.\nSystem configuration\nRails version:  7.0.6\nRuby version: 3.2.1", "number_of_comments": 10, "comment_authors": ["melefabrizio", "Jay0921", "melefabrizio", "victorsmoreira", "melefabrizio", "victorsmoreira", "melefabrizio", "skipkayhil", "Jay0921", "akhilgkrishnan"]},
{"title": "ActiveRecord::RecordInvalid silently ignored during create! with associations and after_create callbacks", "link": "https://github.com/rails/rails/issues/48908", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7623083591461182, "creation_date": "2023-08-08T13:38:43Z", "issue_submitter": "eric-christian", "body": "Hello,\nwe noticed some inconsistent data in our database and came to the conclusion that data created within an after_create hook is not always present.\nOur audit tool hooks itself into some of our models by using the after_* callbacks.\nAnd on a rare occasion, it produced an invalid record. Causing an ActiveRecord::RecordInvalid to be raised within the callback.\nIf that happens while the audited model is used solely, everything works as intended. A rollback is issued and no incomplete data is persisted. The exception is also re-raised, which is correct in my opinion, but not what the documentation claims: https://guides.rubyonrails.org/active_record_callbacks.html#halting-execution\nHowever, something different happens, if we try this with associated models. Both models are saved, no rollback happens, no exception bubbels up. Incomplete data is persisted because everything but the audit was commited. There is no indication that the callback failed at all. 🤷‍♂️\nI was unable to find any documentation explaining this behavior.\nSteps to reproduce\n### Schema\n\nclass CreateTestAs < ActiveRecord::Migration[7.0]\n  def change\n    create_table :test_as do |t|\n      t.timestamps\n    end\n  end\nend\n\nclass CreateTestBs < ActiveRecord::Migration[7.0]\n  def change\n    create_table :test_bs do |t|\n      t.references :test_a\n      t.timestamps\n    end\n  end\nend\n\n### Models\n\nclass TestA < ApplicationRecord\n  has_one :test_b\nend\n\nclass TestB < ApplicationRecord\n  after_create(-> { raise ActiveRecord::RecordInvalid }) # simulating the broken audit-tool behavior\nend\nExpected behavior\nThe expectation is that TestA.create!(test_b: TestB.new) issues a rollback and raises the same exception as TestB.create! does. No data should be persisted.\nActual behavior\nWhile TestB.create!, as expected, raises an ActiveRecord::RecordInvalid exception and issues a rollback. TestA.create!(test_b: TestB.new) does not. Instead, both instances of TestA and TestB are persisted. The exception is silently ignored!\n[1] pry(main)> TestB.create!\n  TRANSACTION (0.5ms)  BEGIN\n  TestB Create (1.8ms)  INSERT INTO \"test_bs\" (\"test_a_id\", \"created_at\", \"updated_at\") VALUES ($1, $2, $3) RETURNING \"id\"  [[\"test_a_id\", nil], [\"created_at\", \"2023-08-08 12:29:45.686484\"], [\"updated_at\", \"2023-08-08 12:29:45.686484\"]]\n  TRANSACTION (0.6ms)  ROLLBACK\nActiveRecord::RecordInvalid: Record invalid\n\n[2] pry(main)> TestA.create!(test_b: TestB.new)\n  TRANSACTION (1.4ms)  BEGIN\n  TestA Create (7.6ms)  INSERT INTO \"test_as\" (\"created_at\", \"updated_at\") VALUES ($1, $2) RETURNING \"id\"  [[\"created_at\", \"2023-08-08 12:30:30.200175\"], [\"updated_at\", \"2023-08-08 12:30:30.200175\"]]\n  TestB Create (1.3ms)  INSERT INTO \"test_bs\" (\"test_a_id\", \"created_at\", \"updated_at\") VALUES ($1, $2, $3) RETURNING \"id\"  [[\"test_a_id\", 13], [\"created_at\", \"2023-08-08 12:30:30.208412\"], [\"updated_at\", \"2023-08-08 12:30:30.208412\"]]\n  TRANSACTION (7.7ms)  COMMIT\nSystem configuration\nRails version: 7.0.6\nRuby version: 3.2.2", "number_of_comments": 9, "comment_authors": ["eric-christian", "Lucas-Barret", "Lucas-Barret", "skipkayhil", "zzak", "Lucas-Barret", "Lucas-Barret", "eric-christian", "wata727"]},
{"title": "Action Cable - DEPRECATION WARNING Time#to_s to Time#to_fs", "link": "https://github.com/rails/rails/issues/48953", "labels": ["\n                actioncable\n", "\n                attached PR\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.6020069122314453, "creation_date": "2023-08-16T16:10:49Z", "issue_submitter": "kemaldemirgil", "body": "Steps to reproduce\nWhen executing a system spec that involves an action through the cable, the following deprecation warning will be logged:\nDEPRECATION WARNING: Using a :default format for Time#to_s is deprecated. Please use Time#to_fs instead. (called from finished_request_message at .../local/share/gem/ruby/3.2.0/gems/actioncable-7.0.7/lib/action_cable/connection/base.rb:248)\n\nEven though this system spec is designed for my app, a similar one could be created easily.\nrequire 'spec_helper'\n\ndescribe 'Test Spec', type: :system, js: true do\n  before do\n    visit login_path\n\n    fill_in 'login', with: 'test@gmail.com'\n    fill_in 'password', with: '123_password'\n\n    click_button 'Log In'\n  end\n\n  it 'logs a deprecation message' do\n    expect(page).not_to have_selector('.test')\n  end\nend\nExpected behavior\nThe logs shouldn't contain a deprecation warning message.\nActual behavior\nIt will log the following deprecation message:\nDEPRECATION WARNING: Using a :default format for Time#to_s is deprecated. Please use Time#to_fs instead. (called from finished_request_message at .../.local/share/gem/ruby/3.2.0/gems/actioncable-7.0.7/lib/action_cable/connection/base.rb:248)\n  logs a deprecation message\n\nTop 1 slowest examples (5.25 seconds, 99.9% of total time):\n  Test Spec logs a deprecation message\n    5.25 seconds ./spec/system/test_spec.rb:16\n\nFinished in 5.25 seconds (files took 3.53 seconds to load)\n1 example, 0 failures\n\nSystem configuration\nRails version:\nRails 7.0.7\nRuby version:\nruby 3.2.2 (2023-07-23 revision 0b3ed6043c) [x86_64-linux]", "number_of_comments": 1, "comment_authors": ["kemaldemirgil"]},
{"title": "assert_broadcasts fails when testing broadcast_append_to", "link": "https://github.com/rails/rails/issues/48934", "labels": [], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.225069284439087, "creation_date": "2023-08-14T03:47:52Z", "issue_submitter": "intradayreview", "body": "Steps to reproduce\nMake sure you have turbo-rails gem installed then try and test using assert_broadcasts and it will fail.\nclass Comment < ApplicationRecord\n  belongs_to :user\n  belongs_to :commentable, polymorphic: true\n\n  after_create_commit do\n    broadcast_append_to(commentable, target: ApplicationController.helpers.dom_id(commentable, :comments),\n                                     partial: \"comments/comment\", locals: { comment: self })\n  end\nend\n\nclass CommentCallbackTest < CommentTest\n  include ActionCable::TestHelper\n\n  setup do\n    Current.user = users(:roger)\n    @commentable = screenshots(:roger_review)\n  end\n\n  test 'should broadcast comment after create' do\n    assert_broadcasts @commentable, 1 do\n      Comment.create!(commentable: @commentable, content: 'Test content')\n    end\n  end\nend\nExpected behavior\nExpected test to pass.\nBut the stream name is not converted using stream.to_gid_param  so the stream is never found and the test fails \n\n\nrails/actioncable/lib/action_cable/test_helper.rb\n\n\n         Line 45\n      in\n      157920a\n\n\n\n\n\n\n def assert_broadcasts(stream, number) \n\n\n\n\n\nWriting the test like this passes but does not match the docs.\n  test 'should broadcast comment after create' do\n    assert_broadcasts @commentable.to_gid_param, 1 do\n      Comment.create!(commentable: @commentable, content: 'Test content')\n    end\n  end\nActual behavior\nFailure: CommentCallbackTest#test_should_broadcast_comment_after_create [/Users/lmackay/Desktop/intradayreview/test/models/comment_test.rb:43]: 1 broadcasts to #<Screenshot:0x00000001166ecde8> expected, but 0 were sent. Expected: 1 Actual: 0\nSystem configuration\nRails version: 7.0.2.3\nRuby version: ruby 3.0.5p211\nTurbo rails version: 1.0.1", "number_of_comments": 1, "comment_authors": ["intradayreview"]},
{"title": "Rails cache broken with Redis::Distributed in 7.0.7", "link": "https://github.com/rails/rails/issues/48938", "labels": [], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2250375747680664, "creation_date": "2023-08-14T13:42:16Z", "issue_submitter": "jdelStrother", "body": "#48645 adds support for write_multi in collection caches, but this now breaks when using Redis::Distributed as a backend. eg:\n      config.cache_store = :redis_cache_store, {\n        url: [url1, url2],\n        ...\n      }\n}\nI'm seeing MAPPED_MSET cannot be used in Redis::Distributed because the keys involved need to be on the same server or because we cannot guarantee that the operation will be atomic.\nredis (5.0.7) lib/redis/distributed.rb in mapped_mset at line 306\nactivesupport (7.0.7) lib/active_support/cache/redis_cache_store.rb in block (2 levels) in write_multi_entries at line 419\nconnection_pool (2.4.1) lib/connection_pool.rb in block (2 levels) in with at line 110\nconnection_pool (2.4.1) lib/connection_pool.rb in handle_interrupt at line 109\nconnection_pool (2.4.1) lib/connection_pool.rb in block in with at line 109\nconnection_pool (2.4.1) lib/connection_pool.rb in handle_interrupt at line 106\nconnection_pool (2.4.1) lib/connection_pool.rb in with at line 106\nactivesupport (7.0.7) lib/active_support/cache/redis_cache_store.rb in block in write_multi_entries at line 418\nactivesupport (7.0.7) lib/active_support/cache/redis_cache_store.rb in failsafe at line 466\nactivesupport (7.0.7) lib/active_support/cache/redis_cache_store.rb in write_multi_entries at line 416\nactivesupport (7.0.7) lib/active_support/cache.rb in block in write_multi at line 415\nactivesupport (7.0.7) lib/active_support/cache.rb in block in instrument at line 783\nactivesupport (7.0.7) lib/active_support/notifications.rb in block in instrument at line 206\nactivesupport (7.0.7) lib/active_support/notifications/instrumenter.rb in instrument at line 24\nactivesupport (7.0.7) lib/active_support/notifications.rb in instrument at line 206\nactivesupport (7.0.7) lib/active_support/cache.rb in instrument at line 783\nactivesupport (7.0.7) lib/active_support/cache.rb in write_multi at line 410\nactionview (7.0.7) lib/action_view/renderer/partial_renderer/collection_caching.rb in fetch_or_cache_partial at line 106\nactionview (7.0.7) lib/action_view/renderer/partial_renderer/collection_caching.rb in cache_collection_render at line 43\nactionview (7.0.7) lib/action_view/renderer/collection_renderer.rb in block in render_collection at line 161\nactivesupport (7.0.7) lib/active_support/notifications.rb in block in instrument at line 206\nactivesupport (7.0.7) lib/active_support/notifications/instrumenter.rb in instrument at line 24\nactivesupport (7.0.7) lib/active_support/notifications.rb in instrument at line 206\nactionview (7.0.7) lib/action_view/renderer/collection_renderer.rb in render_collection at line 147\nactionview (7.0.7) lib/action_view/renderer/collection_renderer.rb in render_collection_with_partial at line 119\nactionview (7.0.7) lib/action_view/renderer/renderer.rb in render_partial_to_object at line 72\nactionview (7.0.7) lib/action_view/renderer/renderer.rb in render_to_object at line 27\nactionview (7.0.7) lib/action_view/renderer/renderer.rb in render at line 22\nactionview (7.0.7) lib/action_view/helpers/rendering_helper.rb in block in render at line 37\nactionview (7.0.7) lib/action_view/base.rb in in_rendering_context at line 270\nactionview (7.0.7) lib/action_view/helpers/rendering_helper.rb in render at line 33\n\n@byroot perhaps this could be fixed in Redis::Distributed with something like this (pseudocode) ?\n    def mapped_mset(hash, atomic: true)\n      raise CannotDistribute, :mapped_mset if atomic\n      \n       hash.group_by { node_for(_1) }.each { |node, keyvalues|\n            node.mapped_mset(keyvalues)\n       }\n    end\nwant me to take a stab at fixing it?", "number_of_comments": 2, "comment_authors": ["jdelStrother", "byroot"]},
{"title": "HABTM Silently ignores :dependent option", "link": "https://github.com/rails/rails/issues/48939", "labels": [], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.001758337020874, "creation_date": "2023-08-14T18:35:22Z", "issue_submitter": "nhorton", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :categories, force: true do |t|\n  end\n\n  create_join_table :posts, :categories\nend\n\nclass Post < ActiveRecord::Base\n  has_and_belongs_to_many :categories\nend\n\nclass Category < ActiveRecord::Base\n  has_and_belongs_to_many :posts, dependent: :destroy\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    post = Post.create!\n    category = Category.create!\n    post.categories << category\n    assert post.persisted?\n    assert category.posts.include?(post)\n\n    # Now the bug\n    category.destroy!\n    refute Post.find_by_id(post.id) # Post should be gone\n  end\nend\nExpected behavior\nHABTM should either destroy the associated resource when it is destroyed, or the declaration should error when you try to set the :dependent option should trigger an error\nActual behavior\nIt silently accepts the :dependent option then ignores it\nSystem configuration\nRails version: 7.0.7\nRuby version: 3.1.4", "number_of_comments": 2, "comment_authors": ["nhorton", "smathy"]},
{"title": "ActiveStorage: Support AWS IAM Roles when using S3", "link": "https://github.com/rails/rails/issues/48836", "labels": ["\n                activestorage\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3060650825500488, "creation_date": "2023-07-28T14:56:59Z", "issue_submitter": "tbmetcalfe", "body": "Description\nCurrently, it is mandatory to use AWS Access Keys when using ActiveStorage. However, it is considered best practice to use AWS IAM roles where possible if operating within AWS. Currently, this does not appear possible when using ActiveStorage.\nCurrent behavior\nIf you do not set these fields, access_key_id and secret_access_key, when configuring to use S3, then even when you set the other methods of setting AWS credentials, the service will fail as it cannot locate the credentials.\nDesired behavior\nIf the access_key_id and secret_access_key are set, then use these fields. If, however, these fields are not set, it will then try to locate the default AWS credentials (as defined in the AWS SDK) such as from environment variables (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY) or the IAM role assigned to the resource (e.g. if it's running on an EC2 instance)\nThis behavior is already implemented in the AWS SDK for all programming languages.\nSystem configuration\nRails version: 6.1.3\nRuby version: 3.0.5", "number_of_comments": 4, "comment_authors": ["tbmetcalfe", "yahonda", "Jay0921", "tbmetcalfe"]},
{"title": "Make \"class_name\" option for polymorphic has_many relation to STI required", "link": "https://github.com/rails/rails/issues/48925", "labels": ["\n                activerecord\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3090558052062988, "creation_date": "2023-08-10T17:20:59Z", "issue_submitter": "loqimean", "body": "Steps to reproduce\nModels:\nclass Product < ApplicationRecord\n  has_many :requests, as: :requestable, dependent: :destroy\nend\n\n# STI tables\nclass Request < ApplicationRecord\n  belongs_to :requestable, polymorphic: true\n\n  validate :request_type, presence: true\nend\n\nclass ProductRequest < Request\n  belongs_to :user\nend\nThen running in your console:\nProduct.joins(requests: :user).where(requests: { user: { role: \"admin\" } })\nRaises you an error:\n/Users/some/.rvm/gems/ruby-3.1.1/gems/activerecord-7.0.4/lib/active_record/table_metadata.rb:22:in `has_column?': undefined method `key?' for nil:NilClass (NoMethodError)\nExpected behavior\nTo raise a detailed error, like \"provide a class_name option to use joins on STI table with polymorphic, or make required option class_name for polymorphic relation with STI\", like:\nclass Product < ApplicationRecord\n  has_many :requests, as: :requestable, class_name: \"ProductRequest\", dependent: :destroy\nend\n\n# STI tables\nclass Request < ApplicationRecord\n  belongs_to :requestable, polymorphic: true\n\n  validate :request_type, presence: true\nend\n\nclass ProductRequest < Request\n  belongs_to :user\nend\nActual behavior\nUnknown error 🙂\n/Users/some/.rvm/gems/ruby-3.1.1/gems/activerecord-7.0.4/lib/active_record/table_metadata.rb:22:in `has_column?': undefined method `key?' for nil:NilClass (NoMethodError)\nSystem configuration\nRails version: 7.0.4\nRuby version: 3.1.1", "number_of_comments": 1, "comment_authors": ["loqimean"]},
{"title": "undefine_attribute_methods now clears alias attribute methods", "link": "https://github.com/rails/rails/issues/48931", "labels": ["\n                activemodel\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.306081771850586, "creation_date": "2023-08-11T20:16:07Z", "issue_submitter": "nvasilevski", "body": "In #48533 we made a deliberate decision to use generated_attribute_methods module\n\n\n\nrails/activemodel/lib/active_model/attribute_methods.rb\n\n\n         Line 376\n      in\n      008db52\n\n\n\n\n\n\n def generated_attribute_methods \n\n\n\n\n\nto define both attribute and alias attribute methods.\nThis lead to the undefine_attribute_methods method now cleaning up alias attribute methods along with attribute methods.\nWe may want to reconsider this decision since this behavior may be found confusing since there is no clear guidance on how to explicitly re-generate alias method attributes after clearing them.\nAlso it may lead to some libraries being broken since those libraries won't be aware of the new behavior.\nFor example frozen_record undefines attributes under certain circumstances and frozen records may end up not having alias attributes since the library doesn't bring the alias attribute methods back.\nhttps://github.com/byroot/frozen_record/blob/1c809bcdc603759728ec0923c4ba5a23f1466101/lib/frozen_record/compact.rb#L11\nIf we think this behavior is intended we should at least change documentation of the undefine_attribute_methods. Otherwise we may want to use a different module specifically for alias attribute methods or even define methods directly on the model class as it was being done in Active Model prior our change.\ncc: @byroot", "number_of_comments": 3, "comment_authors": ["nvasilevski", "byroot", "nvasilevski"]},
{"title": "Rack::Lint on Rails", "link": "https://github.com/rails/rails/issues/48874", "labels": ["\n                actionpack\n", "\n                pinned\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3130366802215576, "creation_date": "2023-07-26T12:30:45Z", "issue_submitter": "skipkayhil", "body": "Meta issue for adding Rack::Lint to Rails middleware tests.\nAs Rack 3 can now be used with Rails main, it is necessary to ensure that all of the middleware defined in Rails adhere to the Rack SPEC. While existing test coverage was able to find many of the incompatibilities, I've seen multiple examples of mixed case header usage left that need to be fixed. Instead of trying to grep or otherwise manually find these middleware that aren't adhering to the SPEC, I'd like to add Rack::Lint to (every?) middleware's unit test in Rails so that we can be sure they follow the Rack 3 SPEC programmatically.", "number_of_comments": 8, "comment_authors": ["skipkayhil", "skipkayhil", "matthewd", "skipkayhil", "ioquatix", "matthewd", "ioquatix", "rafaelfranca"]},
{"title": "Order of id column in select changes loaded record ID", "link": "https://github.com/rails/rails/issues/48944", "labels": [], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3327913284301758, "creation_date": "2023-08-15T15:44:05Z", "issue_submitter": "conzett", "body": "Steps to reproduce\nrequire \"bundler/inline\"                                                         \n                                                                                 \ngemfile(true) do                                                                 \n  source \"https://rubygems.org\"                                                  \n                                                                                 \n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }                \n                                                                                 \n  # Activate the gem you are reporting the issue against.                        \n  gem \"activerecord\", \"~> 7.0.0\"                                                 \n  gem \"sqlite3\"                                                                  \nend                                                                              \n                                                                                 \nrequire \"active_record\"                                                          \nrequire \"minitest/autorun\"                                                       \nrequire \"logger\"                                                                 \n                                                                                 \n# This connection will do for database-independent bug reports.                  \nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)                                   \n                                                                                 \nActiveRecord::Schema.define do                                                   \n  create_table :posts, force: true do |t|                                        \n  end                                                                            \n                                                                                 \n  create_table :comments, force: true do |t|                                     \n    t.integer :post_id                                                           \n  end                                                                            \nend                                                                              \n                                                                                 \nclass Post < ActiveRecord::Base                                                  \n  has_many :comments                                                             \nend                                                                              \n                                                                                 \nclass Comment < ActiveRecord::Base                                               \n  belongs_to :post                                                               \nend                                                                              \n                                                                                 \nclass BugTest < Minitest::Test                                                   \n  def test_select_order_with_join                                                \n    10.times { |i| Post.create! id: i + 1 }                                      \n                                                                                 \n    Post.first.comments << Comment.create!                                       \n                                                                                 \n    join_last = Post.left_joins(:comments).select \"posts.*, comments.id\"         \n    join_first = Post.left_joins(:comments).select \"comments.id, posts.*\"        \n                                                                                 \n    assert_equal (1..10).to_a, join_last.map(&:id)                               \n    assert_equal join_last.map(&:id), join_first.map(&:id)                       \n  end                                                                            \nend                                                                              \nExpected behavior\n\nPost records should have correct id and not the ID of the join record(s)\nOrder of what is being selected should not matter?\n\nActual behavior\nThe ID if the join record appears to be assigned to the main record\nSystem configuration\nRails version: 7.0.0\nRuby version: 3.2.2\nAlso tested with Rails 6 and Ruby 2.7", "number_of_comments": 1, "comment_authors": ["conzett"]},
{"title": "Broken table alias referencing in Rails 7.0.7", "link": "https://github.com/rails/rails/issues/48945", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 1, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3285698890686035, "creation_date": "2023-08-15T16:11:26Z", "issue_submitter": "kaoru", "body": "Steps to reproduce\nWe're using a combination of \"where missing\" and \"or + scope\" to find goals without a state, either because they have no state record or because they have a state record with a NULL state column on it.\nThe behaviour has changed in Rails 7.0.7 to throw an ActiveRecord::StatementInvalid error, because on 7.0.6 the left joined table was not given an alias but on 7.0.7 it is given an alias and that alias is then not consistently used in the where clauses produced.\nNote this looks a lot like #48334 but that bug is fixed on 7.0.6 and 7.0.7.\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # gem 'rails', '~> 7.0', '= 7.0.6'\n  gem 'rails', '~> 7.0', '= 7.0.7'\n  # gem 'rails', github: 'rails/rails'\n  gem 'sqlite3'\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\n#ActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :goals, force: true do |t|\n  end\n\n  create_table :goal_states, force: true do |t|\n    t.integer :goal_id\n    t.string :state\n  end\nend\n\nclass Goal < ActiveRecord::Base\n  has_one :state, class_name: 'GoalState', dependent: :destroy\n\n  scope :no_state, -> { where.missing(:state).or(left_joins(:state).merge(GoalState.not_set)) }\nend\n\nclass GoalState < ActiveRecord::Base\n  belongs_to :goal\n\n  scope :set, -> { where.not(state: nil) }\n  scope :not_set, -> { where(state: nil) }\nend\n\nclass BugTest < Minitest::Test\n  def setup\n    @g1 = Goal.create\n\n    @g2 = Goal.create\n    @g2.create_state(state: nil)\n\n    @g3 = Goal.create\n    @g3.create_state(state: 'cool')\n  end\n\n  # This works on Rails 7.0.6 and gives an ActiveRecord::StatementInvalid on\n  # Rails 7.0.7 because the table alias behaviour has changed.\n  def test_no_state\n    puts\n    puts Goal.no_state.to_sql\n    puts\n\n    assert_equal 2, Goal.no_state.count\n    assert_equal Goal.no_state, [@g1, @g2]\n  end\nend\nExpected behavior\nOn Rails 7.0.6 the SQL produced is:\nSELECT \"goals\".* FROM \"goals\" LEFT OUTER JOIN \"goal_states\" ON \"goal_states\".\"goal_id\" = \"goals\".\"id\" WHERE (\"goal_states\".\"id\" IS NULL OR \"goal_states\".\"state\" IS NULL)\nActual behavior\nOn Rails 7.0.7 (and on the main branch of rails/rails) the SQL produced is:\nSELECT \"goals\".* FROM \"goals\" LEFT OUTER JOIN \"goal_states\" \"state\" ON \"state\".\"goal_id\" = \"goals\".\"id\" WHERE (\"state\".\"id\" IS NULL OR \"goal_states\".\"state\" IS NULL)\nWhich throws an error:\nActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: goal_states.state\n\nBecause the missing gives the left join an alias of \"state\" but the check produced by the \"OR\" uses the table name \"goal_states\".\nI've fixed this in our codebase by changing the code to scope :no_status, -> { left_joins(:status).merge(Goals::Status.not_set) } because technically with a left join the missing check is redundant anyway! But I thought I'd report the bug in case it's affecting other people with harder-to-fix query cases.\nSystem configuration\nRails version: 7.0.7\nRuby version: 3.2.2", "number_of_comments": 3, "comment_authors": ["kaoru", "shouichi", "paulreece"]},
{"title": "HashWithIndifferentAccess#to_proc does not map keys to values as Hash#to_proc does", "link": "https://github.com/rails/rails/issues/48770", "labels": ["\n                activesupport\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.4102356433868408, "creation_date": "2023-07-20T15:13:09Z", "issue_submitter": "jasonkarns", "body": "Hash#to_proc returns a proc that maps key to its value in the hash.\nHashWithIndifferentAccess#to_proc however, does not generate a proc that behaves similarly.\nThere are two distinct behaviors that deviate from expections. Firstly, since HWIA normalizes symbol keys to strings internally, then HWIA#to_proc will only work with string keys. (symbol keys map to nil). If a HWIA is constructed with symbol keys, then it should be expected that #to_proc honor that form.\nThe more general behavior, I think, is that one would expect a HWIA#to_proc to still map keys indifferently. So even if the HWIA were constructed with string keys, it should still accept symbols as well, since that is the point of HWIA (and since the proc is intended to essentially equate to #[]).\nSteps to reproduce\nRepro gist: https://gist.github.com/jasonkarns/b8cfea9d681f3754648d807dc6710d63\nregular_hash = {a: 1, b: 2}\nindifferent_hash = regular_hash.with_indifferent_access\n\nkeys = regular_hash.keys # symbol keys\n\nkeys.map(&indifferent_hash)\nExpected behavior\nI would expect the result to be [1,2] just as keys.map(&regular_hash) would return.\nActual behavior\nActual result is [nil, nil]\nSystem configuration\nRails version: 7.0.6\nRuby version: 3.1.3", "number_of_comments": 3, "comment_authors": ["jasonkarns", "fatkodima", "jasonkarns"]},
{"title": "Encrypted columns are not decrypted when used in group operations across joins", "link": "https://github.com/rails/rails/issues/48764", "labels": ["\n                activerecord\n", "\n                encryption\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.44649362564086914, "creation_date": "2023-07-19T19:10:23Z", "issue_submitter": "TikiTDO", "body": "Steps to reproduce\n\nCreate a DB entry with an encrypted deterministic column as per: https://guides.rubyonrails.org/active_record_encryption.html#deterministic-and-non-deterministic-encryption\n\nRun the following code on a server with the encryption key:\nArticle.joins(:author).group(:email).count\nExpected behavior\n=> {\"email@example.com\"=>111,\n \"email@example.com\"=>222}\nActual behavior\n=> {\"{\\\"p\\\":\\\"tHc=\\\",\\\"h\\\":{\\\"iv\\\":\\\"AUAnaod3vn4ThiCq\\\",\\\"at\\\":\\\"tNCqVTXFXsTu/7b22+KJkQ==\\\"}}\"=>111,\n \"{\\\"p\\\":\\\"vXw=\\\",\\\"h\\\":{\\\"iv\\\":\\\"GzjQbfA1erPDJGcG\\\",\\\"at\\\":\\\"cSCrtBxMJuJI/belpvaGtQ==\\\"}}\"=>222}\nSystem configuration\nRails version: 7.0.6\nRuby version: 3.2.2", "number_of_comments": 1, "comment_authors": ["TikiTDO"]},
{"title": "Changing Encryption Field to Deterministic Causes Encryption Errors", "link": "https://github.com/rails/rails/issues/48797", "labels": ["\n                encryption\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.46562814712524414, "creation_date": "2023-07-24T19:52:06Z", "issue_submitter": "aveedibya", "body": "Wondering if there is a way to read an encrypted field after changing its encryption to deterministic? Seems like currently there is no way in Rails to read the field's value if the field was set to non-deterministic (default way)  and then changed to deterministic.\nActiveRecord::Encryption::Errors::Decryption: ActiveRecord::Encryption::Errors::Decryption\n\n\n\n56\nuncompress_if_needed(cipher.decrypt(message, key: keys.collect(&:secret), **cipher_options), message.headers.compressed)\n\n\n\n\n57\nrescue *(ENCODING_ERRORS + DECRYPT_ERRORS)\n\n\n58\nraise Errors::Decryption\n\n\n59\nend\n\n\n\nVersions in use:\nruby \"3.1.2\"\ngem \"rails\", \"~> 7.0.3\"", "number_of_comments": 2, "comment_authors": ["aveedibya", "pdmholden"]},
{"title": "URL of attachments inside ActionText content are wrong when content is rendered within background jobs", "link": "https://github.com/rails/rails/issues/48790", "labels": ["\n                actiontext\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.49089765548706055, "creation_date": "2023-07-24T00:48:22Z", "issue_submitter": "Benratelade", "body": "Steps to reproduce\nI couldn't figure out how to use the scripts to replicate the issue, since I had to include background jobs and ActionText with ActiveRecord. Instead, I put together a simple Rails app with a test case that shows the problem. Hopefully that's enough.\nYou can find the app here: https://github.com/Benratelade/rails-workers-routing-bug\nExpected behavior\nThe src of images inside the ActionText should match that of the rest of the Rails app when the content is rendered within a Sidekiq job.\nActual behavior\nThe src of images inside the ActionText uses http://example.org and ignores the Rails app config, but only when the content is rendered synchronously.\nSystem configuration\nRails version: 7.0.3\nRuby version: 3.2.2", "number_of_comments": 2, "comment_authors": ["Benratelade", "Jay0921"]},
{"title": "Behavior changed when passing an array to form_for in Rails 7.0", "link": "https://github.com/rails/rails/issues/48789", "labels": ["\n                actionview\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6354420185089111, "creation_date": "2023-07-23T10:18:07Z", "issue_submitter": "krororo", "body": "Steps to reproduce\nWhen passing an array of objects that can be call to_model to form_for, the method: patch is not included.\nThis issue is similar to #44326. However, it seems that nested routes have not been fixed.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  # gem \"rails\", \"6.1.7.4\"\n  gem \"rails\", \"7.0.6\"\nend\n\nrequire \"rack/test\"\nrequire \"active_model\"\nrequire \"action_view\"\nrequire \"minitest/autorun\"\n\nclass Post\n  include ActiveModel::Model\n\n  attr_reader :id\n\n  def initialize(persisted: false)\n    @persisted = persisted\n    @id = 1 if persisted\n  end\n\n  def persisted?\n    @persisted\n  end\nend\n\nclass PostForm\n  include ActiveModel::Model\n\n  def initialize(post)\n    @post = post\n  end\n\n  def to_model\n    @post\n  end\nend\n\nclass BugTest < ActionView::TestCase\n  tests ActionView::Helpers::FormHelper\n\n  routes = ActionDispatch::Routing::RouteSet.new\n  routes.draw do\n    namespace :admin do\n      resources :posts\n    end\n  end\n  include routes.url_helpers\n\n  def test_form_for_namespaced_routes_new_model\n    assert_dom_equal(\n      '<form class=\"new_post\" id=\"new_post\" action=\"/admin/posts\" accept-charset=\"UTF-8\" method=\"post\">' \\\n      '<input name=\"utf8\" type=\"hidden\" value=\"&#x2713;\" autocomplete=\"off\" />' \\\n      '</form>',\n      form_for([:admin, PostForm.new(Post.new)]) {}\n    )\n  end\n\n  def test_form_for_namespaced_routes_edit_model\n    assert_dom_equal(\n      '<form class=\"edit_post\" id=\"edit_post_1\" action=\"/admin/posts/1\" accept-charset=\"UTF-8\" method=\"post\">' \\\n      '<input name=\"utf8\" type=\"hidden\" value=\"&#x2713;\" autocomplete=\"off\" />' \\\n      '<input name=\"_method\" type=\"hidden\" value=\"patch\" autocomplete=\"off\" />' \\\n      '</form>',\n      form_for([:admin, PostForm.new(Post.new(persisted: true))]) {}\n    )\n  end\nend\nExpected behavior\nThese tests are passed in Rails 6.1 and Rails main branch. So it should work on Rails 7.0 as well.\n# Running:\n\n..\n\nFinished in 0.069481s, 28.7847 runs/s, 28.7847 assertions/s.\n2 runs, 2 assertions, 0 failures, 0 errors, 0 skips\n\nActual behavior\ntest_form_for_namespaced_routes_edit_model fails in Rails 7.0.\nThe _method of the hidden field is not included.\n# Running:\n\nF\n\nFailure:\nBugTest#test_form_for_namespaced_routes_edit_model [actionview_test.rb:68]:\nExpected: <form class=\"edit_post\" id=\"edit_post_1\" action=\"/admin/posts/1\" accept-charset=\"UTF-8\" method=\"post\"><input name=\"utf8\" type=\"hidden\" value=\"&#x2713;\" autocomplete=\"off\" /><input name=\"_method\" type=\"hidden\" value=\"patch\" autocomplete=\"off\" /></form>\nActual: <form class=\"edit_post\" id=\"edit_post_1\" action=\"/admin/posts/1\" accept-charset=\"UTF-8\" method=\"post\"><input name=\"utf8\" type=\"hidden\" value=\"&#x2713;\" autocomplete=\"off\" /></form>\n\n\nrails test actionview_test.rb:67\n\n.\n\nFinished in 0.036721s, 54.4642 runs/s, 54.4642 assertions/s.\n2 runs, 2 assertions, 1 failures, 0 errors, 0 skips\n\nSystem configuration\nRails version:\n7.0.6\nRuby version:\n3.1.4", "number_of_comments": 6, "comment_authors": ["krororo", "ghiculescu", "seanpdoyle", "ghiculescu", "byroot", "seanpdoyle"]},
{"title": "Combing tagged logger without block and with block leaks tags across threads", "link": "https://github.com/rails/rails/issues/48787", "labels": ["\n                activesupport\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6678521633148193, "creation_date": "2023-07-22T13:24:34Z", "issue_submitter": "erikbelusic", "body": "Using the tagged logger without a block does not appear to have the same threaded isolation that tagging with a block has. The documentation doesn't make it clear if its intended or not, but from a user's perspective, it is unexpected. From the existing tests, it looks like some of this is expected, but the inconsistency is confusing. I left a comment on the original PR to try and get some insight.\nThis could be in some ways related to #46084 - however the focus of that is broadcast logging and not threading, however the issues seem similar - tag leak.\nSteps to reproduce\nThis example currently relies on identical setup to what is in activesupport/test/tagged_logging_test.rb which should make it easy to add these tests or some modified versions if its agreed this is a bug.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\nend\n\nrequire \"active_support\"\nrequire \"active_support/core_ext/object/blank\"\nrequire \"minitest/autorun\"\n\nclass BugTest < Minitest::Test\n  # Copied from activesupport/test/tagged_logging_test.rb\n  class MyLogger < ::ActiveSupport::Logger\n    def flush(*)\n      info \"[FLUSHED]\"\n    end\n  end\n\n  # Copied from activesupport/test/tagged_logging_test.rb\n  def setup\n    @output = StringIO.new\n    @logger = ActiveSupport::TaggedLogging.new(MyLogger.new(@output))\n  end\n\n  # Copied from activesupport/test/tagged_logging_test.rb:80\n  def test_keeps_each_tag_in_their_own_thread\n    @logger.tagged(\"BCX\") do\n      Thread.new do\n        @logger.info \"Dull story\"\n        @logger.tagged(\"OMG\") { @logger.info \"Cool story\" }\n      end.join\n      @logger.info \"Funky time\"\n    end\n    assert_equal \"Dull story\\n[OMG] Cool story\\n[BCX] Funky time\\n\", @output.string\n  end\n  # PASS output:\n  # Dull story\n  # [OMG] Cool story\n  # [BCX] Funky time\n\n  def test_keeps_each_tag_in_their_own_thread_using_tagged_without_block\n    logger1 = @logger.tagged(\"BCX\")\n    Thread.new do\n      logger1.info \"Dull story\"\n      logger2 = logger1.tagged(\"OMG\")\n      logger2.info \"Cool story\"\n    end.join\n    logger1.info \"Funky time\"\n\n    assert_equal \"Dull story\\n[OMG] Cool story\\n[BCX] Funky time\\n\", @output.string\n  end\n  # FAIL output:\n  # [BCX] Dull story\n  # [BCX] [OMG] Cool story\n  # [BCX] Funky time\n\n  def test_keeps_each_tag_in_their_own_thread_using_tagged_without_block_combined_with_tagged_block\n    logger1 = @logger.tagged(\"BCX\")\n    Thread.new do\n      logger1.info \"Dull story\"\n      logger1.tagged(\"OMG\") { logger1.info \"Cool story\" }\n    end.join\n    logger1.info \"Funky time\"\n\n    assert_equal \"Dull story\\n[OMG] Cool story\\n[BCX] Funky time\\n\", @output.string\n  end\n  # FAIL output:\n  # [BCX] Dull story\n  # [BCX] [OMG] Cool story\n  # [BCX] Funky time\n\n  def test_keeps_each_tag_in_their_own_thread_using_tagged_without_block_combined_with_tagged_block_nested\n    logger = @logger.tagged(\"BASE_TAG\")\n    logger.tagged(\"BCX\") do\n      Thread.new do\n        logger.info \"Dull story\"\n        logger.tagged(\"OMG\") { logger.info \"Cool story\" }\n      end.join\n      logger.info \"Funky time\"\n    end\n    assert_equal \"[BASE_TAG] Dull story\\n[BASE_TAG] [OMG] Cool story\\n[BASE_TAG] [BCX] Funky time\\n\", @output.string\n  end\n  # FAIL output:\n  # [BASE_TAG] [BCX] Dull story\n  # [BASE_TAG] [BCX] [OMG] Cool story\n  # [BASE_TAG] [BCX] Funky time\nend\n\nExpected behavior\nI would expect that if #tagged has a certain level of thread isolation, it should always have that isolation and behave consistently. At a minimum test_keeps_each_tag_in_their_own_thread_using_tagged_without_block_combined_with_tagged_block_nested should pass. It seems awkward that depending on how your current logger instance was created, the behavior of tagging with a block could change. I think it is worth a conversation on the correct behavior here, as maybe my first two failures should remain failures due to some context or intent I am unaware of.\nActual behavior\n\nWhen using a new logger created from #tagged, tags are shared across threads\nWhen tagging with a block from a logger instance created from #tagged, all tags are shared\n\nSystem configuration\nRails version: main\nRuby version: 3.0.0", "number_of_comments": 1, "comment_authors": ["erikbelusic"]},
{"title": "Rails 7.0.6 label_for translations not working in index views", "link": "https://github.com/rails/rails/issues/48629", "labels": [], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.49418020248413086, "creation_date": "2023-07-03T01:29:09Z", "issue_submitter": "augustosamame", "body": "Steps to reproduce\ngenerate a new rails project\ngenerate a scaffold: rails g scaffold Post title body\nrun migrations\nmodify i18n en.yml file with the following content:\nen:\n  hello: \"Hello world\"\n  activerecord:\n    attributes:\n      post:\n        title: \"Title from i18n\"\n        body: \"Body from i18n\"\n\nReplace the labels in both index and show views with <%= label(:post, :body) %>\nOr you can even do the replace in the single posts shared partial\n<div id=\"<%= dom_id post %>\">\n  <p>\n    <strong>Title:</strong>\n    <%= post.title %>\n  </p>\n\n  <p>\n    <strong><%= label(:post, :body) %>:</strong>\n    <%= post.body %>\n  </p>\n\n</div>\n\n\nExpected behavior\nThe body label should show 'Body from i18n' in all views\nActual behavior\nAll views show correct translated label. Index view shows the incorrect (default) body label\nI did some testing and all views are fine, but for some reason, index view fails.\nSystem configuration\nRails version 7.0.6:\nRuby version 3.2.2:", "number_of_comments": 4, "comment_authors": ["augustosamame", "augustosamame", "Edouard-chin", "augustosamame"]},
{"title": "Make ActiveRecord Encryptor agnostic of the type of serialized data to be decrypted", "link": "https://github.com/rails/rails/issues/48685", "labels": ["\n                activerecord\n", "\n                encryption\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.4564197063446045, "creation_date": "2023-07-07T13:11:02Z", "issue_submitter": "maximerety", "body": "Steps to reproduce\nI am using ActiveRecord Encryption with latest Rails 7.0.*, and a custom serializer instead of the default one.\nThis custom serializer outputs binary values that are stored in a bytea column in PostgreSQL, instead of a JSON value in a text column, as the default MessageSerializer would do.\nIt works pretty well except that the ActiveRecord::Encryption::Encryptor#deserialize_message prevents ActiveModel::Type::Binary::Data objects to be passed to the custom serializer for decryption. (Note: we get this type of data for user inputs subsequently decrypted, e.g. during attribute validation).\nI would expect the Encryptor to be agnostic about the type of values to decrypt, and let the underlying serializer assert the actual types that it supports.\nNote that the default MessageSerializer is already able to reject any input which is not a String:\n\nA  TypeError is raised by JSON.parse (not caught here)\n\n\n\nrails/activerecord/lib/active_record/encryption/message_serializer.rb\n\n\n        Lines 24 to 29\n      in\n      a5fc471\n\n\n\n\n\n\n def load(serialized_content) \n\n\n\n data = JSON.parse(serialized_content) \n\n\n\n parse_message(data, 1) \n\n\n\n rescue JSON::ParserError \n\n\n\n raise ActiveRecord::Encryption::Errors::Encoding \n\n\n\n end \n\n\n\n\n\nThe TypeError is caught and replaced by an Encoding error:\n\n\n\nrails/activerecord/lib/active_record/encryption/encryptor.rb\n\n\n        Lines 102 to 107\n      in\n      a5fc471\n\n\n\n\n\n\n def deserialize_message(message) \n\n\n\n raise Errors::Encoding unless message.is_a?(String) \n\n\n\n serializer.load message \n\n\n\n rescue ArgumentError, TypeError, Errors::ForbiddenClass \n\n\n\n raise Errors::Encoding \n\n\n\n end \n\n\n\n\n\nAnd finally caught again and replaced by  a Decryption error:\n\n\n\nrails/activerecord/lib/active_record/encryption/encryptor.rb\n\n\n        Lines 52 to 59\n      in\n      a5fc471\n\n\n\n\n\n\n def decrypt(encrypted_text, key_provider: default_key_provider, cipher_options: {}) \n\n\n\n message = deserialize_message(encrypted_text) \n\n\n\n keys = key_provider.decryption_keys(message) \n\n\n\n raise Errors::Decryption unless keys.present? \n\n\n\n uncompress_if_needed(cipher.decrypt(message, key: keys.collect(&:secret), **cipher_options), message.headers.compressed) \n\n\n\n rescue *(ENCODING_ERRORS + DECRYPT_ERRORS) \n\n\n\n raise Errors::Decryption \n\n\n\n end \n\n\n\n\n\n\nSo there is no need for this duplicate preventive check at Encryptor level in step 2.:\n\n\n\nrails/activerecord/lib/active_record/encryption/encryptor.rb\n\n\n         Line 103\n      in\n      a5fc471\n\n\n\n\n\n\n raise Errors::Encoding unless message.is_a?(String) \n\n\n\n\n\nWhen I remove that duplicate check, the behavior is unchanged when using the default MessageSerializer, but I am able to use a custom serializer too.\nExpected behavior\nI would expect the Encryptor to be agnostic about the type of values to decrypt, and let the underlying serializer assert the actual types that it supports.\nActual behavior\nThe Encryptor assumes that the input to be deserialized/decrypted is always a String when it could be something else. This unnecessarily prevents the use of custom serializers.\nSystem configuration\nRails version: 7.0.6 / 7.1\nRuby version: 3.2.2", "number_of_comments": 1, "comment_authors": ["maximerety"]},
{"title": "Arel table alias breaks insert, update, and delete statements", "link": "https://github.com/rails/rails/issues/48775", "labels": ["\n                activerecord\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.688849925994873, "creation_date": "2023-07-20T21:10:55Z", "issue_submitter": "lavoiesl", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"~> 7.0.0\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.string \"name\"\n  end\nend\n\nclass Post < ActiveRecord::Base\nend\n\n\nclass BugTest < Minitest::Test\n  def setup\n    Post.arel_table.table_alias = nil\n  end\n\n  def test_select\n    assert_equal('SELECT \"posts\".* FROM \"posts\"', Post.all.to_sql)\n  end\n\n  def test_select_alias\n    Post.arel_table.table_alias = \"p\"\n    assert_equal('SELECT \"p\".* FROM \"posts\" \"p\"', Post.all.to_sql)\n  end\n\n  def test_insert\n    post = Post.create!\n    refute_nil(post)\n  end\n\n  def test_insert_alias\n    Post.arel_table.table_alias = \"p\"\n    e = assert_raises(ActiveRecord::StatementInvalid) do\n      Post.create!\n    end\n    assert_equal('INSERT INTO \"posts\" \"p\" DEFAULT VALUES', e.sql)\n    assert_equal('SQLite3::SQLException: near \"\"p\"\": syntax error', e.message)\n  end\n\n  def test_update\n    post = Post.create!\n    refute_nil(post)\n    post.name = \"foo\"\n    post.save!\n  end\n\n  def test_update_alias\n    post = Post.create!\n    refute_nil(post)\n\n    Post.arel_table.table_alias = \"p\"\n    e = assert_raises(ActiveRecord::StatementInvalid) do\n      post.name = \"foo\"\n      post.save!\n    end\n    assert_equal('UPDATE \"posts\" \"p\" SET \"name\" = ? WHERE \"p\".\"id\" = ?', e.sql)\n    assert_equal('SQLite3::SQLException: near \"\"p\"\": syntax error', e.message)\n  end\n\n  def test_delete\n    post = Post.create!\n    refute_nil(post)\n    post.delete\n  end\n\n  def test_delete_alias\n    post = Post.create!\n    refute_nil(post)\n\n    Post.arel_table.table_alias = \"p\"\n    e = assert_raises(ActiveRecord::StatementInvalid) do\n      post.delete\n    end\n    assert_equal('DELETE FROM \"posts\" \"p\" WHERE \"p\".\"id\" = ?', e.sql)\n    assert_equal('SQLite3::SQLException: near \"\"p\"\": syntax error', e.message)\n  end\nend\nExpected behavior\nThe table alias is valid on SELECTs, but not on INSERT, UPDATE, or DELETE statements.\nThe example is with sqlite, but MySQL has similar rules where it specifically asks for a table name.\nI would expect Arel to NOT use the alias on insert, update, and delete statements\nSystem configuration\nRails version:\n6.1.7.4\nRuby version:\n3.2.2\nMySQL:\nMySQL 5.7, using the mysql2 0.5.5 gem", "number_of_comments": 4, "comment_authors": ["lavoiesl", "lavoiesl", "lavoiesl", "paulreece"]},
{"title": "Uniqueness validation not triggering when calling create_association", "link": "https://github.com/rails/rails/issues/48632", "labels": ["\n                activerecord\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5599031448364258, "creation_date": "2023-07-03T09:54:09Z", "issue_submitter": "rcpj", "body": "From Rails version v7.0.5 onwards, the uniqueness validation stopped working when calling the create_association method from the model with the has_one. This doesn't happen if the create method is issued directly from the association model instead.\nSteps to reproduce\n#!/usr/bin/env ruby\n\nrequire 'bundler/inline'\n\ngemfile(true) do\n  source 'https://rubygems.org'\n\n  gem 'rails', '~> 7.0.5'\n  gem 'sqlite3'\n  gem 'byebug'\nend\n\nrequire 'active_record'\nrequire 'minitest/autorun'\nrequire 'logger'\n\nActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :invoices do |t|\n    t.string :name\n  end\n\n  create_table :payments do |t|\n    t.string :name\n    t.references :invoice\n  end\nend\n\nclass Invoice < ActiveRecord::Base\n  has_one :payment, dependent: :destroy\nend\n\nclass Payment < ActiveRecord::Base\n  belongs_to :invoice, optional: true\n  validates :invoice_id, uniqueness: true\nend\n\nclass TestUniquenessValidationNotTriggering < Minitest::Test\n  def test_uniqueness_validation_not_triggering\n    assert_raises ActiveRecord::RecordInvalid do\n      invoice = Invoice.create(name: 'Example invoice')\n      invoice.create_payment!(name: \"Alice's payment\")\n      assert_equal \"Alice's payment\", invoice.payment.name\n\n      invoice.create_payment!(name: \"Bob's payment\")\n    end\n  end\nend\nExpected behavior\nIt should raise ActiveRecord::RecordInvalid due to uniqueness validation\nActual behavior\nIt creates the record successfully not raising the ActiveRecord::RecordInvalid exception\nSystem configuration\nRails version: ~> 7.0.5\nRuby version: 3.2.1", "number_of_comments": 4, "comment_authors": ["rcpj", "fatkodima", "pedroaugustofsilva", "sinsoku"]},
{"title": "Loading a CollectionAssociation is not threadsafe in all contexts", "link": "https://github.com/rails/rails/issues/48671", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6810839176177979, "creation_date": "2023-07-05T21:13:21Z", "issue_submitter": "mullican", "body": "Steps to reproduce\nThe superclass CollectionAssociation applies to has_many and HABTM relations. Its implementation of the load_target method relies on the value of an instance variable @target which is initialized in reset to an empty array. When a given association has not been loaded, this variable is passed as an argument to the method merge_target_lists, where database results are compared to the current copy of the records held in memory.\nThis presents two potential race conditions in threaded code:\n\nThe reset method calls super before assigning the empty array to @target. On the Association superclass, @target is assigned as nil, so there is a brief moment between the two assignments where it may evaluate as nil. Many methods on CollectionAssociation assume that its value is always an array and will throw a NoMethodError exception if called in this state.\nThe implementation of merge_target_lists mutates the value of the passed argument by calling delete on its elements before subsequently returning a final result back to the caller, where it is reassigned to the @target variable. Thus, there is also a brief moment, while this method is iterating over a result set, where @target may contain either partial data or no data. If another thread relies on the value of @target at this point in time, it will see inconsistent results.\n\nConsider the following scenario:\nclass Post < ApplicationRecord\n  has_many :comments\nend\n\n@post = Post.find(1)\nThread.new { @post.comments.do_some_work }\nThread.new { @post.comments.do_other_work }\nExpected behavior\nBecause the call to comments will lazily load the association, and there is no guaranteed order of execution, either thread, or both, may load records from the database, depending on when the value of @loaded is read and written. However, the load should occur atomically, so that if both threads evaluate @loaded as false, they both fetch and return the correct records consistently. In the current implementation, a thread in this scenario may see no data, partial data, or throw an exception.\nActual behavior\nFor example:\n@post = Post.first\nexpected_result_count = @post.comments.count\nthread_count = @post.class.connection_pool.size-1\n\n1_000.times { |i|\n  @post.association(:comments).reset\n  thread_count.times.map { |j|\n    Thread.new {\n      begin\n        actual_count = @post.comments.load.size\n        if actual_count != expected_result_count\n          STDOUT.puts \"Thread ##{j}[#{i}]: Expected #{expected_result_count}, found #{actual_count}\"\n        end\n      rescue => e\n        STDOUT.puts \"Thread ##{j}[#{i}]: Caught exception #{e}\"\n      end\n    }\n  }.each(&:join)\n}\nOutput of an example run on my hardware, using 50 threads with 1K iterations — 14 of the 50K loads returned inconsistent data or errors:\nThread #5[246]: Caught exception undefined method `persisted?' for nil:NilClass\nThread #20[246]: Caught exception undefined method `persisted?' for nil:NilClass\nThread #29[246]: Caught exception undefined method `persisted?' for nil:NilClass\nThread #40[246]: Caught exception undefined method `persisted?' for nil:NilClass\nThread #41[246]: Caught exception undefined method `persisted?' for nil:NilClass\nThread #36[246]: Caught exception undefined method `persisted?' for nil:NilClass\nThread #49[246]: Caught exception undefined method `persisted?' for nil:NilClass\nThread #45[268]: Expected 500, found 468\nThread #42[268]: Expected 500, found 468\nThread #39[268]: Expected 500, found 468\nThread #49[268]: Expected 500, found 468\nThread #46[495]: Expected 500, found 469\nThread #46[533]: Expected 500, found 454\nThread #47[810]: Caught exception undefined method `persisted?' for nil:NilClass\n\nSystem configuration\nRails version: 6.1, 7.0\nRuby version: 3.0, 3.2", "number_of_comments": 1, "comment_authors": ["mullican"]},
{"title": "Callbacks called twice when parent accepts_nested_attributes_for child", "link": "https://github.com/rails/rails/issues/48688", "labels": ["\n                activerecord\n", "\n                encryption\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5451815128326416, "creation_date": "2023-07-07T16:25:45Z", "issue_submitter": "jakemiller13", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.string :name\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n    t.string :name\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_one :comment\n\n  before_validation :before_validation_callback_post\n  after_validation :after_validation_callback_post\n\n  before_save :before_save_callback_post\n  after_save :after_save_callback_post\n\n  before_create :before_create_callback_post\n  after_create :after_create_callback_post\n\n  def before_validation_callback_post\n    puts 'Post: before_validation_callback'\n  end\n\n  def after_validation_callback_post\n    puts 'Post: after_validation_callback'\n  end\n\n  def before_save_callback_post\n    puts 'Post: before_save_callback'\n  end\n\n  def after_save_callback_post\n    puts 'Post: after_save_callback'\n  end\n\n  def before_create_callback_post\n    puts 'Post: before_create_callback'\n  end\n\n  def after_create_callback_post\n    puts 'Post: after_create_callback'\n  end\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\n\n  accepts_nested_attributes_for :post\n\n  before_validation :before_validation_callback_comment\n  after_validation :after_validation_callback_comment\n\n  before_save :before_save_callback_comment\n  after_save :after_save_callback_comment\n\n  before_create :before_create_callback_comment\n  after_create :after_create_callback_comment\n\n  def before_validation_callback_comment\n    puts 'Comment: before_validation_callback'\n  end\n\n  def after_validation_callback_comment\n    puts 'Comment: after_validation_callback'\n  end\n\n  def before_save_callback_comment\n    puts 'Comment: before_save_callback'\n  end\n\n  def after_save_callback_comment\n    puts 'Comment: after_save_callback'\n  end\n\n  def before_create_callback_comment\n    puts 'Comment: before_create_callback'\n  end\n\n  def after_create_callback_comment\n    puts 'Comment: after_create_callback'\n  end\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    Comment.create!(name: 'foo', post_attributes: {name: 'bar'})\n  end\nend\nExpected behavior\nbefore_validation, after_validation, before_save, after_save callbacks should only be called once when saving a parent record that accepts nested attributes for a child record. Note that before_create, after_create callbacks are only called once, so this inconsistency is especially confusing.\nActual behavior\nbefore_validation, after_validation, before_save, after_save are all called twice on parent record.\n(base) m-apd-jmiller:models jmiller$ ruby active_record_main.rb \nFetching https://github.com/rails/rails.git\nFetching gem metadata from https://rubygems.org/......\nResolving dependencies...\nUsing rake 13.0.6\nUsing connection_pool 2.4.1\nUsing minitest 5.18.1\nUsing webrick 1.8.1\nUsing erubi 1.12.0\nUsing rack 3.0.8\nUsing websocket-extensions 0.1.5\nUsing marcel 1.0.2\nUsing rack-test 2.1.0\nUsing bundler 2.4.7\nUsing websocket-driver 0.7.5\nUsing nio4r 2.5.9\nUsing zeitwerk 2.6.8\nUsing date 3.3.3\nUsing timeout 0.4.0\nUsing builder 3.2.4\nUsing io-console 0.6.0\nUsing racc 1.7.1\nUsing crass 1.0.6\nUsing thor 1.2.2\nUsing sqlite3 1.6.3 (x86_64-darwin)\nUsing rack-session 2.0.0\nUsing mini_mime 1.1.2\nUsing rackup 2.1.0\nUsing concurrent-ruby 1.2.2\nUsing net-protocol 0.2.1\nUsing reline 0.3.5\nUsing i18n 1.14.1\nUsing net-imap 0.3.6\nUsing nokogiri 1.15.3 (x86_64-darwin)\nUsing net-pop 0.1.2\nUsing net-smtp 0.3.3\nUsing loofah 2.21.3\nUsing irb 1.7.1\nUsing rails-html-sanitizer 1.6.0\nUsing tzinfo 2.0.6\nUsing mail 2.8.1\nUsing activesupport 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)\nUsing activemodel 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)\nUsing rails-dom-testing 2.1.1\nUsing activerecord 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)\nUsing actionview 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)\nUsing globalid 1.1.0\nUsing actionpack 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)\nUsing activejob 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)\nUsing actioncable 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)\nUsing activestorage 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)\nUsing actionmailer 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)\nUsing actionmailbox 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)\nUsing actiontext 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)\nUsing railties 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)\nUsing rails 7.1.0.alpha from https://github.com/rails/rails.git (at main@a5fc471)\n-- create_table(:posts, {:force=>true})\nD, [2023-07-07T12:17:20.483607 #2897] DEBUG -- :    (0.1ms)  DROP TABLE IF EXISTS \"posts\"\nD, [2023-07-07T12:17:20.485077 #2897] DEBUG -- :    (1.1ms)  CREATE TABLE \"posts\" (\"id\" integer PRIMARY KEY AUTOINCREMENT NOT NULL, \"name\" varchar)\n   -> 0.0286s\n-- create_table(:comments, {:force=>true})\nD, [2023-07-07T12:17:20.485698 #2897] DEBUG -- :    (0.0ms)  DROP TABLE IF EXISTS \"comments\"\nD, [2023-07-07T12:17:20.486042 #2897] DEBUG -- :    (0.1ms)  CREATE TABLE \"comments\" (\"id\" integer PRIMARY KEY AUTOINCREMENT NOT NULL, \"post_id\" integer, \"name\" varchar)\n   -> 0.0009s\nD, [2023-07-07T12:17:20.488263 #2897] DEBUG -- :    (0.1ms)  CREATE TABLE \"schema_migrations\" (\"version\" varchar NOT NULL PRIMARY KEY)\nD, [2023-07-07T12:17:20.490839 #2897] DEBUG -- :    (0.1ms)  CREATE TABLE \"ar_internal_metadata\" (\"key\" varchar NOT NULL PRIMARY KEY, \"value\" varchar, \"created_at\" datetime(6) NOT NULL, \"updated_at\" datetime(6) NOT NULL)\nD, [2023-07-07T12:17:20.532633 #2897] DEBUG -- :   ActiveRecord::InternalMetadata Load (2.7ms)  SELECT * FROM \"ar_internal_metadata\" WHERE \"ar_internal_metadata\".\"key\" = ? ORDER BY \"ar_internal_metadata\".\"key\" ASC LIMIT 1  [[nil, \"environment\"]]\nD, [2023-07-07T12:17:20.533215 #2897] DEBUG -- :   ActiveRecord::InternalMetadata Create (0.1ms)  INSERT INTO \"ar_internal_metadata\" (\"key\", \"value\", \"created_at\", \"updated_at\") VALUES ('environment', 'development', '2023-07-07 16:17:20.532735', '2023-07-07 16:17:20.532743')\nRun options: --seed 61519\n\n# Running:\n\nComment: before_validation_callback\nPost: before_validation_callback\nPost: after_validation_callback\nComment: after_validation_callback\nPost: before_save_callback\nPost: before_create_callback\nD, [2023-07-07T12:17:20.661392 #2897] DEBUG -- :   TRANSACTION (0.1ms)  begin transaction\nD, [2023-07-07T12:17:20.661656 #2897] DEBUG -- :   Post Create (0.4ms)  INSERT INTO \"posts\" (\"name\") VALUES (?)  [[\"name\", \"bar\"]]\nComment: before_validation_callback\nComment: after_validation_callback\nComment: before_save_callback\nComment: before_create_callback\nD, [2023-07-07T12:17:20.662908 #2897] DEBUG -- :   Comment Create (0.1ms)  INSERT INTO \"comments\" (\"post_id\", \"name\") VALUES (?, ?)  [[\"post_id\", 1], [\"name\", \"foo\"]]\nComment: after_create_callback\nComment: after_save_callback\nPost: after_create_callback\nPost: after_save_callback\nComment: before_save_callback\nComment: after_save_callback\nD, [2023-07-07T12:17:20.663528 #2897] DEBUG -- :   TRANSACTION (0.1ms)  commit transaction\n\nSystem configuration\nRails version: 5.2.8.1, 7.0.6 (tested both)\nRuby version: 2.7.6, 3.2.1 (tested both)", "number_of_comments": 2, "comment_authors": ["jakemiller13", "RobertChang0722"]},
{"title": "Throwing abort on an autosaved has_one association does not raise an exception", "link": "https://github.com/rails/rails/issues/48633", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7292134761810303, "creation_date": "2023-07-03T10:16:56Z", "issue_submitter": "wata727", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"7.0.6\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :suppliers, force: true do |t|\n  end\n  create_table :accounts, force: true do |t|\n    t.integer :supplier_id\n  end\nend\n\nclass Supplier < ActiveRecord::Base\n  has_one :account, autosave: true\nend\n\nclass Account < ActiveRecord::Base\n  before_save { throw(:abort) }\nend\n\nclass BugTest < Minitest::Test\n  def test_has_one\n    supplier = Supplier.new\n    supplier.build_account\n    assert_raises(ActiveRecord::RecordNotSaved) { supplier.save! }\n\n    assert_equal 0, Supplier.count\n    assert_equal 0, Account.count\n  end\nend\nExpected behavior\nThe tests should pass without errors.\nActual behavior\nActiveRecord::RecordNotSaved is not raised.\n# Running:\n\nFinished in 0.004507s, 221.8771 runs/s, 221.8771 assertions/s.\n\n  1) Failure:\nBugTest#test_has_one [has_one_abort_autosave.rb:43]:\nActiveRecord::RecordNotSaved expected but nothing was raised.\n\n1 runs, 1 assertions, 1 failures, 0 errors, 0 skips\n\nDetailed description\nWhen I first encountered this issue, I wasn't sure if this was a bug or intended behavior. So, I investigated the behavior of has_many, has_one, belongs_to. Below is the test:\n\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"7.0.6\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n    t.text :content\n  end\n\n  create_table :suppliers, force: true do |t|\n  end\n  create_table :accounts, force: true do |t|\n    t.integer :supplier_id\n    t.string :name\n  end\n\n  create_table :books, force: true do |t|\n    t.integer :author_id\n  end\n  create_table :authors, force: true do |t|\n    t.string :name\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\n  has_many :autosave_comments, class_name: 'Comment', autosave: true\n  has_many :abort_comments\n  has_many :abort_autosave_comments, class_name: 'AbortComment', autosave: true\n  has_many :invalid_comments\n  has_many :invalid_autosave_comments, class_name: 'InvalidComment', autosave: true\nend\n\nclass Comment < ActiveRecord::Base; end\nclass AbortComment < Comment\n  before_save { throw(:abort) }\nend\nclass InvalidComment < Comment\n  validates :content, presence: true\nend\n\nclass Supplier < ActiveRecord::Base\n  has_one :account\n  has_one :autosave_account, class_name: 'Account', autosave: true\n  has_one :abort_account\n  has_one :abort_autosave_account, class_name: 'AbortAccount', autosave: true\n  has_one :invalid_account\n  has_one :invalid_autosave_account, class_name: 'InvalidAccount', autosave: true\nend\n\nclass Account < ActiveRecord::Base; end\nclass AbortAccount < Account\n  before_save { throw(:abort) }\nend\nclass InvalidAccount < Account\n  validates :name, presence: true\nend\n\nclass Book < ActiveRecord::Base\n  belongs_to :author\n  belongs_to :autosave_author, class_name: 'Author', foreign_key: 'author_id', autosave: true\n  belongs_to :abort_author, foreign_key: 'author_id'\n  belongs_to :abort_autosave_author, class_name: 'AbortAuthor', foreign_key: 'author_id', autosave: true\n  belongs_to :invalid_author, foreign_key: 'author_id'\n  belongs_to :invalid_autosave_author, class_name: 'InvalidAuthor', foreign_key: 'author_id', autosave: true\nend\n\nclass Author < ActiveRecord::Base; end\nclass AbortAuthor < Author\n  before_save { throw(:abort) }\nend\nclass InvalidAuthor < Author\n  validates :name, presence: true\nend\n\nclass BugTest < Minitest::Test\n  def teardown\n    Post.delete_all\n    Comment.delete_all\n    Supplier.delete_all\n    Account.delete_all\n    Book.delete_all\n    Author.delete_all\n  end\n\n  def test_has_many\n    post = Post.new\n    post.comments.build\n    assert post.save!\n\n    assert_equal 1, Post.count\n    assert_equal 1, Comment.count\n  end\n\n  def test_has_many_autosave\n    post = Post.new\n    post.autosave_comments.build\n    assert post.save!\n\n    assert_equal 1, Post.count\n    assert_equal 1, Comment.count\n  end\n\n  def test_has_many_abort\n    post = Post.new\n    post.abort_comments.build\n    assert_raises(ActiveRecord::RecordInvalid) { post.save!}\n\n    assert_equal 0, Post.count\n    assert_equal 0, Comment.count\n  end\n\n  def test_has_many_abort_autosave\n    post = Post.new\n    post.abort_autosave_comments.build\n    assert_raises(ActiveRecord::RecordInvalid) { post.save!}\n\n    assert_equal 0, Post.count\n    assert_equal 0, Comment.count\n  end\n\n  def test_has_many_invalid\n    post = Post.new\n    post.invalid_comments.build\n    assert_raises(ActiveRecord::RecordInvalid) { post.save!}\n\n    assert_equal 0, Post.count\n    assert_equal 0, Comment.count\n  end\n\n  def test_has_many_invalid_autosave\n    post = Post.new\n    post.invalid_autosave_comments.build\n    assert_raises(ActiveRecord::RecordInvalid) { post.save!}\n\n    assert_equal 0, Post.count\n    assert_equal 0, Comment.count\n  end\n\n  def test_has_one\n    supplier = Supplier.new\n    supplier.build_account\n    assert supplier.save!\n\n    assert_equal 1, Supplier.count\n    assert_equal 1, Account.count\n  end\n\n  def test_has_one_autosave\n    supplier = Supplier.new\n    supplier.build_autosave_account\n    assert supplier.save!\n\n    assert_equal 1, Supplier.count\n    assert_equal 1, Account.count\n  end\n\n  def test_has_one_abort\n    supplier = Supplier.new\n    supplier.build_abort_account\n    assert supplier.save!\n\n    assert_equal 1, Supplier.count\n    assert_equal 0, Account.count\n  end\n\n  def test_has_one_abort_autosave\n    supplier = Supplier.new\n    supplier.build_abort_autosave_account\n    assert_raises(ActiveRecord::RecordNotSaved) { supplier.save! }\n\n    assert_equal 0, Supplier.count\n    assert_equal 0, Account.count\n  end\n\n  def test_has_one_invalid\n    supplier = Supplier.new\n    supplier.build_invalid_account\n    assert supplier.save!\n\n    assert_equal 1, Supplier.count\n    assert_equal 0, Account.count\n  end\n\n  def test_has_one_invalid_autosave\n    supplier = Supplier.new\n    supplier.build_invalid_autosave_account\n    assert_raises(ActiveRecord::RecordInvalid) { supplier.save! }\n\n    assert_equal 0, Supplier.count\n    assert_equal 0, Account.count\n  end\n\n  def test_belongs_to\n    book = Book.new\n    book.build_author\n    assert book.save!\n\n    assert_equal 1, Book.count\n    assert_equal 1, Author.count\n  end\n\n  def test_belongs_to_autosave\n    book = Book.new\n    book.build_autosave_author\n    assert book.save!\n\n    assert_equal 1, Book.count\n    assert_equal 1, Author.count\n  end\n\n  def test_belongs_to_abort\n    book = Book.new\n    book.build_abort_author\n    assert book.save!\n\n    assert_equal 1, Book.count\n    assert_equal 0, Author.count\n  end\n\n  def test_belongs_to_abort_autosave\n    book = Book.new\n    book.build_abort_autosave_author\n    assert_raises(ActiveRecord::RecordNotSaved) { book.save! }\n\n    assert_equal 0, Book.count\n    assert_equal 0, Author.count\n  end\n\n  def test_belongs_to_invalid\n    book = Book.new\n    book.build_invalid_author\n    assert book.save!\n\n    assert_equal 1, Book.count\n    assert_equal 0, Author.count\n  end\n\n  def test_belongs_to_invalid_autosave\n    book = Book.new\n    book.build_invalid_autosave_author\n    assert_raises(ActiveRecord::RecordInvalid) { book.save! }\n\n    assert_equal 0, Book.count\n    assert_equal 0, Author.count\n  end\nend\n\nThis test describes the consistent behavior of each association, but when I run it the test fails only in the case of has_one + abort + autosave:\nFinished in 0.073115s, 246.1875 runs/s, 711.2084 assertions/s.\n\n  1) Failure:\nBugTest#test_has_one_abort_autosave [test.rb:191]:\nActiveRecord::RecordNotSaved expected but nothing was raised.\n\n18 runs, 52 assertions, 1 failures, 0 errors, 0 skips\n\nAlso, in Active Record's documentation on callbacks, you'll find something like this:\n\nIf a before_* callback cancels the action a ROLLBACK is issued. You can also trigger a ROLLBACK raising an exception in any of the callbacks, including after_* hooks. Note, however, that in that case the client needs to be aware of it because an ordinary #save will raise such exception instead of quietly returning false.\n\nhttps://github.com/rails/rails/blob/v7.0.6/activerecord/lib/active_record/callbacks.rb#L268-L272\nThe current behavior of has_one seems to contradict this explanation.\nNote that this behavior has been around for a long time and is not a regression. As far as I can see, #22184 mentions the same issue.\nA possible fix would be to throw(:abort) if save_has_one_association returns false, as with belongs_to, but we need to investigate whether it works correctly under multiple conditions.\nhttps://github.com/rails/rails/blob/v7.0.6/activerecord/lib/active_record/autosave_association.rb#L198\nhttps://github.com/rails/rails/blob/v7.0.6/activerecord/lib/active_record/autosave_association.rb#L210\nSystem configuration\nRails version:\n7.0.6\n\nRuby version:\nruby 3.0.6p216 (2023-03-30 revision 23a532679b) [arm64-darwin22]", "number_of_comments": 2, "comment_authors": ["wata727", "wata727"]},
{"title": "Custom serialization & storage in ActiveRecord::Encryption (beyond strings)", "link": "https://github.com/rails/rails/issues/48689", "labels": ["\n                activerecord\n", "\n                encryption\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.915968656539917, "creation_date": "2023-07-07T17:17:19Z", "issue_submitter": "maximerety", "body": "Steps to reproduce\nIn https://guides.rubyonrails.org/active_record_encryption.html#supported-types, it is clearer stated:\n\nactive_record.encryption will serialize values using the underlying type before encrypting them, but they must be serializable as strings. Structured types like serialized are supported out of the box.\n\nAs long as you only have string values, a text/varchar column in the database, and a message serializer that emits and consumes strings (the situation currently described in the docs), everything works just fine.\nBut I'd like to propose to support a wider range of use cases by allowing custom serializers that output another type than strings.\nA typical use case would be to use a binary column in the database (e.g. bytea in PostgreSQL) and serialize encrypted values using a compact binary format such as the one provided by MessagePack (example given below), instead of the default JSON string format provided by the default message serializer.\nSetting a custom serializer via config.active_record.encryption.message_serializer is already supported (https://guides.rubyonrails.org/active_record_encryption.html#encryption-contexts). Unfortunately, it's not possible to make your custom serializer produce binary values and have things work right out of the box.\nOne small inconvenience is the problem described in #48685 (quite straitghforward to fix: #48686), but a bigger problem lies in the current design of ActiveRecord::Encryption::EncryptedAttributeType.\nTo make my explanation a bit visual, this is what we have today:\nAttribute without encryption:\n                          ┌──────┐     \n  user-provided value ───►┤ cast ├───► value for the db\n                          └──────┘     \n                                        \n                          ┌──────┐     \n   value for the user ◄───┤ cast ├◄─── db-provided value\n                          └──────┘     \n\n\nAttribute with encryption:\n                          ┌────────┐    ┌─────────┐    ┌─────────────┐    ┌────────┐     \n  user-provided value ───►┤ cast A ├───►┤ encrypt ├───►┤  serialize  ├───►┤ cast B ├───► value for the db\n                          └────────┘    └─────────┘    └─────────────┘    └────────┘     \n                                                                                         \n                          ┌────────┐    ┌─────────┐    ┌─────────────┐    ┌────────┐     \n   value for the user ◄───┤ cast A ├◄───┤ decrypt ├◄───┤ deserialize ├◄───┤ cast B ├◄─── db-provided value\n                          └────────┘    └─────────┘    └─────────────┘    └────────┘     \n\nAs of today, the default implementation of ActiveRecord::Encryption::EncryptedAttributeType uses the type of the database column as cast_type to perform the cast A step in the figure, and there is no cast B step.\nWhen a value is extracted from the database, there is no type casting before sending it to the message serializer for deserialization. Conversely, a value serialized with the message serializer is sent directly to the database without any further type casting. So, by default, there is no cast B step, and only strings are expected to be sent to/received from the database.\nAs long as you only have string values, a text/varchar column in the database, and a message serializer that emits and consumes strings (the situation currently described in the docs), everything works just fine.\nBut with this model, you can't easily switch to a bytea column and serialize in database-compatible binary format, because you have no built-in way to perform a cast B (binary) which is different from cast A (strings).\nI think we should recognize the need for two distinct types of casting:\n\nCasting clear values before encryption (e.g. ensuring correct type/encoding), and;\nCasting encrypted+serialized values before sending them to the database (e.g. sending a message that is serialized in binary format).\n\nIdeally, the framework should allow developers to specify the type of casting they need in a particular place, instead of using the database column type for cast A (not always appropriate), and providing no support for cast B.\nIf you think this could be a good addition to the framework, I would volunteer to help make this happen.\nFor completeness, a possible workaround is:\n\n\nTo declare the attribute as a string (despite the attribute being stored in a binary format in the database) in order to trick the framework to use a :string attribute type when performing cast A (see figure above):\n  create_table(:records, force: true) do |t|\n    t.bytea :some_attribute\n  end\n\n  class Record < ActiveRecord::Base\n+   attribute :some_attribute, :string\n    encrypts :some_attribute\n  end\n\n\nTo perform cast B yourself in the serializer, here an example of a binary message serializer using MessagePack (some details omitted - don't use this in your project):\nclass ByteaSerializer < ActiveRecord::Encryption::MessageSerializer\n  def load(escaped_content)  \n    encoded_content = binary_type.deserialize(escaped_content)\n    parse_message(MessagePack.unpack(encoded_content), 1)\n  end\n\n  def dump(message)\n    encoded_content = MessagePack.pack message_to_json(message)\n    binary_type.serialize(encoded_content)\n  end\n\n  private\n\n  def encode_if_needed(value) = value\n  def decode_if_needed(value) = value\n\n  def binary_type\n    @binary_type ||= ActiveRecord::Type.lookup(:binary, adapter: :postgresql)\n  end\nend\n\n\nAlthough this gives us a picture of what we're trying to achieve, I think we'd do better to make ActiveRecord::Encryption::EncryptedAttributeType more versatile so that it's possible to achieve this goal without using dangerous tricks.\nExpected behavior\nVarious database column types and message serializers are supported for encrypted attributes.\nActual behavior\nYou can only have string values, a text/varchar column in the database, and a message serializer that emits and consumes strings.\nSystem configuration\nRails version: 7.0.6\nRuby version: 3.2.2\n\nEdit on 2023-07-10\nI reworded the explanations around cast B, which is a step that does not exist in the default implementation, but which is needed in custom ones.", "number_of_comments": 3, "comment_authors": ["maximerety", "jorgemanrubia", "maximerety"]},
{"title": "Line filtering doesn't work for plugin tests", "link": "https://github.com/rails/rails/issues/48696", "labels": [], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9189548492431641, "creation_date": "2023-07-09T08:29:24Z", "issue_submitter": "lewispb", "body": "Steps to reproduce\n\nCheckout rails/kredis\nRun bin/test test/attributes_test.rb:82\n\nExpected behavior\nOnly one test runs\nActual behavior\nAll tests in test/attributes_test.rb run\nMore info\nI've fixed this for Kredis only, in this PR: rails/kredis#122\nKredis has a standard require \"rails/plugin/test\" in bin/test.\nrails/plugin/test does not support line filtering in the same way line filtering is installed for Rails apps or Rails itself.", "number_of_comments": 3, "comment_authors": ["lewispb", "yahonda", "lewispb"]},
{"title": "Enhancements to the Rails Generate Command for Easier Setup", "link": "https://github.com/rails/rails/issues/48479", "labels": ["\n                railties\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6074321269989014, "creation_date": "2023-06-15T00:48:31Z", "issue_submitter": "ptamarshall", "body": "Dear Rails Development Team,\nI'm writing to suggest potential improvements to the rails generate command, specifically around setting up complex model associations and setting default values.\n\n\nComplex Model Associations: Currently, rails generate model can create a polymorphic association at the database level but doesn't specify the polymorphic association in the model files. It would be beneficial if the command could also update the model files with the appropriate association.\nConsider a blogging platform where a Comment can belong to either a Post or another Comment:\nrails generate model Comment user:references commentable:references{polymorphic} content:text\nrails generate model Post user:references title:string content:text\nIn this scenario, developers still need to manually edit the model files to add the correct associations. If rails generate model could also add these associations, it would save developers time and reduce potential errors.\n\n\nDefault Values: The rails generate model command does not currently provide an option to set default values for fields. If this functionality was added, developers could specify default values right in the rails generate model command.\nFor example:\nrails generate model Post user:references title:string content:text views:integer{default:0}\nIn this example, a Post model is generated with a views field that has a default value of 0.\n\n\nThank you for considering these suggestions. Your work is greatly appreciated.\nBest regards,\nPete Marshall", "number_of_comments": 2, "comment_authors": ["ptamarshall", "hahmed"]},
{"title": "Render from before_action does not respect request format", "link": "https://github.com/rails/rails/issues/48550", "labels": ["\n                actionpack\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5198743343353271, "creation_date": "2023-06-21T19:36:57Z", "issue_submitter": "mikerobe", "body": "Steps to reproduce\nSee #32179\nWhen a call to render is made from within a before_action in a controller, it does not respect the request format. This issue recently led to an unexpected behavior where incorrect HTML templates were being rendered for JSON requests.\nHere are the steps from the ticket above (created in 2018 then auto closed as stale).\n\nCreate before_action function and run render within it:\n\nclass BeforeController < ApplicationController\n  before_action :before_index\n\n  def index\n  end\n\n  private\n  def before_index\n    render partial: 'test'\n  end\nend\n\n\nCreate templates for html and js format: _test.html.erb and _test.json.erb\nOpen index action url.\n\nExpected behavior\nRender uses the format specified in the request, so if open http://localhost:3000/before/index.html you see _test.html.erb rendered, and if open http://localhost:3000/before/index.json you see _test.json.erb rendered.\nActual behavior\nDefault format (_test.html.erb) is being rendered. If make same render execution within index action, format specified in the request is being used.\nSystem configuration\nRails version: 7.0.3\nRuby version: 3.2.2", "number_of_comments": 3, "comment_authors": ["mikerobe", "iamradioactive", "ghiculescu"]},
{"title": "Change in ActiveRecord JSON/JSONB Query Behavior from Rails 6.0 to 6.1", "link": "https://github.com/rails/rails/issues/48535", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9571137428283691, "creation_date": "2023-06-20T22:03:23Z", "issue_submitter": "JohnAnon9771", "body": "Steps to reproduce\nIn Rails 6.0, create a query on a JSON/JSONB column in PostgreSQL using an array of hashes:\nstore_ids = [{ \"store_id\" => 7 }, { \"store_id\" => 8 }]\nwhere(dimensions: store_ids) # This works as expected in Rails 6.0\nThen, run the same query in Rails 6.1:\nstore_ids = [{ \"store_id\" => 7 }, { \"store_id\" => 8 }]\nwhere(dimensions: store_ids) # This returns [] in Rails 6.1\nExpected behavior\nThe query should return the same results in Rails 6.1 as it did in Rails 6.0. The ActiveRecord should convert the array of hashes into a JSON representation that PostgreSQL can understand.\nActual behavior\nIn Rails 6.1, the query returns an empty array. It appears that ActiveRecord is no longer converting the array of hashes into a JSON representation that PostgreSQL can understand.\nAs a workaround, I've had to convert the store IDs into strings and use PostgreSQL's ->> operator syntax:\nstore_ids = [7, 8].map(&:to_s)\nwhere(\"dimensions->>'store_id' in (?)\", store_ids) # This works as expected in Rails 6.1\nSystem configuration\nRails version: 6.1\nRuby version: 2.7.7", "number_of_comments": 5, "comment_authors": ["JohnAnon9771", "fatkodima", "abaldwin88", "fatkodima", "yahonda"]},
{"title": "Not possible to use upsert_all with point type column", "link": "https://github.com/rails/rails/issues/48497", "labels": ["\n                activerecord\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.6080801486968994, "creation_date": "2023-06-16T09:05:13Z", "issue_submitter": "morgoth", "body": "When using upsert_all with a table having column with a type point and the updated_at timestamp, the error is raised:\nD, [2023-06-16T10:58:12.115714 #3553784] DEBUG -- :   Location Upsert (0.4ms)  INSERT INTO \"locations\" (\"identifier\",\"coordinates\",\"created_at\",\"updated_at\") VALUES ('test', '(1.1,1.2)', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP) ON CONFLICT (\"identifier\") DO UPDATE SET updated_at=(CASE WHEN (\"locations\".\"coordinates\" IS NOT DISTINCT FROM excluded.\"coordinates\") THEN \"locations\".updated_at ELSE CURRENT_TIMESTAMP END),\"coordinates\"=excluded.\"coordinates\" RETURNING \"id\"\nE\n\nError:\nBugTest#test_association_stuff:\nActiveRecord::StatementInvalid: PG::UndefinedFunction: ERROR:  operator does not exist: point = point\nLINE 1: ... updated_at=(CASE WHEN (\"locations\".\"coordinates\" IS NOT DIS...\n                                                             ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n\nIt's possible to workaround the issue by including the \"updated_at\" timestamp manually.\nThe reproducible script is as follows:\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"pg\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"postgresql\", database: \"upsert-bug\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :locations, force: true do |t|\n    t.string :identifier\n    t.point :coordinates\n    t.timestamps\n    t.index :identifier, unique: true\n  end\nend\n\nclass Location < ActiveRecord::Base\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    assert Location.upsert_all([identifier: \"test\", coordinates: [1.1, 1.2], updated_at: Time.current], unique_by: [:identifier]) # Works fine\n\n    assert Location.upsert_all([identifier: \"test\", coordinates: [1.1, 1.2]], unique_by: [:identifier]) # raises\n  end\nend", "number_of_comments": 1, "comment_authors": ["morgoth"]},
{"title": "accepts_nested_attributes_for does not work with non id primary_key", "link": "https://github.com/rails/rails/issues/48714", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.1753737926483154, "creation_date": "2023-07-11T15:18:06Z", "issue_submitter": "fanantoxa", "body": "Steps to reproduce\nCurrently accepts_nested_attributes_for when it's trying to find existing records in relation it's hardcoded to take a look on id column.\nProblem is that id is not alway a primary key. In our case we have one of tables does not have id column at all but uses uuid is primary key.\nWe've set self.primary_key = 'uuid' but accepts_nested_attributes_for does not uses this value to use in matching existing records.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :comments, force: true, id: false do |t|\n    t.integer :uuid, primary_key: true\n    t.integer :post_id\n    t.string :name\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\n\n  accepts_nested_attributes_for :comments, allow_destroy: true\nend\n\nclass Comment < ActiveRecord::Base\n  self.primary_key = 'uuid'\n\n  belongs_to :post\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    post = Post.create!\n    post.comments << Comment.create!(name: 'wonderfull')\n\n    post.reload\n\n    assert_equal 1, post.comments.count\n    assert_equal 1, Comment.count\n    assert_equal post.id, Comment.first.post.id\n\n    update_posts_data = {\n      'id' => post.id,\n      'comments_attributes' => [\n        {\n          'uuid' => Comment.first.uuid,\n          'name' => 'Even Better'\n        },\n        {\n          'name' => 'Another comment'\n        }\n      ]\n    }\n\n    post.assign_attributes(update_posts_data)\n\n    post.save\n\n    post.reload\n    assert_equal 2, post.comments.count\n    assert_equal 2, Comment.count\n\n    assert_equal post.id, Comment.first.post.id\n    assert_equal post.id, Comment.last.post.id\n\n    assert_equal 'Even Better', Comment.first.name\n    assert_equal 'Another comment', Comment.last.name\n  end\nend\nExpected behavior\nExisting records are updated and new created.\nActual behavior\nIt always trying to create new records and hit violation on primary key:\nActiveRecord::RecordNotUnique: SQLite3::ConstraintException: UNIQUE constraint failed: comments.uuid\n\nSystem configuration\nRails version: 7.1.0.alpha\nBut present in any Rails version\nRuby version: 3.1.2\nBut present in any Ruby version", "number_of_comments": 9, "comment_authors": ["fanantoxa", "fatkodima", "fanantoxa", "nvasilevski", "fatkodima", "nvasilevski", "nvasilevski", "fatkodima", "nvasilevski"]},
{"title": "ActionCable subscriptions are never created because welcome event is not received", "link": "https://github.com/rails/rails/issues/48543", "labels": ["\n                actioncable\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2213308811187744, "creation_date": "2023-06-21T08:33:29Z", "issue_submitter": "Georgegriff", "body": "Steps to reproduce\nI apologise upfront that i've not been able to produce a reproduction case, it involves some network conditions which breaks actioncable's default usage\nWe've been working with some of our customers who have reported our application not working as expected. The area relies on Action Cable subscriptions. We have observed the following behaviour.\n\nWe Create ActionCable in js\nWe immediately add a subscriber\n\nconst consumer = ActionCable.createConsumer(\"wss://...\");\nconsumer.subscriptions.create(\n            ....\n);\n\nServer opens the connection and sends the welcome message (this is the rails code i've been looking at)\nWebsocket opens, but welcome event is never received.\n\nThe result is that subscriptions are never  reloaded - (internal actioncable code)(\n\n\nrails/actioncable/app/assets/javascripts/actioncable.esm.js\n\n\n         Line 253\n      in\n      e446ef8\n\n\n\n\n\n\n return this.subscriptions.reload(); \n\n\n\n\n) when welcome is received, which should have created the subscription.\nIt's possible the reason this doesn't come up more is due to some specific network conditions, but we have enough diagnostics gathered in our system to show that this is the issue, we have open websockets but no subscriptions are established.\nIt is possible to workaround this by creating the subscriptions in the onOpen handler of the websocket instead, but this is circumventing the design of action cable.\nIn our logging we have collected we have no observed any connection instability.\n\nThe logs are a combination of the action cable logs and some custom event handlers we have added to on message/open, to detect the issue.\n\n  [\n    \"[ActionCable]\",\n    \"Opening WebSocket, current state is null, subprotocols: actioncable-v1-json,actioncable-unsupported\",\n    1687331929209,\n    \"Wed, 21 Jun 2023 07:18:49 GMT\"\n  ],\n  [\n    \"[ActionCable]\",\n    \"ConnectionMonitor started. stale threshold = 6 s\",\n    1687331929210,\n    \"Wed, 21 Jun 2023 07:18:49 GMT\"\n  ],\n  [\n    \"[SUCCESS]\",\n    \"WebSocket onopen event\",\n    \"Wed, 21 Jun 2023 07:18:49 GMT\"\n  ],\n  [\n    \"[ActionCable]\",\n    \"WebSocket onopen event, using 'actioncable-v1-json' subprotocol\",\n    1687331929446,\n    \"Wed, 21 Jun 2023 07:18:49 GMT\"\n  ],\n   [\n    \"[WARN]\",\n    \"Welcome not received within 20s\",\n    \"Wed, 21 Jun 2023 07:19:09 GMT\"\n  ]\n\n(These are extracted from logs where we have put a work around in place, but we have alerting to detect if the welcome event was never received)\nIt's a different library but its possible that something like this might describe the issue? I'd just be guessing though\n\nExpected behavior\nActionCable subscriptions should be initialised once the websocket has opened. The welcome should not be \"lost\"\nActual behavior\nSubscriptions never establish, websocket just is left open doing nothing.\nSystem configuration\nRails version:\n6.1.7.2\nLooks like the logic that linked is broadly the same for actioncable in the version im using.\nRuby version:\n3.1.3\nAction cable NPM version:\n\"@rails/actioncable\": \"^7.0.4-3\",", "number_of_comments": 1, "comment_authors": ["Georgegriff"]},
{"title": "unscope on through associations fails to respect default scope of join models", "link": "https://github.com/rails/rails/issues/48548", "labels": ["\n                attached PR\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2166666984558105, "creation_date": "2023-06-21T16:24:31Z", "issue_submitter": "philip-maina", "body": "Steps to reproduce\nReproduction script:\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :users, force: true do |t|\n  end\n\n  create_table :posts, force: true do |t|\n    t.integer :user_id\n    t.datetime :deleted_at\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n    t.datetime :deleted_at\n  end\nend\n\nclass User < ActiveRecord::Base\n  has_many :posts\n  has_many :comments, through: :posts\nend\n\nclass Post < ActiveRecord::Base\n  default_scope -> { where deleted_at: nil }\n\n  belongs_to :user\n  has_many :comments, -> { with_deleted }\nend\n\nclass Comment < ActiveRecord::Base\n  default_scope -> { where deleted_at: nil }\n  scope :with_deleted, -> { unscope where: :deleted_at }\n\n  belongs_to :post\nend\n\nclass BugTest < Minitest::Test\n  def test_unscope_applied_on_correct_association\n    user = User.create!\n\n    active_post  = Post.create!(user: user)\n    deleted_post = Post.create!(user: user, deleted_at: Time.now)\n\n\n    active_post_active_comment   = Comment.create!(post: active_post)\n    active_post_deleted_comment  = Comment.create!(post: active_post, deleted_at: Time.now)\n    deleted_post_deleted_comment = Comment.create!(post: deleted_post, deleted_at: Time.now)\n\n    # Should find only 2 comments (active_post_active_comment & active_post_deleted_comment) but finds all three\n    assert_equal 2, user.comments.count\n  end\nend\nExpected behavior\nThe test should pass and return a count of 2\nActual behavior\nThe test fails with a count of 3\nSystem configuration\nRails version: 7.0.4.3 / main\nRuby version: 3.1.3 / 3.2.2", "number_of_comments": 1, "comment_authors": ["philip-maina"]},
{"title": "Should ActionDispatch::Executor be moved higher up the middleware stack?", "link": "https://github.com/rails/rails/issues/48528", "labels": [], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9583308696746826, "creation_date": "2023-06-20T03:38:25Z", "issue_submitter": "KJTsanaktsidis", "body": "Steps to reproduce\nCurrently, the ActionDispatch::HostAuthorization and ActionDispatch::Static middlewares, amongst others, are ordered before ActionDispatch::Executor. Let's say we want to include a custom middleware to instrument requests. This middleware should go before HostAuthorization and Static, because we want to instrument requests which fail host authorization or hit static files; on the other hand, they should go after Executor because the threading and code execution rails guide says that user code should be wrapped in an Executor.\nI suspect this might cause problems with the autoloader not working on such middleware, but actually there is another practical problem with including the instrumentation before Executor. If the instrumentation middleware wants to use a ActiveSupport::CurrentAttributes class, the values stored in there are cleared when the executor middleware calls the run callbacks.\nExpected behavior\nI believe the Executor middleware should come first, perhaps? The only reason I can think of not to do this is an efficiency concern of booting up the executor unnecessarily for serving static files without user code intervention.\n\nIs there any reason I shouldn't re-order this middleware in my own app?\nWould this be something that should be changed in Rails by default?\n\nActual behavior\nAny values stored in ActiveSupport::CurrentAttributes in middlewares before Executor are cleared when Executor is run.", "number_of_comments": 8, "comment_authors": ["KJTsanaktsidis", "rafaelfranca", "byroot", "matthewd", "KJTsanaktsidis", "KJTsanaktsidis", "matthewd", "KJTsanaktsidis"]},
{"title": "Test Fixture Not Decrypting Properly with store_accessor", "link": "https://github.com/rails/rails/issues/48601", "labels": ["\n                activerecord\n", "\n                encryption\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2076160907745361, "creation_date": "2023-06-28T16:07:31Z", "issue_submitter": "donnfelker", "body": "Steps to reproduce\n\nCreate new rails app with postgresql as db\nAdd jsonb field to model via migration with name settings\nAdd store_accessor to model\nencrypt store_accessor field with encrypts\nAdd encryption keys to envs as per docs\nAdd config.active_record.encryption.encrypt_fixtures = true to test.rb\nAdd data to test fixture (posts.yml) with the field that needs to be encrypted\nWrite test to obtain test fixture and ensure it is being encrypted/decrypted properly\nTest fails with Minitest::UnexpectedError: ActiveRecord::Encryption::Errors::Decryption: ActiveRecord::Encryption::Errors::Decryption\n\nExecutable Test Case\nYou will also need a value in the posts.yml file as such:\none:\n  name: Hello World\n  settings:\n    public_key: \"some-fake-public-key\"\nTest Case\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"~> 7.0.0\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"postgresql\", database: \"jsonb-test\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\nActiveRecord::Encryption.configure \\\n      primary_key: \"nYlllafgBdhQ7Vn37dlWAoqfDbTPl4Fl\",\n      deterministic_key: \"CK7x2oUEeu06bKehhKGiKYAHoytPaOPg\",\n      key_derivation_salt: \"Fol1dR03ZXnL8k4hEUYj7IMr0UlgOMHC\"\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.jsonb :settings\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\n\n  store_accessor :settings, [:public_key], suffix: :setting\n  encrypts :settings\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    post = posts(:one)\n    assert_equal \"some-fake-public-key\", post.public_key_setting\n  end\nend\nExpected behavior\nThe test should be able to store the value for the fixture, encrypted and then it should be able to retrieve it and decrypt it.\nActual behavior\nTest fails with error: Minitest::UnexpectedError: ActiveRecord::Encryption::Errors::Decryption: ActiveRecord::Encryption::Errors::Decryption\nSystem configuration\nRails version: 7.0.5.1\nRuby version: 3.2.2", "number_of_comments": 3, "comment_authors": ["donnfelker", "donnfelker", "donnfelker"]},
{"title": "Calling model.decrypt saves the unencrypted entity, which breaks further access to it", "link": "https://github.com/rails/rails/issues/48721", "labels": ["\n                activerecord\n", "\n                encryption\n"], "depth": 2, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.5217320919036865, "creation_date": "2023-07-12T15:25:26Z", "issue_submitter": "dsusviela", "body": "Steps to reproduce\n\nCreate a model with AR encryption on one of the fields\nMake sure the chosen field has deterministic encryption\nGo into the rails console\nCreate an entity of this model, and save it\nCall #decrypt\nDo Model.find(:id).inspect\nYou should get an error\n\nAny interaction with this record will result in errors\nExecutable use case:\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem 'rails'\n  gem \"sqlite3\"\n  gem \"pry\"\n  gem \"byebug\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Encryption.configure(\n  primary_key: SecureRandom.alphanumeric(32),\n  deterministic_key: SecureRandom.alphanumeric(32),\n  key_derivation_salt: SecureRandom.alphanumeric(32),\n  extend_queries: true,\n  )\n\nActiveRecord::Schema.define do\n  create_table :users, force: :true do |t|\n    t.string :secret\n  end\nend\n\nclass User < ActiveRecord::Base\n  encrypts :secret, deterministic: true\nend\n\nclass BugTest < Minitest::Test\n  def test_decrypt_breaks_access_to_model\n    model = User.create(secret: \"my_test_string\")\n    id = model.id\n    model.decrypt\n\n    assert_raises(ActiveRecord::Encryption::Errors::Decryption) do\n      User.find(id).inspect\n    end\n  end\nend\nExpected behavior\nI can still interact with the entity, at the very least I should be able to recover it\nActual behavior\nAny method calls on this record yield in the after mentioned exception\nMy 2 cents\nI found this behavior when playing around with some records, and called decrypt on some of them because I was playing around. My issue is probably the intended behavior (that the record gets updated) and I understand that we get an exception since the record is not in the expected json string format anymore. However I think that we can improve the experience with any of:\n\nImproving the documentation; adding a warning that this will result in an update of your record\nChanging the implementation so that the ActiveRecord::Encryption::NullEncryptor.new returns a string with a single string\n\nI'm okay with providing any solution that it may be okay\nSystem configuration\nRails version: 7.0.6\nRuby version: 3.2.2", "number_of_comments": 4, "comment_authors": ["dsusviela", "abhisheksarka", "dsusviela", "abhisheksarka"]},
{"title": "Suggested CSP nonce generator doesn't work the first time a page is loaded", "link": "https://github.com/rails/rails/issues/48463", "labels": ["\n                actionpack\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.978130578994751, "creation_date": "2023-06-13T20:24:17Z", "issue_submitter": "olbrich", "body": "rails/actiontext/test/dummy/config/initializers/content_security_policy.rb\n\n\n         Line 20\n      in\n      d12f1a2\n\n\n\n\n\n\n #   config.content_security_policy_nonce_generator = ->(request) { request.session.id.to_s } \n\n\n\n\n\nIf a cookie containing the session ID doesn't exist when this suggested nonce generator is executed (usually the first time a page is loaded), then the generated nonce will be blank. This causes problems with turbo frames since the nonce won't be the same on the next request, causing any nonced JS to fail since it won't match the nonce on the page.\nSince sessions are lazily initialized, there is no guarantee that the session exists at the time the nonce generator is called. If the session is not yet initialized, referring to its id returns nil.\nAn alternative would be something like\nconfig.content_security_policy_nonce_generator = ->(request) { request.session[:nonce] ||= SecureRandom.hex }\n\nThis will force the session cookie to be set earlier in the request cycle and will populate it with a random number instead of using the session id.", "number_of_comments": 5, "comment_authors": ["olbrich", "ghiculescu", "olbrich", "olbrich", "ghiculescu"]},
{"title": "Replacing an association removes entries even when the parent doesn't pass validations", "link": "https://github.com/rails/rails/issues/48469", "labels": ["\n                activerecord\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9868273735046387, "creation_date": "2023-06-14T09:13:46Z", "issue_submitter": "Earlopain", "body": "I've been investigating an issue in my app where an association doesn't correctly undo changes when the parent fails validation. This seems to be the case because I'm directly setting the association which then updates to the database before even calling save.\nAdding to the association is not possible, however removing from the association goes through. Please see the attached reproduction script, that should hopefully make it a bit more clear what I'm talking about.\nEdit: Initially I thought it had something to do with autosave: true but it's reproducable without that as well.\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.text :title\n  end\n\n  create_table :groups, force: true do |t|\n    t.integer :post_id\n    t.text :text\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :groups\n\n  attr_accessor :fail_validation\n\n  validate :always_fail, if: :fail_validation\n\n  def always_fail\n    errors.add(:base, \"Fail\")\n  end\n\n  def group_string\n    groups.map { |a| a.text }.sort.join(\" \")\n  end\n\n  def group_string=(string)\n    self.groups = string.split(\" \").map do |group|\n      self.groups.find_or_initialize_by(text: group)\n    end\n  end\nend\n\nclass Group < ActiveRecord::Base\n  belongs_to :post\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    post = Post.create!(title: \"Hello!\")\n    post.group_string = \"1 2\"\n    post.save\n\n    assert_equal(\"1 2\", post.group_string)\n    assert_equal(\"Hello!\", post.title)\n\n    post.fail_validation = true\n\n    post.group_string = \"1 2 3\"\n    post.title = \"Goodbye!\"\n    post.save\n\n    post.reload\n    assert_equal(\"Hello!\", post.title, \"Title got changed despite failed validation\")\n    assert_equal(\"1 2\", post.group_string, \"Group '3' got added despite failed validation\")\n\n    post.fail_validation = true\n\n    post.group_string = \"1\"\n    post.title = \"Goodbye!\"\n    post.save\n\n    post.reload\n    assert_equal(\"Hello!\", post.title, \"Title got changed despite failed validation\")\n    assert_equal(\"1 2\", post.group_string, \"Group '2' got removed despite failed validation\")\n  end\nend\nExpected behavior\nBoth adding and removing associations should fail if the parent fails validation.\nActual behavior\nOnly added associations fail, removing is possible.\nSystem configuration\nRails version: master\nRuby version: 3.2.2", "number_of_comments": 5, "comment_authors": ["Earlopain", "adrianna-chang-shopify", "Earlopain", "adrianna-chang-shopify", "Earlopain"]},
{"title": "Rails should have lib/generators in autoload path.", "link": "https://github.com/rails/rails/issues/48459", "labels": [], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0079057216644287, "creation_date": "2023-06-12T18:43:33Z", "issue_submitter": "bradgessler", "body": "I believe Rails should have the following default configuration to fix the issue below:\n config.autoload_paths << \"#{root}/lib/generators\"\nSteps to reproduce\n\nCreate a new Rails app: rails new fizz\nRun rails g generators Buzz::Install\nRun rails g\n\nExpected behavior\nI should see the generator task `buzz:install' under the \"Buzz\" section.\nActual behavior\nI don't see the generator task\nSystem configuration\nRails version: 7.0.4.3\nRuby version: 3.2.x", "number_of_comments": 2, "comment_authors": ["bradgessler", "skipkayhil"]},
{"title": "Virtual stored columns should return new values on update", "link": "https://github.com/rails/rails/issues/48423", "labels": ["\n                activerecord\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9674108028411865, "creation_date": "2023-06-08T14:02:05Z", "issue_submitter": "abaldwin88", "body": "Follow-up from #45736\nSame idea except this issue reflects the behavior on update rather than on create\nSteps to reproduce\nGenerate a model with a virtual stored column. Using Postgres as the database update a record and check the ActiveRecord attribute of the virtual stored column. It will not have the newly computed value from the database.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem 'pg', '~> 1.4'\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection \"postgresql:///test\"\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.integer :counter1, null: false, default: 7\n    t.integer :counter2, null: false, default: 7\n    t.virtual :counter_sum, type: :integer, as: \"counter1 + counter2\", stored: true\n  end\nend\n\nclass Post < ActiveRecord::Base\nend\n\nclass BugTest < Minitest::Test\n  def test_virtual_column_value_updated\n    post = Post.create!\n    post.update!(counter1: 2, counter2: 2)\n\n    assert_equal 4, post.counter_sum\n  end\nend\nFailure:\nBugTest#test_virtual_column_value_updated [test.rb:38]:\nExpected: 4\n  Actual: 14\n\nExpected behavior\nThe SQL UPDATE statement sent to the database should include a RETURNING clause. ActiveRecord will then update the instance attributes on save with the returned values. The behavior should match between create and update.\nActual behavior\nThe attribute's value from when the record was last read or inserted is reflected instead.\nSystem configuration\nRails version: edge\nRuby version: 3.2.1\nPostgreSQL version: 14.7", "number_of_comments": 2, "comment_authors": ["abaldwin88", "abaldwin88"]},
{"title": "Type of keys returned by grouped count inconsistent after 7.0.5", "link": "https://github.com/rails/rails/issues/48420", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9894053936004639, "creation_date": "2023-06-08T09:36:12Z", "issue_submitter": "thefloweringash", "body": "Steps to reproduce\n(Also available as a gist with docker-compose configuration).\n# frozen_string_literal: true\n#\n# Requires a postgres database, for example\n#\n#     createdb group_by_test\n#     DATABASE_URL=postgres://localhost/group-by-test ruby ./group-by-test.rb\n#\n# Also supports checking other Rails versions via the RAILS_VERSION\n# environment variable. For example:\n#\n#     createdb group_by_test\n#     RAILS_VERSION=7.0.4.3 DATABASE_URL=postgres://localhost/group-by-test ruby ./group-by-test.rb\n\nbegin\n  require \"bundler/inline\"\nrescue LoadError => e\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\n  raise e\nend\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  if (rails_version = ENV['RAILS_VERSION'])\n    gem \"rails\", rails_version\n  else\n    gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  end\n\n  gem \"pg\"\n\n  gem 'timeout', '=0.3.2' # workaround for bundler/inline\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\nActiveRecord::Base.establish_connection\n# ActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :bookings, force: true\nend\n\nclass Booking < ActiveRecord::Base\nend\n\nclass BugTest < Minitest::Test\n  def setup\n    Booking.create!\n  end\n\n  def teardown\n    Booking.delete_all\n  end\n\n  def test_group_by\n    grouped_count =\n      Booking\n        .group(\"tsrange(timestamp '2020-01-01', timestamp '2020-01-02', '[)') \")\n        .count(:id)\n\n    assert_equal Range, grouped_count.keys.first.class # passes\n  end\n\n  def test_group_by_join\n    grouped_count =\n      Booking\n        .joins(\"JOIN (SELECT tsrange(timestamp '2020-01-01', timestamp '2020-01-02', '[)') AS range) ranges ON TRUE\")\n        .group('ranges.range')\n        .count(:id)\n\n    assert_equal Range, grouped_count.keys.first.class # fails\n  end\nend\nExpected behavior\nIdeally the type of the keys would be inferred based on the actual data and be converted to Ruby Ranges.\nActual behavior\nThe type of the keys is String.\nSystem configuration\nRails version: 7.0.5\nRuby version: 3.2\n\nThe keys returned from a .group(...).count(...) have inconsistent type handling. In my case, I'm using a time range expression. If the expression is directly specified in the .group(...) call, the return type is Range, as expected. If the expression comes through a join, then the return type is String. On Rails 7.0.4.3, both of these returned Range keys.\nMore verbosely:\n# This produces a hash with Range keys on current master\nBooking\n  .group(\"tsrange(timestamp '2020-01-01', timestamp '2020-01-02', '[)') \")\n  .count(:id)\n\n# This produces a hash with String keys on current master\nBooking\n  .joins(\"JOIN (SELECT tsrange(timestamp '2020-01-01', timestamp '2020-01-02', '[)') AS range) ranges ON TRUE\")\n  .group('ranges.range')\n  .count(:id)\nObviously these are reduced examples to show the bug. In the actual code the joined values come from a postgres generate_series call.\nPossibly related change: #46923\n\nIf I were to speculate, prior to #46923 the case where rails does not know anything about the column would fall through to the type of the returned data. After the change the unknown column's default \"Value\" type is used instead.\nBreaking on the expression in execute_grouped_calculation\n        key_types = group_columns.each_with_object({}) do |(aliaz, col_name), types|\n          types[aliaz] = col_name.try(:type_caster) ||\n            type_for(col_name) do\n              calculated_data.column_types.fetch(aliaz, Type.default_value)\n            end\n        end\nI can see that\ncol_name.try(:type_caster)\n => #<ActiveModel::Type::Value:0x00000001291ff4a8 @precision=nil, @scale=nil, @limit=nil>\n\ntype_for(col_name) do\n  calculated_data.column_types.fetch(aliaz, Type.default_value)\nend\n => #<ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Range:0x00000001295f9ba8 @subtype=#<ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Timestamp:0x0000000128ef68b0 @precision=nil, @scale=nil, @limit=nil>, @type=:tsrange>\n\nThe latter is more useful in this case.\nI also observed that if the alias of the joined subquery matches the name of an existing table, it will use type information from that table, even if it's unrelated to the current query. This could lead to some surprising results.", "number_of_comments": 4, "comment_authors": ["thefloweringash", "skipkayhil", "leboshi", "leboshi"]},
{"title": "Unexpected relation call after using reload method", "link": "https://github.com/rails/rails/issues/48441", "labels": ["\n                activerecord\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.987541913986206, "creation_date": "2023-06-10T19:42:36Z", "issue_submitter": "SzymonJoszko", "body": "Steps to reproduce\nClasses:\nclass AObject < ApplicationRecord\n    has_many :b_objects\n    has_one :c_object, -> (obj) { puts \"called form has_one :c_object\\n#{obj.inspect}\" }, class_name: 'CObject', foreign_key: :id, primary_key: :c_object_id\n    # Gives the same resul as above\n    # belongs_to :c_object, -> (obj) { puts \"called form belongs_to :c_object\\n#{obj.inspect}\" }\nend\n\nclass BObject < ApplicationRecord\n    belongs_to :a_object, touch: true, inverse_of: :b_objects\n    has_one :c_object, through: :a_object\nend\n\nclass CObject < ApplicationRecord\n    has_many :a_objects\n    has_many :b_objects, through: :a_objects, source: :b_objects\nend\n\nExecute following commands in rails console\nb = BObject.find(1)\n\n# If we use reload method without caling any relation before, it works as expected, no relation called.\n b.reload\n\n# But if we call the relation and then we call reload method, unexpected relations are called.\n# Additionaly argument of scope of relation (obj) is nil instead of instance of BObject class.\n b.c_object\n# We see:\n# called form has_one :c_object\n#<BObject>\n\n b.reload\n# We see:\n# called form has_one :c_object\n# nil\n# called form has_one :c_object\n#<AObject>\n\nExpected behavior\nAfter calling b.reload, no relation should be called.\nActual behavior\nAfter calling b.reload, unexpected relations are called, and the argument of the relation's scope (obj) is nil instead of an instance of the BObject class.\nSystem configuration\nRails version: 7.0.5\nRuby version: 3.1.0\nApplication configuration:\nconfig.active_record.strict_loading_by_default = true\nconfig.active_record.action_on_strict_loading_violation = :log\nLink to demo\nhttps://github.com/SzymonJoszko/strict_loading_problem_demo", "number_of_comments": 1, "comment_authors": ["SzymonJoszko"]},
{"title": "ActiveRecord sends instrumentations to the wrong notifier", "link": "https://github.com/rails/rails/issues/48422", "labels": [], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0088648796081543, "creation_date": "2023-06-08T12:01:28Z", "issue_submitter": "sled", "body": "Steps to reproduce\nWhen ActiveSupport::Notifications.notifier is replaced, ActiveRecord sends instrumentations to the old notifier. The notifier is often replaced in tests, like here in the ActiveSupport::LogSubscriber::TestHelper:\n\n\n\nrails/activesupport/lib/active_support/log_subscriber/test_helper.rb\n\n\n        Lines 44 to 46\n      in\n      e37adfe\n\n\n\n\n\n\n @old_notifier = ActiveSupport::Notifications.notifier \n\n\n\n set_logger(@logger) \n\n\n\n ActiveSupport::Notifications.notifier = @notifier \n\n\n\n\n\nThe instrumenter seems to be cached in an instance variable inside ActiveRecord::ConnectionAdapters::AbstractAdapter here:\n\n\n\nrails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb\n\n\n         Line 156\n      in\n      7d4c88d\n\n\n\n\n\n\n @instrumenter = ActiveSupport::Notifications.instrumenter \n\n\n\n\n\nand the instrumenter itself is directly bound to the notifier here:\n\n\n\nrails/activesupport/lib/active_support/notifications.rb\n\n\n        Lines 268 to 270\n      in\n      e3c73fd\n\n\n\n\n\n\n def instrumenter \n\n\n\n registry[notifier] ||= Instrumenter.new(notifier) \n\n\n\n end \n\n\n\n\n\nthis meands that the SQL log events are sent to the old instrumenter, and thus the old notifier here:\n\n\n\nrails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb\n\n\n        Lines 1128 to 1142\n      in\n      7d4c88d\n\n\n\n\n\n\n def log(sql, name = \"SQL\", binds = [], type_casted_binds = [], statement_name = nil, async: false, &block) # :doc: \n\n\n\n @instrumenter.instrument( \n\n\n\n \"sql.active_record\", \n\n\n\n sql:               sql, \n\n\n\n name:              name, \n\n\n\n binds:             binds, \n\n\n\n type_casted_binds: type_casted_binds, \n\n\n\n statement_name:    statement_name, \n\n\n\n async:             async, \n\n\n\n connection:        self, \n\n\n\n     &block \n\n\n\n ) \n\n\n\n rescue ActiveRecord::StatementInvalid => ex \n\n\n\n raise ex.set_query(sql, binds) \n\n\n\n end \n\n\n\n\n\nHere's a simple script to reproduce the behaviour:\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\nend\n\nclass Post < ActiveRecord::Base\nend\n\nclass DummySubscriber < ActiveSupport::LogSubscriber\n  def sql(event)\n    info('DummySubscriber Received SQL event')\n  end\n\n  def logger\n    ActiveRecord::Base.logger\n  end\nend\n\nclass BugTest < Minitest::Test\n  # This test fails, the SQL events are sent to the old notifier after replacing. The DummySubscribers'\n  # sql() event handler never gets called.\n  def test_with_replaced_notifier\n    old_notifier = ActiveSupport::Notifications.notifier\n    old_logger   = ActiveRecord::Base.logger\n\n    notifier = ActiveSupport::Notifications::Fanout.new\n    ActiveSupport::Notifications.notifier = notifier\n\n    io = StringIO.new\n    logger = Logger.new(io)\n    ActiveRecord::Base.logger = logger\n    DummySubscriber.attach_to :active_record\n\n    Post.where(id: 42).count\n    notifier.wait\n\n    assert_match /DummySubscriber/, io.string\n  ensure\n    DummySubscriber.detach_from(:active_record)\n    ActiveSupport::Notifications.notifier = old_notifier\n    ActiveRecord::Base.logger = old_logger\n  end\n\n  # This test works, because the notifier is not replaced\n  def test_with_original_notifier\n    old_logger = ActiveRecord::Base.logger\n\n    io = StringIO.new\n    logger = Logger.new(io)\n    ActiveRecord::Base.logger = logger\n    DummySubscriber.attach_to :active_record\n\n    Post.where(id: 42).count\n    assert_match /DummySubscriber/, io.string\n  ensure\n    DummySubscriber.detach_from(:active_record)\n    ActiveRecord::Base.logger = old_logger\n  end\nend\nExpected behavior\nI'd expect the SQL events being sent to the notifier set in ActiveSupport::Notifications.notifier\nActual behavior\nActiveRecord keeps sending SQL events to the old notifier.\nSystem configuration\nRails version: 6.1.7.3 / edge\nRuby version: 2.7.8 / 3.2.1", "number_of_comments": 1, "comment_authors": ["sled"]},
{"title": "Test suite hangs after upgrading from 6.1 to 7.0", "link": "https://github.com/rails/rails/issues/48468", "labels": ["\n                more-information-needed\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0173983573913574, "creation_date": "2023-06-14T08:26:54Z", "issue_submitter": "krebbl", "body": "Steps to reproduce\nWe have a project with a multi-database (2 databases) configuration.\nWhen executing the test suite like follows the tests hang after some time.\nPARALLEL_WORKERS=1 bin/rails test\nAs you can see in the sigdump all threads get stuck in load_interlock_aware_monitor.rb:17:in 'enter' \nI am currently trying to create an example project to reproduce this issue but maybe this info is enough for now to make some conclusions.\nSigdump at 2023-06-14 10:11:32 +0200 process 90089 (bin/rails)\n  Thread #<Thread:0x00000001023db0f0 run> status=run priority=0\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:52:in `backtrace'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:52:in `dump_backtrace'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:34:in `block in dump_all_thread_backtrace'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:33:in `each'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:33:in `dump_all_thread_backtrace'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:16:in `block in dump'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:136:in `open'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:136:in `_open_dump_path'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:14:in `dump'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/sigdump-0.2.4/lib/sigdump.rb:7:in `block in setup'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `enter'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `block in mon_enter'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/share_lock.rb:187:in `yield_shares'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/dependencies/interlock.rb:41:in `permit_concurrent_loads'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `mon_enter'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:22:in `block in synchronize'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `handle_interrupt'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `synchronize'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:91:in `clear_query_cache'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_handling.rb:343:in `block in clear_on_handler'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_handling.rb:342:in `each'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_handling.rb:342:in `clear_on_handler'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_handling.rb:272:in `clear_query_caches_for_current_thread'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:21:in `insert'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/persistence.rb:496:in `_insert_record'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/persistence.rb:1096:in `_create_record'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/counter_cache.rb:166:in `_create_record'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/locking/optimistic.rb:79:in `_create_record'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/attribute_methods/dirty.rb:222:in `_create_record'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/callbacks.rb:459:in `block in _create_record'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:107:in `run_callbacks'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:929:in `_run_create_callbacks'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/callbacks.rb:459:in `_create_record'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/timestamp.rb:108:in `_create_record'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/bullet-7.0.7/lib/bullet/active_record70.rb:6:in `_create_record'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/persistence.rb:1067:in `create_or_update'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/callbacks.rb:455:in `block in create_or_update'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:118:in `block in run_callbacks'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/autosave_association.rb:370:in `around_save_collection_association'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:127:in `block in run_callbacks'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:138:in `run_callbacks'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:929:in `_run_save_callbacks'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/callbacks.rb:455:in `create_or_update'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/timestamp.rb:126:in `create_or_update'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/persistence.rb:648:in `save!'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/validations.rb:53:in `save!'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/transactions.rb:302:in `block in save!'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/transactions.rb:354:in `block in with_transaction_returning_status'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/transaction.rb:319:in `block in within_new_transaction'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:25:in `handle_interrupt'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:25:in `block in synchronize'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `handle_interrupt'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `synchronize'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/transaction.rb:317:in `within_new_transaction'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/database_statements.rb:316:in `transaction'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/transactions.rb:350:in `with_transaction_returning_status'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/transactions.rb:302:in `save!'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/suppressor.rb:54:in `save!'\n      /Users/krebbl/Projects/ProCarement/care-center/app/models/medical_report.rb:121:in `save_report_as_document'\n      /Users/krebbl/Projects/ProCarement/care-center/test/models/medical_report_test.rb:167:in `block (3 levels) in <class:MedicalReportTest>'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/testing/assertions.rb:34:in `assert_nothing_raised'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/testing/assertions.rb:250:in `_assert_nothing_raised_or_warn'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/testing/assertions.rb:102:in `assert_difference'\n      /Users/krebbl/Projects/ProCarement/care-center/test/models/medical_report_test.rb:165:in `block (2 levels) in <class:MedicalReportTest>'\n      /Users/krebbl/Projects/ProCarement/care-center/test/models/medical_report_test.rb:172:in `instance_exec'\n      /Users/krebbl/Projects/ProCarement/care-center/test/models/medical_report_test.rb:172:in `block in create_test_from_should_hash'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/test.rb:102:in `block (3 levels) in run'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/test.rb:199:in `capture_exceptions'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/test.rb:97:in `block (2 levels) in run'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:296:in `time_it'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/test.rb:96:in `block in run'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:391:in `on_signal'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/test.rb:247:in `with_info_handler'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/test.rb:95:in `run'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-reporters-1.4.3/lib/minitest/reporters.rb:48:in `run_with_hooks'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:1051:in `run_one_method'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:365:in `run_one_method'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:352:in `block (2 levels) in run'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:351:in `each'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:351:in `block in run'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:391:in `on_signal'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:378:in `with_info_handler'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:350:in `run'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/railties-7.0.5/lib/rails/test_unit/line_filtering.rb:10:in `run'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:182:in `block in __run'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:182:in `map'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:182:in `__run'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:159:in `run'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest.rb:83:in `block in autorun'\n  Thread #<Thread:0x0000000109047888 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb:40 sleep> status=sleep priority=0\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb:46:in `sleep'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/connection_pool/reaper.rb:46:in `block in spawn_thread'\n  Thread #<Thread:0x0000000109443018@Timeout stdlib thread /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/timeout-0.3.2/lib/timeout.rb:101 sleep> status=sleep priority=0\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/timeout-0.3.2/lib/timeout.rb:113:in `sleep'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/timeout-0.3.2/lib/timeout.rb:113:in `wait'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/timeout-0.3.2/lib/timeout.rb:113:in `block (2 levels) in create_timeout_thread'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/timeout-0.3.2/lib/timeout.rb:111:in `synchronize'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/timeout-0.3.2/lib/timeout.rb:111:in `block in create_timeout_thread'\n  Thread #<Thread:0x000000010c94b918 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:28 sleep_forever> status=sleep priority=0\n      <internal:thread_sync>:18:in `pop'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:30:in `block (2 levels) in start'\n  Thread #<Thread:0x000000010c94b800 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:28 sleep_forever> status=sleep priority=0\n      <internal:thread_sync>:18:in `pop'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:30:in `block (2 levels) in start'\n  Thread #<Thread:0x000000010c94b710 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:28 sleep_forever> status=sleep priority=0\n      <internal:thread_sync>:18:in `pop'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:30:in `block (2 levels) in start'\n  Thread #<Thread:0x000000010c94b620 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:28 sleep_forever> status=sleep priority=0\n      <internal:thread_sync>:18:in `pop'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:30:in `block (2 levels) in start'\n  Thread #<Thread:0x000000010c94b530 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:28 sleep_forever> status=sleep priority=0\n      <internal:thread_sync>:18:in `pop'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:30:in `block (2 levels) in start'\n  Thread #<Thread:0x000000010c94b440 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:28 sleep_forever> status=sleep priority=0\n      <internal:thread_sync>:18:in `pop'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:30:in `block (2 levels) in start'\n  Thread #<Thread:0x000000010c94b350 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:28 sleep_forever> status=sleep priority=0\n      <internal:thread_sync>:18:in `pop'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:30:in `block (2 levels) in start'\n  Thread #<Thread:0x000000010c94b260 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:28 sleep_forever> status=sleep priority=0\n      <internal:thread_sync>:18:in `pop'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/minitest-5.18.0/lib/minitest/parallel.rb:30:in `block (2 levels) in start'\n  Thread #<Thread:0x000000010ce4f180@worker-1 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:332 sleep_forever> status=sleep priority=0\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `enter'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `block in mon_enter'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/share_lock.rb:187:in `yield_shares'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/dependencies/interlock.rb:41:in `permit_concurrent_loads'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `mon_enter'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:22:in `block in synchronize'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `handle_interrupt'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `synchronize'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:128:in `cache_sql'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:107:in `select_all'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/querying.rb:54:in `_query_by_sql'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:942:in `block in exec_main_query'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:962:in `skip_query_cache_if_necessary'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:928:in `exec_main_query'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:914:in `block in exec_queries'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:962:in `skip_query_cache_if_necessary'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:908:in `exec_queries'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:695:in `load'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:250:in `records'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/bullet-7.0.7/lib/bullet/active_record70.rb:46:in `records'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:520:in `find_take'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:98:in `take'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:473:in `find_one'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:457:in `find_with_ids'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:69:in `find'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/querying.rb:22:in `find'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/core.rb:271:in `find'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:129:in `locate'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:154:in `block in locate'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:164:in `block in unscoped'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:881:in `_scoping'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:428:in `scoping'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/scoping/default.rb:43:in `unscoped'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:164:in `unscoped'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:154:in `locate'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:16:in `locate'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:148:in `deserialize_global_id'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:132:in `deserialize_argument'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:43:in `block in deserialize'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:43:in `map'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:43:in `deserialize'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/core.rb:190:in `deserialize_arguments'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/core.rb:180:in `deserialize_arguments_if_needed'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/execution.rb:44:in `perform_now'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/instrumentation.rb:14:in `block in perform_now'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/instrumentation.rb:25:in `block in instrument'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/notifications.rb:206:in `block in instrument'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/notifications/instrumenter.rb:24:in `instrument'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/notifications.rb:206:in `instrument'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/instrumentation.rb:35:in `instrument'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/instrumentation.rb:14:in `perform_now'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/logging.rb:18:in `block in perform_now'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/tagged_logging.rb:99:in `block in tagged'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/tagged_logging.rb:37:in `tagged'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/tagged_logging.rb:99:in `tagged'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/logging.rb:25:in `tag_logger'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/logging.rb:18:in `perform_now'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/execution.rb:24:in `block in execute'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:118:in `block in run_callbacks'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/railtie.rb:54:in `block (4 levels) in <class:Railtie>'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/execution_wrapper.rb:92:in `wrap'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/reloader.rb:72:in `block in wrap'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/execution_wrapper.rb:92:in `wrap'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/reloader.rb:71:in `wrap'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/railtie.rb:53:in `block (3 levels) in <class:Railtie>'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:127:in `instance_exec'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:127:in `block in run_callbacks'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:138:in `run_callbacks'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/execution.rb:22:in `execute'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/queue_adapters/async_adapter.rb:70:in `perform'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:352:in `run_task'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:343:in `block (3 levels) in create_worker'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:334:in `loop'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:334:in `block (2 levels) in create_worker'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:333:in `catch'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:333:in `block in create_worker'\n  Thread #<Thread:0x000000010d989d20@worker-2 /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:332 sleep_forever> status=sleep priority=0\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `enter'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `block in mon_enter'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/share_lock.rb:187:in `yield_shares'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/dependencies/interlock.rb:41:in `permit_concurrent_loads'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:17:in `mon_enter'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:22:in `block in synchronize'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `handle_interrupt'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `synchronize'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:128:in `cache_sql'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/connection_adapters/abstract/query_cache.rb:107:in `select_all'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/querying.rb:54:in `_query_by_sql'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:942:in `block in exec_main_query'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:962:in `skip_query_cache_if_necessary'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:928:in `exec_main_query'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:914:in `block in exec_queries'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:962:in `skip_query_cache_if_necessary'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:908:in `exec_queries'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:695:in `load'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:250:in `records'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/bullet-7.0.7/lib/bullet/active_record70.rb:46:in `records'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:520:in `find_take'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:98:in `take'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:473:in `find_one'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:457:in `find_with_ids'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation/finder_methods.rb:69:in `find'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/querying.rb:22:in `find'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/core.rb:271:in `find'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:129:in `locate'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:154:in `block in locate'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:164:in `block in unscoped'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:881:in `_scoping'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/relation.rb:428:in `scoping'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activerecord-7.0.5/lib/active_record/scoping/default.rb:43:in `unscoped'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:164:in `unscoped'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:154:in `locate'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/globalid-1.1.0/lib/global_id/locator.rb:16:in `locate'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:148:in `deserialize_global_id'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:132:in `deserialize_argument'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:43:in `block in deserialize'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:43:in `map'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/arguments.rb:43:in `deserialize'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/core.rb:190:in `deserialize_arguments'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/core.rb:180:in `deserialize_arguments_if_needed'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/execution.rb:44:in `perform_now'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/instrumentation.rb:14:in `block in perform_now'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/instrumentation.rb:25:in `block in instrument'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/notifications.rb:206:in `block in instrument'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/notifications/instrumenter.rb:24:in `instrument'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/notifications.rb:206:in `instrument'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/instrumentation.rb:35:in `instrument'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/instrumentation.rb:14:in `perform_now'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/logging.rb:18:in `block in perform_now'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/tagged_logging.rb:99:in `block in tagged'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/tagged_logging.rb:37:in `tagged'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/tagged_logging.rb:99:in `tagged'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/logging.rb:25:in `tag_logger'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/logging.rb:18:in `perform_now'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/execution.rb:24:in `block in execute'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:118:in `block in run_callbacks'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/railtie.rb:54:in `block (4 levels) in <class:Railtie>'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/execution_wrapper.rb:92:in `wrap'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/reloader.rb:72:in `block in wrap'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/execution_wrapper.rb:92:in `wrap'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/reloader.rb:71:in `wrap'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/railtie.rb:53:in `block (3 levels) in <class:Railtie>'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:127:in `instance_exec'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:127:in `block in run_callbacks'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activesupport-7.0.5/lib/active_support/callbacks.rb:138:in `run_callbacks'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/execution.rb:22:in `execute'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/activejob-7.0.5/lib/active_job/queue_adapters/async_adapter.rb:70:in `perform'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:352:in `run_task'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:343:in `block (3 levels) in create_worker'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:334:in `loop'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:334:in `block (2 levels) in create_worker'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:333:in `catch'\n      /Users/krebbl/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/concurrent-ruby-1.2.2/lib/concurrent-ruby/concurrent/executor/ruby_thread_pool_executor.rb:333:in `block in create_worker'\n\n\nExpected behavior\nThe tests should just run through\nActual behavior\nThe tests get stuck after some while\nSystem configuration\nRails version: 7.0.5\nRuby version: 3.2.0", "number_of_comments": 13, "comment_authors": ["krebbl", "eileencodes", "krebbl", "krebbl", "rafaelfranca", "krebbl", "rafaelfranca", "krebbl", "rafaelfranca", "krebbl", "rafaelfranca", "krebbl", "rafaelfranca"]},
{"title": "Additional Query incase of Uniqueness validation for Encrypted Attribute", "link": "https://github.com/rails/rails/issues/48445", "labels": ["\n                activerecord\n", "\n                encryption\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7390267848968506, "creation_date": "2023-06-11T10:21:49Z", "issue_submitter": "iamradioactive", "body": "Steps to reproduce\n\nSet Deterministic option to true for an Encrypted attribute\nAdd uniqueness validation for the Same Encrypted attribute\n\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem 'rails', '~> 7.0.4.3'\n  gem \"sqlite3\"\n  gem \"pry\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Encryption.configure(\n  primary_key: SecureRandom.alphanumeric(32),\n  deterministic_key: SecureRandom.alphanumeric(32),\n  key_derivation_salt: SecureRandom.alphanumeric(32),\n  extend_queries: true,\n)\n\nActiveRecord::Encryption::ExtendedDeterministicUniquenessValidator.install_support\n\nActiveRecord::Schema.define do\n  create_table :users, force: :true do |t|\n    t.string :thing\n  end\nend\n\nclass User < ActiveRecord::Base\n  encrypts :thing, deterministic: true#, downcase: true\n  validates :thing, uniqueness: true\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    User.create!(thing: \"my_test_string\")\n    model = User.create(thing: \"my_test_string\")\n   \n    puts model.errors.inspect\n    assert_equal 1, model.errors.size\n  end\nend\nExpected behavior\n\nSingle Query should be fired per encryption type for a uniqueness validation.\nSingle validation error should be raised per encryption type.\n\nActual behavior\nCase A - downcase: false or unset\n\nTwo queries will be fired when trying to validate the uniqueness of the attribute.\nBoth the queries will be the same, validating encrypted strings against the database values.\nTwo uniqueness validation errors will be raised.\n\nCase B - downcase: true\n\nIn this case, the number of queries will remain the same i.e. 2 but only a single validation error will be raised.\nThis is because the encrypted_string is converted to downcase before comparison.\n\nReason for the additional query\n\nThis call in extended_deterministic_uniqueness_validator treats the encrypted value as an original value for the attribute and converts the value as per upon the options specified (for eg: downcase)\n\nPossible solution\nThe loop should be changed to only iterate over [*encrypted_type.previous_types]. In other words, it should exclude the current encrypted/ciphered value.\nAn additional query with the current encrypted/ciphered value should not be fired. I'm unable to think of any use case where this re-validation is needed. Additional queries for previous_types makes sense.\nI need another set of eyes, maybe someone from the Core team or someone who has worked on the Encrypted module for confirmation. After that, I can go ahead and create a PR for the changes.\nAdditional context: #48248\nSystem configuration\nRails version: 7.0.4.3\nRuby version: 3.0.1", "number_of_comments": 2, "comment_authors": ["iamradioactive", "iamradioactive"]},
{"title": "Incorrectly formed paths can be called in Integration tests", "link": "https://github.com/rails/rails/issues/48403", "labels": ["\n                actionpack\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6317052841186523, "creation_date": "2023-06-06T04:18:22Z", "issue_submitter": "ghiculescu", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"rack\", \"~> 2.0\"\nend\n\nrequire \"action_controller/railtie\"\n\nclass TestApp < Rails::Application\n  config.root = __dir__\n  config.hosts << \"example.org\"\n  secrets.secret_key_base = \"secret_key_base\"\n\n  config.logger = Logger.new($stdout)\n  Rails.logger  = config.logger\n\n  routes.draw do\n    resources :reports, only: [:index] do\n      get \"/:report\", to: \"test#index\", as: :show, on: :collection\n    end\n  end\nend\n\nclass TestController < ActionController::Base\n  include Rails.application.routes.url_helpers\n  include ActionController::UrlFor\n\n  def index\n    @report = params[:report]\n    render(plain: @report || \"no report param\")\n  end\nend\n\nrequire \"minitest/autorun\"\nrequire \"rack/test\"\n\nclass BugTest < ActionDispatch::IntegrationTest\n  def test_returns_success\n    host! \"localhost\"\n\n    get show_reports_path(report: \"baz\")\n    assert_equal \"baz\", response.body\n\n    get show_reports_path(format: :csv)\n    assert_equal \"no report param\", response.body\n  end\n\n  private\n    def app\n      Rails.application\n    end\nend\nExpected behavior\nThe second request, to show_reports_path(format: :csv), should raise this error:\nActionController::UrlGenerationError: No route matches {:action=>\"index\", :controller=>\"test\", :format=>:csv}, missing required keys: [:report]\n\nActual behavior\nThe request is made.\nBugTest#test_returns_success\nExpected: \"no report param\"\n  Actual: \"baz\"\n\nThis suggests that the { report: \"baz\" } param from the first request is persisted to the second one.\nI was able to get the expected behaviour with this change. But I'm not sure if it's correct. My understanding is _recall is meant to be used to make paths easier to call within a request, but should not leak outside of the request (ie. into the test). Is that right?\ndiff --git a/actionpack/lib/action_dispatch/testing/integration.rb b/actionpack/lib/action_dispatch/testing/integration.rb\nindex 43b606cda8..35736c7921 100644\n--- a/actionpack/lib/action_dispatch/testing/integration.rb\n+++ b/actionpack/lib/action_dispatch/testing/integration.rb\n@@ -138,7 +138,7 @@ def initialize(app)\n\n       def url_options\n         @url_options ||= default_url_options.dup.tap do |url_options|\n-          url_options.reverse_merge!(controller.url_options) if controller.respond_to?(:url_options)\n+          url_options.reverse_merge!(controller.url_options.except(:_recall)) if controller.respond_to?(:url_options)\n\n           if @app.respond_to?(:routes)\n             url_options.reverse_merge!(@app.routes.default_url_options)\nSystem configuration\nRails version: main\nRuby version: any", "number_of_comments": 3, "comment_authors": ["ghiculescu", "Auralcat", "ghiculescu"]},
{"title": "SyntaxError in an autoloading class referenced from a view causes \"TypeError: Thread::Backtrace::Location object expected\"", "link": "https://github.com/rails/rails/issues/48326", "labels": ["\n                actionview\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6822235584259033, "creation_date": "2023-05-29T04:10:01Z", "issue_submitter": "zarqman", "body": "If a view renders code that autoloads a class that has a syntax error, DebugExceptions fails with a TypeError: Thread::Backtrace::Location object expected.\n\nBacktrace\nTypeError: Thread::Backtrace::Location object expected\n <internal:ast>:112:in `node_id_for_backtrace_location'\n~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionview/lib/action_view/template.rb:172:in `spot'\n~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb:252:in `spot'\n~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb:302:in `extract_source'\n~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb:206:in `block in source_extracts'\n~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb:205:in `map'\n~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/exception_wrapper.rb:205:in `source_extracts'\n~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:125:in `create_template'\n~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:77:in `render_for_browser_request'\n~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:69:in `render_exception'\n~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:44:in `rescue in call'\n~/.rvm/gems/ruby-3.2.2@rails71/bundler/gems/rails-294be7c7de34/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb:28:in `call'\n\n\nSteps to reproduce\ntest.rb:\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"rack\", \"~> 2.0\"\nend\n\nrequire \"action_controller/railtie\"\n\n# since DebugExceptions throws its own exception, display it here\nmodule ActionDispatch\n  class ShowExceptions\n    def call(env)\n      @app.call(env)\n    rescue Exception => exception\n      request = ActionDispatch::Request.new env\n      backtrace_cleaner = request.get_header(\"action_dispatch.backtrace_cleaner\")\n      wrapper = ExceptionWrapper.new(backtrace_cleaner, exception)\n      puts \"[SE] #{exception.inspect}\"\n      puts \"[SE]   #{exception.backtrace.join(\"\\n[SE]  \")}\"\n      if wrapper.show?(request)\n        render_exception(request, wrapper)\n      else\n        raise exception\n      end\n    end\n  end\nend\n\nclass TestApp < Rails::Application\n  config.root = __dir__\n  config.hosts << \"example.org\"\n  secrets.secret_key_base = \"secret_key_base\"\n  config.consider_all_requests_local = true\n\n  config.logger = Logger.new($stdout)\n  Rails.logger  = config.logger\n\n  routes.draw do\n    get \"/\" => \"test#index\"\n  end\nend\n\nclass TestController < ActionController::Base\n  include Rails.application.routes.url_helpers\n  append_view_path '.'\n\n  def index\n    render '/view_test_1'\n  end\n\n  # simulate a syntax error in an external, auto-loading class\n  def helper_1\n    eval %(\n      'abc' + pluralize 'def'\n    )\n  end\n  helper_method :helper_1\nend\n\nrequire \"minitest/autorun\"\nrequire \"rack/test\"\n\nclass BugTest < Minitest::Test\n  include Rack::Test::Methods\n\n  def test_returns_success\n    get \"/\"\n    # expecting a DebugExceptions response\n    assert_match %r{<header role=\"banner\">|<main role=\"main\"}, last_response.body\n  end\n\n  private\n    def app\n      Rails.application\n    end\nend\nview_test_1.html.erb (placed in same base dir as test.rb):\n-view-\n<%= helper_1 %>\nExpected behavior\nA standard DebugExceptions response should display the initial SyntaxError exception.\nActual behavior\nDebugExceptions itself raises a TypeError with message Thread::Backtrace::Location object expected, in turn causing a generic 500 error to be returned.\nSystem configuration\nRails version: main\nRuby version: 3.2.2", "number_of_comments": 2, "comment_authors": ["zarqman", "cmaruz"]},
{"title": "where!(...) condition is ignored when applied on a query started via association", "link": "https://github.com/rails/rails/issues/48366", "labels": ["\n                activerecord\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6841890811920166, "creation_date": "2023-06-01T12:28:08Z", "issue_submitter": "pjpires", "body": "Steps to reproduce\nI'm using .where!(...) (and a few other bang! methods) to make my queries composition process a bit more flexible/generic.\nCalling .where! on top of an existing \"base query\" started by calling an association on top of a record (e.g. post.comments) returns different results from when the query is done via the model class including a where condition (Comment.where(post: post)).\nI'm aware that these bang methods are currently undocumented (despite still accessible). In any case I thought I should report it as it appears to be an unexpected behavior.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n    t.string :comment_type\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\nend\n\n\nclass BugTest < Minitest::Test\n  def setup\n    @post = Post.create!\n    @comment1 = Comment.create!(comment_type: 'Good')\n    @comment2 = Comment.create!(comment_type: 'Good')\n\n    @post.comments << @comment1\n    @post.comments << @comment2\n    @post.comments << Comment.create!(comment_type: 'Bad')\n  end\n\n  def test_query_with_comment_where\n    query = Comment.where(post: @post)\n    query.where!('lower(comment_type) IN (?)', 'good')\n\n    # works\n    assert_equal [@comment1, @comment2], query\n  end\n\n  def test_query_through_post_association\n    query = @post.comments\n    query.where!('lower(comment_type) IN (?)', 'good')\n\n    # fails: expected the 2 good comments only, got all 3 comments\n    assert_equal [@comment1, @comment2], query\n  end\nend\nExpected behavior\nBoth tests should run the same query, applying both conditions: post_id and comment_type and return the same results.\nActual behavior\nApplying .where! on top of post.comments ignores the comment_type condition.\nSystem configuration\nRails version:\n7.0.5\nRuby version:\n3.2.2", "number_of_comments": 3, "comment_authors": ["pjpires", "nvasilevski", "pjpires"]},
{"title": "Server-Timings reported for partials are incorrect (too high) when nested partials are used", "link": "https://github.com/rails/rails/issues/48375", "labels": ["\n                actionpack\n", "\n                actionview\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.69413161277771, "creation_date": "2023-06-02T07:06:49Z", "issue_submitter": "tgaff", "body": "Server Timings reported for partials are longer than the entire request as reported by the browser.\nSteps to reproduce\n\nUse an endpoint with a lot of nested-partials.\nLook at server timings in browser network tabs\nObserve that the timing for render_partial.action_view is longer than the entire duration the browser reports for the request.\nObserve that the timing for render_partial.action_view is longer than the duration reported in the Rails log\n\nExample:\nRails might report Completed 200 OK in 2796ms but in the Server-Timings you'll see a higher number for render_partial.action_view such as 3725.8ms\nNote: the test-case requires views.  Please see the repo https://github.com/tgaff/rails-server-timing-issue-demo/tree/main/executable_test_case or add your own views.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"rails\", '=7.0.4.3'\n  gem \"rack\", \"~> 2.0\"\n  gem \"debug\", platforms: %i[ mri mingw x64_mingw ]\n  gem \"pry\"\nend\n\nrequire \"action_controller/railtie\"\n\nclass TestApp < Rails::Application\n  config.root = __dir__\n  config.hosts << \"example.org\"\n  secrets.secret_key_base = \"secret_key_base\"\n  config.server_timing = true\n\n  config.logger = Logger.new($stdout)\n  Rails.logger  = config.logger\n\n  routes.draw do\n    get \"/nested\" => \"test#nested\"\n    get \"/not_nested\" => \"test#not_nested\"\n  end\nend\n\nclass TestController < ActionController::Base\n  include Rails.application.routes.url_helpers\n\n  def nested\n    self.append_view_path('./views')\n    @nesting = true\n    render 'index'\n  end\n\n  def not_nested\n    self.append_view_path('./views')\n    @nesting = false\n    render 'index'\n  end\nend\n\nrequire \"minitest/autorun\"\nrequire \"rack/test\"\n\nclass ServerTimingBugTest < Minitest::Test\n  include Rack::Test::Methods\n\n  def test_nested_response_ok\n    get \"/nested\"\n    assert last_response.ok?\n  end\n\n  def test_nested_partial_timing_less_than_total_controller\n    get \"/nested\"\n    assert_operator render_partial_timing_dur, :<, process_action_timing_dur, \"partial rendering should be less than total action time\"\n  end\n\n  def test_not_nested_response_ok\n    get \"/not_nested\"\n    assert last_response.ok?\n  end\n\n  def test_not_nested_partial_timing_less_than_total_controller\n    get \"/not_nested\"\n    assert_operator render_partial_timing_dur, :<, process_action_timing_dur, \"partial rendering should be less than total action time\"\n  end\n\n  private\n    def app\n      Rails.application\n    end\n\n    def reported_server_timings\n      last_response.headers[\"Server-Timing\"]\n    end\n\n    def reported_timing_durations\n      timings = {}\n      reported_server_timings.split(',').each do |entry|\n        k, almost_v = entry.strip.split(';')\n        timings[k.strip] = almost_v.delete('dur=').to_f\n      end\n      timings\n    end\n\n    def render_partial_timing_dur\n      reported_timing_durations['render_partial.action_view']\n    end\n\n    def process_action_timing_dur\n      reported_timing_durations['process_action.action_controller']\n    end\nend\nThis is a little easier to understand in the browser where you can easily see the entire request time.  As such I've uploaded a demo app: https://github.com/tgaff/rails-server-timing-issue-demo\nThe executable test case is also in that repo in a sub-directory.\nExpected behavior\n\nServer-timings reported for partials should be accurate.\nServer-timings reported for partials should be less than the total request time.\n\nActual behavior\n\nServer timings reported to chrome, when partials are involved indicate a longer duration than the entirety of the request.\n\nSystem configuration\nRails version: 7.0.4.3 && main\nRuby version:  3.2.0\nscreenshot\n\nNote in the above request:\n\nthe browser says the request took 13.70 seconds.\nserver reported that partials took 23.39 seconds.\n\nother info / commentary\n\nI'm aware of Slow performance when rendering collections of nested partials #41452 and believe this is a separate issue.\nMy guess is that if _a render's partial _b, then the timing info for _a includes _b's render time, but _b's timing is also added in the final sum.\nReproducible with logging turned off (ActionView::Base.logger = nil)\nManual wristwatch verification of browser total time shows it to be correct-ish.\nPartials aren't processed in parallel are they?", "number_of_comments": 2, "comment_authors": ["tgaff", "fatkodima"]},
{"title": "[Question] any plan to support load_async() with ActiveRecord::Base.connected_to ?", "link": "https://github.com/rails/rails/issues/48351", "labels": ["\n                activerecord\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7102041244506836, "creation_date": "2023-05-31T09:56:27Z", "issue_submitter": "r-plus", "body": "Hi guys\nIs it possible to use async query by load_async() inside the block of ActiveRecord::Base#connected_to method to connect to replica database?\nIn my investigation, currently no.\nBecause connected_to method immediately call load method if return value is ActiveRecord::Relation, as the result asynchronous query execution back to foreground.\n\n\n\nrails/activerecord/lib/active_record/connection_handling.rb\n\n\n         Line 355\n      in\n      4e71edf\n\n\n\n\n\n\n return_value.load if return_value.is_a? ActiveRecord::Relation \n\n\n\n\n\nDo you have any plan to support load_async() support inside the ActiveRecord::Base#connected_to ?", "number_of_comments": 9, "comment_authors": ["r-plus", "eileencodes", "r-plus", "r-plus", "eileencodes", "r-plus", "matthewd", "r-plus", "eileencodes"]},
{"title": "Rails 6.1.x rails new; rake assets:precompile is broken", "link": "https://github.com/rails/rails/issues/48372", "labels": [], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.06740140914917, "creation_date": "2023-06-01T22:32:07Z", "issue_submitter": "schneems", "body": "Steps to reproduce\nmkdir -p /tmp/79de2b03fd57b181232892d89e7e9920; cd /tmp/79de2b03fd57b181232892d89e7e9920\nrails _6.1.7.3_ new myapp --database=postgresql\ncd myapp\nRAILS_ENV=production SECRET_KEY_BASE=asdf bundle exec rake assets:precompile assets:clean\n\nExpected behavior\nIt precompiles fine\nActual behavior\nCompiling...\nCompilation failed:\nnode:internal/process/promises:289\n            triggerUncaughtException(err, true /* fromPromise */);\n            ^\n\nError: Cannot find package '@babel/plugin-proposal-private-methods' imported from /private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/babel-virtual-resolve-base.js\n    at new NodeError (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/vendor/import-meta-resolve.js:203:5)\n    at packageResolve (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/vendor/import-meta-resolve.js:873:9)\n    at moduleResolve (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/vendor/import-meta-resolve.js:902:20)\n    at defaultResolve (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/vendor/import-meta-resolve.js:985:15)\n    at resolve (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/vendor/import-meta-resolve.js:999:12)\n    at resolve (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/files/import-meta-resolve.js:13:10)\n    at tryImportMetaResolve (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/files/plugins.js:123:45)\n    at resolveStandardizedNameForImport (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/files/plugins.js:145:19)\n    at resolveStandardizedName (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/files/plugins.js:154:12)\n    at loadPlugin (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/files/plugins.js:47:20)\n    at loadPlugin.next (<anonymous>)\n    at createDescriptor (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/config-descriptors.js:139:16)\n    at createDescriptor.next (<anonymous>)\n    at step (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/gensync/index.js:261:32)\n    at evaluateAsync (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/gensync/index.js:291:5)\n    at /private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/gensync/index.js:44:11\n    at Array.forEach (<anonymous>)\n    at Function.async (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/gensync/index.js:43:15)\n    at Function.all (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/gensync/index.js:216:13)\n    at Generator.next (<anonymous>)\n    at createDescriptors (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/config-descriptors.js:101:41)\n    at createDescriptors.next (<anonymous>)\n    at createPluginDescriptors (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/config-descriptors.js:98:17)\n    at createPluginDescriptors.next (<anonymous>)\n    at /private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/gensync-utils/functional.js:21:23\n    at Generator.next (<anonymous>)\n    at mergeChainOpts (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/config-chain.js:349:34)\n    at mergeChainOpts.next (<anonymous>)\n    at chainWalker (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/config-chain.js:316:14)\n    at chainWalker.next (<anonymous>)\n    at loadFileChain (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/config-chain.js:192:24)\n    at loadFileChain.next (<anonymous>)\n    at buildRootChain (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/config-chain.js:78:27)\n    at buildRootChain.next (<anonymous>)\n    at loadPrivatePartialConfig (/private/tmp/79de2b03fd57b181232892d89e7e9920/myapp/node_modules/@babel/core/lib/config/partial.js:79:62)\n    at loadPrivatePartialConfig.next (<anonymous>) {\n  code: 'ERR_MODULE_NOT_FOUND'\n}\n\nSystem configuration\nRails version: 6.1.7.3\nRuby version: 3.0.6\nNotes\nThis appears to be happening because webpacker generates a babel.config.js https://github.com/rails/webpacker/blob/1cec8408d9c30e458c9f83b0c50ef53a255a4352/lib/install/config/babel.config.js#L57-L60 that includes plugin-proposal-private-methods, however it does not add a dependency to plugin-proposal-private-methods. Instead, it depends on a package that depends on plugin-proposal-private-methods.\nRecently that package was re-named to plugin-transform-private-methods babel/babel#15614 and I believe it was released babel/babel@389ecb0.\nSo now when babel tries to execute it reads in the babel.config.js file, sees that it needs plugin-proposal-private-methods. Tries to load it, but that fails because plugin-proposal-private-methods is not installed (since it is no longer a dependency).\nA suggested path forward: Update the babel.config.js to reference the new file name. Or explicitly depend on all plugins in the babel.config.js. Maybe lock down some dependency versions.\nTo anyone hitting this error in your app you can change the name in your babel.config.js like this:\n-       '@babel/plugin-proposal-private-methods',\n+       '@babel/plugin-transform-private-methods', \nThere are more \"proposal\" items in there. As this happens again, people will hit the same bug.", "number_of_comments": 8, "comment_authors": ["schneems", "skipkayhil", "schneems", "schneems", "rafaelfranca", "schneems", "kaspergrubbe", "matthewgani"]},
{"title": "Rails cache prefix is not properly configured for isolated caching during parallel tests.", "link": "https://github.com/rails/rails/issues/48341", "labels": ["\n                activesupport\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0554022789001465, "creation_date": "2023-05-30T05:10:08Z", "issue_submitter": "rbroemeling", "body": "I've been investigating why I am seeing a lot of transient test failures due to cache collisions with parallelized tests. I thought it was because Rails doesn't update the cache prefix to protect from collisions but after looking at it; it's looking like Rails tries to do that (by appending Process.pid and Thread.current.object_id to the namespace), but that it isn't working properly.\nFor the moment I've worked around it by adding namespace delineation myself in the parallelize_setup block of the test helper, but it'd be better if Rails handled this automatically so that no-one has to worry about it.\nSteps to reproduce\nReplace test/test_helper.rb contents with the following:\nmodule ActiveSupport\n  class TestCase\n    # Run tests in parallel with specified workers\n    parallelize(workers: :number_of_processors)\n\n    # Setup all fixtures in test/fixtures/*.yml for all tests in alphabetical order.\n    fixtures :all\n\n    parallelize_setup do |worker|\n      puts \"#{worker.inspect}: #{Rails.cache.options[:namespace]}\"\n    end\n\n    # Add more helper methods to be used by all tests here...\n  end\nend\nExpected Behavior\nThe namespaces listed should be unique per worker to isolate the test runners so that they do not collide during parallelization. It should look something like this (assuming that the cache prefix configured is test:20230518:, which is what mine is configured to be).\n6: test:20230518:63512:3580:\n5: test:20230518:63513:3580:\n0: test:20230518:63514:3580:\n3: test:20230518:63515:3580:\n7: test:20230518:63516:3580:\n4: test:20230518:63517:3580:\n1: test:20230518:63518:3580:\n2: test:20230518:63519:3580:\n\nActual Behavior\nInstead, the namespaces listed all share identical process identifiers and thread identifiers.\n6: test:20230518:63512:3580:\n5: test:20230518:63512:3580:\n0: test:20230518:63512:3580:\n3: test:20230518:63512:3580:\n7: test:20230518:63512:3580:\n4: test:20230518:63512:3580:\n1: test:20230518:63512:3580:\n2: test:20230518:63512:3580:\n\nSystem configuration\nRails version:\n% fgrep rails Gemfile.lock\n      rails-dom-testing (~> 2.0)\n      rails-dom-testing (~> 2.0)\n      rails-html-sanitizer (~> 1.0, >= 1.2.0)\n      rails-dom-testing (~> 2.0)\n      rails-html-sanitizer (~> 1.1, >= 1.2.0)\n    importmap-rails (1.1.6)\n    rails (7.0.5)\n    rails-dom-testing (2.0.3)\n    rails-html-sanitizer (1.6.0)\n    sentry-rails (5.9.0)\n    sprockets-rails (3.4.2)\n    tailwindcss-rails (2.0.29-arm64-darwin)\n    tailwindcss-rails (2.0.29-x86_64-darwin)\n    tailwindcss-rails (2.0.29-x86_64-linux)\n    turbo-rails (1.4.0)\n  importmap-rails (~> 1.1)\n  rails (~> 7.0.5)\n  sentry-rails\n  sprockets-rails\n  tailwindcss-rails (~> 2.0)\n  turbo-rails\n\nRuby version:\n% ruby --version\nruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin21]", "number_of_comments": 21, "comment_authors": ["rbroemeling", "fatkodima", "rbroemeling", "fatkodima", "rbroemeling", "fatkodima", "rbroemeling", "rbroemeling", "fatkodima", "rbroemeling", "fatkodima", "rbroemeling", "fatkodima", "gavingmiller", "rbroemeling", "byroot", "rbroemeling", "rbroemeling", "byroot", "rbroemeling", "jclusso"]},
{"title": "Wrong query generated when merging unscoping scopes with eager_loaded associations", "link": "https://github.com/rails/rails/issues/48227", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9658224582672119, "creation_date": "2023-05-15T10:24:54Z", "issue_submitter": "pzac", "body": "Merging a scope that unscopes a default_scope also unscopes the conditions on eager_loaded associations with the same column name.\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :users, force: true do |t|\n    t.datetime :deleted_at\n  end\n\n  create_table :posts, force: true do |t|\n    t.integer :user_id\n    t.datetime :deleted_at\n  end\nend\n\nclass User < ActiveRecord::Base\n  has_many :posts\nend\n\nclass Post < ActiveRecord::Base\n  belongs_to :user\n  default_scope -> { where deleted_at: nil }\n  scope :with_deleted, -> { unscope(where: :deleted_at) }\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    active_user = User.create!\n    former_user = User.create!(deleted_at: Time.new)\n\n    active_user_post = Post.create!(user: active_user)\n    active_user_deleted_post = Post.create!(user: active_user, deleted_at: Time.new)\n    former_user_post = Post.create!(user: former_user)\n    former_user_deleted_post = Post.create!(user: former_user, deleted_at: Time.new)\n\n    assert_equal [active_user_post, former_user_post].to_set, Post.all.to_set # default_scope\n    assert_equal [active_user, former_user].to_set, User.all.to_set\n\n    assert_equal [active_user_post, former_user_post].to_set, Post.eager_load(:user).to_set\n    assert_equal 4, Post.with_deleted.eager_load(:user).count\n\n\n    # only current posts of active user\n    assert_equal [active_user_post].to_set, Post.eager_load(:user).where(users: {deleted_at: nil}).to_set\n\n    # all posts of active users - works\n    assert_equal [active_user_post, active_user_deleted_post].to_set, Post.with_deleted.eager_load(:user).where(users: {deleted_at: nil}).to_set\n    assert_equal [active_user_post, active_user_deleted_post].to_set, Post.unscope(where: :deleted_at).eager_load(:user).where(users: {deleted_at: nil}).to_set\n\n    # with a left join - works\n    assert_equal [active_user_post, active_user_deleted_post].to_set, Post.with_deleted.left_outer_joins(:user).merge(User.where(deleted_at: nil)).to_set\n\n    # all posts of active users - doesn't work: removes the deleted_at condition from users\n    assert_equal [active_user_post, active_user_deleted_post].to_set, Post.eager_load(:user).where(users: {deleted_at: nil}).merge(Post.with_deleted).to_set\n    # all posts of active users - doesn't work: removes the deleted_at condition from users\n    assert_equal [active_user_post, active_user_deleted_post].to_set, Post.eager_load(:user).where(users: {deleted_at: nil}).merge(Post.unscope(where: :deleted_at)).to_set\n  end\nend\nExpected behavior\nIt should generate this SQL\nSELECT \"posts\".\"id\" AS t0_r0, \"posts\".\"user_id\" AS t0_r1, \"posts\".\"deleted_at\" AS t0_r2, \n\"users\".\"id\" AS t1_r0, \"users\".\"deleted_at\" AS t1_r1 \nFROM \"posts\" LEFT OUTER JOIN \"users\" ON \"users\".\"id\" = \"posts\".\"user_id\" WHERE \"users\".\"deleted_at\" IS NULL\nActual behavior\nBut actually generates\nSELECT \"posts\".\"id\" AS t0_r0, \"posts\".\"user_id\" AS t0_r1, \"posts\".\"deleted_at\" AS t0_r2, \n\"users\".\"id\" AS t1_r0, \"users\".\"deleted_at\" AS t1_r1 \nFROM \"posts\" LEFT OUTER JOIN \"users\" ON \"users\".\"id\" = \"posts\".\"user_id\"\nSystem configuration\nRails version: 7.0.4.3\nRuby version: 3.2.2", "number_of_comments": 7, "comment_authors": ["pzac", "pzac", "hamax97", "gammons", "gammons", "gammons", "eadz"]},
{"title": "Allow overriding of hard-coded postgres database in public schema configuration and improve error message when postgres database does not exist", "link": "https://github.com/rails/rails/issues/48236", "labels": ["\n                activerecord\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9615650177001953, "creation_date": "2023-05-16T15:08:06Z", "issue_submitter": "tjjjwxzq", "body": "Context\nIn the event that you need to run rails db tasks against a postgresql server that does not have a postgres database, rails db:drop and db:create and any other db tasks that depend on them will fail and complain with misleading and confusing error messages.\nThe root cause is the database postgres being hardcoded in the connection configuration: \n\n\nrails/activerecord/lib/active_record/tasks/postgresql_database_tasks.rb\n\n\n        Lines 102 to 104\n      in\n      d137b10\n\n\n\n\n\n\n def public_schema_config \n\n\n\n configuration_hash.merge(database: \"postgres\", schema_search_path: \"public\") \n\n\n\n end \n\n\n\n\n\nwhen a drop or create is being attempted, but the error messages shown, especially for the drop command, are misleading and confusing since they either suggest a database that is actually present does not exist, or that the fault lies in the user's config/database.yml file, when neither is the case.\nA proposal to fix this behaviour is:\n\nWhen the ActiveRecord::NoDatabaseError is thrown because the connection to the postgres database fails, and not because the connection to the user's specified database to drop/create fails, improve the error message being shown to the user (this line for create and this line for drop)\na. For create, the ActiveRecord::NoDatabaseError message ends up showing something like We could not find your database: postgres. Which can be found in the database configuration file located at config/database.yml. which is confusing to the user as the problem is not with anything in config/database.yml, but with the fact that the postgres database which rails assumes always exists does not exist\nb. For drop, the messaage shown after ActiveRecord::NoDatabaseError is rescued misleads the user into thinking that the database that they tried to drop doesn't exist, when the error is actually raised because the code tries to connect to a non-existent postgres database\nAllow users to override the default database these tasks connect to instead of hardcoding postgres. The improved error messages can then prompt the user to either 1) ensure that the postgres database exists, or 2) override the default database name when running those tasks.\n\nSteps to reproduce for db:drop\nSet up a PostgreSQL database that does not have a default postgres database. This can be done by explicitly dropping the postgres database with SQL commands, or using database providers such as DigitalOcean who do not create a postgres database by default (their default database is named defaultdb).\nAttempt to run ./bin/rails db:drop passing in the appropriate DATABASE_URL, say with a database called my-db.\nExpected behavior\nComplain that the postgres database does not exist and prompt user to create it or override the default database that the task connects to to carry out the drop operation on the specified database.\nActual behaviour\nThis will complain: Databse 'my-db' does not exist and the database will fail to be dropped\nSteps to reproduce for db:create\nAttempt to run ./bin/rails db:create, passing in the appropriate DATABASE_URL, say with a database called my-db.\nExpected behavior\nComplain that the postgres database does not exist and prompt user to create it or override the default database that the task connects to to carry out the create operation for the specified database, instead of suggesting that there is an error in the users config/database.yml\nActual behaviour\nThis will throw an error:\nWe could not find your database: postgres. Which can be found in the database configuration file located at config/database.yml.\n\nTo resolve this issue:\n\n- Did you create the database for this app, or delete it? You may need to create your database.\n- Has the database name changed? Check your database.yml config has the correct database name.\n\nTo create your database, run:\n\n        bin/rails db:create\nCouldn't create 'my-db database. Please check your configuration.\nrails aborted!\n\nSystem configuration\nRails version: 7.0.2.3\nRuby version: 3.1.1", "number_of_comments": 7, "comment_authors": ["tjjjwxzq", "hahmed", "tjjjwxzq", "hahmed", "tjjjwxzq", "zzak", "hahmed"]},
{"title": "Rails 7.0: Double validation error for validates_uniqueness_of when attribute is encrypted", "link": "https://github.com/rails/rails/issues/48248", "labels": ["\n                activerecord\n", "\n                encryption\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9635546207427979, "creation_date": "2023-05-18T09:42:48Z", "issue_submitter": "john-999", "body": "Steps to reproduce\nIn the User model, I have an attribute (User.thing) that is encrypted and has a uniqueness validation:\nclass User < ApplicationRecord\n\n  encrypts :thing, deterministic: true, downcase: true\n  \n  validates :thing, uniqueness: true\n\nend\nWhen I attempt to trigger this validation error (by submitting a User with a value for this attribute that already exists in a different User), the uniqueness error message is displayed 2 times, instead of only once.\nWhen I output and inspect this User's errors in the log file, I see that 1 error message contains the unencrypted value, and 1 additional error messages are added for the encrypted value.\nIt looks like this:\n#<ActiveModel::Errors [\n\n#<ActiveModel::Error attribute=thing, type=taken, options={:value=>\"my_test_string\"}>, \n#<ActiveModel::Error attribute=thing, type=taken, options={:value=>\"{\\\"p\\\":\\\"35Q9AxGPf1w9uWS3lAkbXZULHiU=\\\",\\\"h\\\":{\\\"iv\\\":\\\"XYR33B22apwOsVwP\\\",\\\"at\\\":\\\"on8mfHa5ePMUCgVjjn81oQ==\\\"}}\"}>\n\n]>\nActual behavior\n2 \"duplicate\" error messages are generated/displayed.\nExpected behavior\nOnly 1 error message should be generated/displayed.\nSystem configuration\n\nRuby 3.0.1p64\nRails 7.0.4.3", "number_of_comments": 10, "comment_authors": ["john-999", "nickborromeo", "iamradioactive", "john-999", "iamradioactive", "nickborromeo", "iamradioactive", "iamradioactive", "iamradioactive", "john-999"]},
{"title": "Avoid database query if querying a not_null constrained column provided a nil value", "link": "https://github.com/rails/rails/issues/48219", "labels": ["\n                activerecord\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0315744876861572, "creation_date": "2023-05-13T12:19:19Z", "issue_submitter": "wahabmangat", "body": "Database queries should be avoided, if possible. One of the scenario is when we query a not_null constrained column to find let's say all the users with id null, activerecord should return none relation right away instead of first querying database underlying, avoiding unnecessary query. Similarly if the developer has added not_null constraint to any other column, the similar behaviour should be expected.\nSteps to reproduce\nUser.where(id: nil) -> should return User.none\nUser.find_by(id: nil) -> should return nil\nSystem configuration\nRails version 7.0.3:\nRuby version 3.0.1:", "number_of_comments": 5, "comment_authors": ["wahabmangat", "pzac", "fatkodima", "wahabmangat", "wahabmangat"]},
{"title": "attributes_before_type_cast is not working with accepts_nested_attributes_for and has_many association", "link": "https://github.com/rails/rails/issues/48301", "labels": [], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8028461933135986, "creation_date": "2023-05-25T19:57:11Z", "issue_submitter": "mateusnava", "body": "Steps to reproduce\nclass User < ApplicationRecord\n  has_many :schools\n\n  accepts_nested_attributes_for :schools\nend\n\nclass School < ApplicationRecord\n  belongs_to :user\nend\n\nCreate a User with a School:\n\nUser.create!(name: \"user 1\")\nUser.first.schools.create!\n\nAssigns an attribute with the wrong format (degree_issued_at in my example):\n\nuser.assign_attributes(school_attributes: [{id: 1, degree_issued_at: \"2020-30-30\"}]\nExpected behavior\nI expected to see degree_issue_at: \"2020-30-30\" in the attributes_before_type_cast\nActual behavior\n> user.schools.first.attributes_before_type_cast\n=> {\"user_id\"=>1, \"id\"=>1, \"name\"=>nil, \"degree_issued_at\"=>nil}\nSystem configuration\nRails version: 7.0.5\nRuby version: 3.0.1\nPossible fix\nChange the method ActiveModel::Type::Value#changed?  to:\n  def changed?(old_value, new_value, new_value_before_type_cast)\n    return true if old_value.nil? && new_value.nil? && new_value_before_type_cast.present?\n    ...\n  end\nI only could reproduce this issue with has_many, accepts_nested_attributes_for, and  a persisted record with nil in the attribute.", "number_of_comments": 1, "comment_authors": ["mateusnava"]},
{"title": "Rails new succeeds (exit status zero) even when it does not bundle install Redis", "link": "https://github.com/rails/rails/issues/48278", "labels": ["\n                railties\n", "\n                With reproduction steps\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8698551654815674, "creation_date": "2023-05-22T20:33:14Z", "issue_submitter": "schneems", "body": "Steps to reproduce\n$ gem install rails --no-document\nSuccessfully installed rails-7.0.4.3\n1 gem installed\n\nUninstall all redis gems:\n$ gem uninstall redis --all\n\nCreate a Rails app:\n$ rails new myapp --database=postgresql\n...\n$ echo $?\n0\n$ cd myapp\n\nFails to boot:\n$ rails c\nCould not find redis-4.8.1 in locally installed gems\n\nExpected behavior\nAfter rails new returns a zero status code I expect that everything is installed correctly and that I can use it.\nActual behavior\nRails fails to install the redis gem, but continues anyway\n$ rails new myapp --database=postgresql\n      create  \n      create  README.md\n      create  Rakefile\n      create  .ruby-version\n      create  config.ru\n      create  .gitignore\n      create  .gitattributes\n      create  Gemfile\n         run  git init from \".\"\nInitialized empty Git repository in /Users/rschneeman/Documents/projects/rundoc/test/fixtures/rails_7/tmp/myapp/.git/\n      create  app\n      create  app/assets/config/manifest.js\n      create  app/assets/stylesheets/application.css\n      create  app/channels/application_cable/channel.rb\n      create  app/channels/application_cable/connection.rb\n      create  app/controllers/application_controller.rb\n      create  app/helpers/application_helper.rb\n      create  app/jobs/application_job.rb\n      create  app/mailers/application_mailer.rb\n      create  app/models/application_record.rb\n      create  app/views/layouts/application.html.erb\n      create  app/views/layouts/mailer.html.erb\n      create  app/views/layouts/mailer.text.erb\n      create  app/assets/images\n      create  app/assets/images/.keep\n      create  app/controllers/concerns/.keep\n      create  app/models/concerns/.keep\n      create  bin\n      create  bin/rails\n      create  bin/rake\n      create  bin/setup\n      create  config\n      create  config/routes.rb\n      create  config/application.rb\n      create  config/environment.rb\n      create  config/cable.yml\n      create  config/puma.rb\n      create  config/storage.yml\n      create  config/environments\n      create  config/environments/development.rb\n      create  config/environments/production.rb\n      create  config/environments/test.rb\n      create  config/initializers\n      create  config/initializers/assets.rb\n      create  config/initializers/content_security_policy.rb\n      create  config/initializers/cors.rb\n      create  config/initializers/filter_parameter_logging.rb\n      create  config/initializers/inflections.rb\n      create  config/initializers/new_framework_defaults_7_0.rb\n      create  config/initializers/permissions_policy.rb\n      create  config/locales\n      create  config/locales/en.yml\n      create  config/master.key\n      append  .gitignore\n      create  config/boot.rb\n      create  config/database.yml\n      create  db\n      create  db/seeds.rb\n      create  lib\n      create  lib/tasks\n      create  lib/tasks/.keep\n      create  lib/assets\n      create  lib/assets/.keep\n      create  log\n      create  log/.keep\n      create  public\n      create  public/404.html\n      create  public/422.html\n      create  public/500.html\n      create  public/apple-touch-icon-precomposed.png\n      create  public/apple-touch-icon.png\n      create  public/favicon.ico\n      create  public/robots.txt\n      create  tmp\n      create  tmp/.keep\n      create  tmp/pids\n      create  tmp/pids/.keep\n      create  tmp/cache\n      create  tmp/cache/assets\n      create  vendor\n      create  vendor/.keep\n      create  test/fixtures/files\n      create  test/fixtures/files/.keep\n      create  test/controllers\n      create  test/controllers/.keep\n      create  test/mailers\n      create  test/mailers/.keep\n      create  test/models\n      create  test/models/.keep\n      create  test/helpers\n      create  test/helpers/.keep\n      create  test/integration\n      create  test/integration/.keep\n      create  test/channels/application_cable/connection_test.rb\n      create  test/test_helper.rb\n      create  test/system\n      create  test/system/.keep\n      create  test/application_system_test_case.rb\n      create  storage\n      create  storage/.keep\n      create  tmp/storage\n      create  tmp/storage/.keep\n      remove  config/initializers/cors.rb\n      remove  config/initializers/new_framework_defaults_7_0.rb\n         run  bundle install\nFetching gem metadata from https://rubygems.org/...........\nResolving dependencies...\nUsing rake 13.0.6\nUsing concurrent-ruby 1.2.2\nUsing minitest 5.18.0\nUsing builder 3.2.4\nUsing racc 1.6.2\nUsing rack 2.2.7\nUsing websocket-extensions 0.1.5\nUsing marcel 1.0.2\nUsing mini_mime 1.1.2\nUsing public_suffix 5.0.1\nUsing bindex 0.8.1\nUsing bundler 2.4.13\nUsing erubi 1.12.0\nUsing crass 1.0.6\nUsing nio4r 2.5.9\nUsing date 3.3.3\nUsing timeout 0.3.2\nUsing msgpack 1.7.1\nUsing matrix 0.4.2\nUsing regexp_parser 2.8.0\nUsing io-console 0.6.0\nUsing method_source 1.0.0\nUsing thor 1.2.2\nUsing zeitwerk 2.6.8\nUsing pg 1.5.3\nUsing rexml 3.2.5\nUsing rubyzip 2.3.2\nUsing websocket 1.2.9\nUsing tzinfo 2.0.6\nUsing i18n 1.13.0\nUsing nokogiri 1.15.1 (x86_64-darwin)\nUsing rack-test 2.1.0\nUsing websocket-driver 0.7.5\nUsing sprockets 4.2.0\nUsing addressable 2.8.4\nUsing bootsnap 1.16.0\nUsing activesupport 7.0.4.3\nUsing puma 5.6.5\nUsing reline 0.3.4\nUsing globalid 1.1.0\nUsing activemodel 7.0.4.3\nUsing irb 1.6.4\nUsing activerecord 7.0.4.3\nUsing debug 1.8.0\nUsing net-protocol 0.2.1\nUsing activejob 7.0.4.3\nUsing selenium-webdriver 4.9.1\nUsing rails-dom-testing 2.0.3\nUsing loofah 2.21.3\nUsing xpath 3.2.0\nUsing webdrivers 5.2.0\nUsing rails-html-sanitizer 1.5.0\nUsing capybara 3.39.1\nUsing actionview 7.0.4.3\nUsing net-smtp 0.3.3\nUsing net-imap 0.3.4\nUsing net-pop 0.1.2\nUsing jbuilder 2.11.5\nUsing actionpack 7.0.4.3\nUsing mail 2.8.1\nUsing actioncable 7.0.4.3\nUsing activestorage 7.0.4.3\nUsing railties 7.0.4.3\nUsing sprockets-rails 3.4.2\nUsing actionmailer 7.0.4.3\nUsing actionmailbox 7.0.4.3\nUsing actiontext 7.0.4.3\nUsing importmap-rails 1.1.6\nUsing stimulus-rails 1.2.1\nUsing turbo-rails 1.4.0\nUsing web-console 4.2.0\nUsing rails 7.0.4.3\nBundle complete! 15 Gemfile dependencies, 72 gems now installed.\nUse `bundle info [gemname]` to see where a bundled gem is installed.\n         run  bundle binstubs bundler\n       rails  importmap:install\nAdd Importmap include tags in application layout\n      insert  app/views/layouts/application.html.erb\nCreate application.js module as entrypoint\n      create  app/javascript/application.js\nUse vendor/javascript for downloaded pins\n      create  vendor/javascript\n      create  vendor/javascript/.keep\nEnsure JavaScript files are in the Sprocket manifest\n      append  app/assets/config/manifest.js\nConfigure importmap paths in config/importmap.rb\n      create  config/importmap.rb\nCopying binstub\n      create  bin/importmap\n       rails  turbo:install stimulus:install\nImport Turbo\n      append  app/javascript/application.js\nPin Turbo\n      append  config/importmap.rb\nEnable redis in bundle\n        gsub  Gemfile\n         run  bundle install\n/Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:290:in `raise_not_found!': Could not find gem 'redis (~> 4.0)' in locally installed gems. (Bundler::GemNotFound)\n\nThe source contains the following gems matching 'redis':\n  * redis-5.0.5\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:343:in `block in prepare_dependencies'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:328:in `each'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:328:in `map'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:328:in `prepare_dependencies'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:53:in `setup_solver'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:28:in `start'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:554:in `start_resolution'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:289:in `resolve'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:507:in `materialize'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:197:in `specs'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:254:in `specs_for'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/runtime.rb:18:in `setup'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler.rb:162:in `setup'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/setup.rb:23:in `block in <top (required)>'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/ui/shell.rb:159:in `with_level'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/ui/shell.rb:111:in `silence'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/setup.rb:23:in `<top (required)>'\n\tfrom <internal:/Users/rschneeman/.rubies/ruby-3.1.4/lib/ruby/3.1.0/rubygems/core_ext/kernel_require.rb>:85:in `require'\n\tfrom <internal:/Users/rschneeman/.rubies/ruby-3.1.4/lib/ruby/3.1.0/rubygems/core_ext/kernel_require.rb>:85:in `require'\nSwitch development cable to use redis\n        gsub  config/cable.yml\n/Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:290:in `raise_not_found!': Could not find gem 'redis (~> 4.0)' in locally installed gems. (Bundler::GemNotFound)\n\nThe source contains the following gems matching 'redis':\n  * redis-5.0.5\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:343:in `block in prepare_dependencies'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:328:in `each'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:328:in `map'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:328:in `prepare_dependencies'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:53:in `setup_solver'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/resolver.rb:28:in `start'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:554:in `start_resolution'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:289:in `resolve'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:507:in `materialize'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:197:in `specs'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/definition.rb:254:in `specs_for'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/runtime.rb:18:in `setup'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler.rb:162:in `setup'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/setup.rb:23:in `block in <top (required)>'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/ui/shell.rb:159:in `with_level'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/ui/shell.rb:111:in `silence'\n\tfrom /Users/rschneeman/.gem/ruby/3.1.4/gems/bundler-2.4.13/lib/bundler/setup.rb:23:in `<top (required)>'\n\tfrom <internal:/Users/rschneeman/.rubies/ruby-3.1.4/lib/ruby/3.1.0/rubygems/core_ext/kernel_require.rb>:85:in `require'\n\tfrom <internal:/Users/rschneeman/.rubies/ruby-3.1.4/lib/ruby/3.1.0/rubygems/core_ext/kernel_require.rb>:85:in `require'\n$ echo $?\n0\n\nSlightly different (not sure why):\n$ rails new myapp --database=postgresql\n      create\n      create  README.md\n      create  Rakefile\n      create  .ruby-version\n      create  config.ru\n      create  .gitignore\n      create  .gitattributes\n      create  Gemfile\n         run  git init from \".\"\nInitialized empty Git repository in /private/tmp/myapp/.git/\n      create  app\n      create  app/assets/config/manifest.js\n      create  app/assets/stylesheets/application.css\n      create  app/channels/application_cable/channel.rb\n      create  app/channels/application_cable/connection.rb\n      create  app/controllers/application_controller.rb\n      create  app/helpers/application_helper.rb\n      create  app/jobs/application_job.rb\n      create  app/mailers/application_mailer.rb\n      create  app/models/application_record.rb\n      create  app/views/layouts/application.html.erb\n      create  app/views/layouts/mailer.html.erb\n      create  app/views/layouts/mailer.text.erb\n      create  app/assets/images\n      create  app/assets/images/.keep\n      create  app/controllers/concerns/.keep\n      create  app/models/concerns/.keep\n      create  bin\n      create  bin/rails\n      create  bin/rake\n      create  bin/setup\n      create  config\n      create  config/routes.rb\n      create  config/application.rb\n      create  config/environment.rb\n      create  config/cable.yml\n      create  config/puma.rb\n      create  config/storage.yml\n      create  config/environments\n      create  config/environments/development.rb\n      create  config/environments/production.rb\n      create  config/environments/test.rb\n      create  config/initializers\n      create  config/initializers/assets.rb\n      create  config/initializers/content_security_policy.rb\n      create  config/initializers/cors.rb\n      create  config/initializers/filter_parameter_logging.rb\n      create  config/initializers/inflections.rb\n      create  config/initializers/new_framework_defaults_7_0.rb\n      create  config/initializers/permissions_policy.rb\n      create  config/locales\n      create  config/locales/en.yml\n      create  config/master.key\n      append  .gitignore\n      create  config/boot.rb\n      create  config/database.yml\n      create  db\n      create  db/seeds.rb\n      create  lib\n      create  lib/tasks\n      create  lib/tasks/.keep\n      create  lib/assets\n      create  lib/assets/.keep\n      create  log\n      create  log/.keep\n      create  public\n      create  public/404.html\n      create  public/422.html\n      create  public/500.html\n      create  public/apple-touch-icon-precomposed.png\n      create  public/apple-touch-icon.png\n      create  public/favicon.ico\n      create  public/robots.txt\n      create  tmp\n      create  tmp/.keep\n      create  tmp/pids\n      create  tmp/pids/.keep\n      create  tmp/cache\n      create  tmp/cache/assets\n      create  vendor\n      create  vendor/.keep\n      create  test/fixtures/files\n      create  test/fixtures/files/.keep\n      create  test/controllers\n      create  test/controllers/.keep\n      create  test/mailers\n      create  test/mailers/.keep\n      create  test/models\n      create  test/models/.keep\n      create  test/helpers\n      create  test/helpers/.keep\n      create  test/integration\n      create  test/integration/.keep\n      create  test/channels/application_cable/connection_test.rb\n      create  test/test_helper.rb\n      create  test/system\n      create  test/system/.keep\n      create  test/application_system_test_case.rb\n      create  storage\n      create  storage/.keep\n      create  tmp/storage\n      create  tmp/storage/.keep\n      remove  config/initializers/cors.rb\n      remove  config/initializers/new_framework_defaults_7_0.rb\n         run  bundle install\nFetching gem metadata from https://rubygems.org/...........\nResolving dependencies...\nUsing rake 13.0.6\nUsing minitest 5.18.0\nUsing builder 3.2.4\nUsing racc 1.6.2\nUsing crass 1.0.6\nUsing rack 2.2.7\nUsing nio4r 2.5.9\nUsing marcel 1.0.2\nUsing zeitwerk 2.6.8\nUsing mini_mime 1.1.2\nUsing bundler 2.4.13\nUsing rexml 3.2.5\nUsing concurrent-ruby 1.2.2\nUsing websocket 1.2.9\nUsing websocket-extensions 0.1.5\nUsing date 3.3.3\nUsing public_suffix 5.0.1\nUsing msgpack 1.7.1\nUsing regexp_parser 2.8.0\nUsing sprockets 4.2.0\nUsing method_source 1.0.0\nUsing thor 1.2.2\nUsing timeout 0.3.2\nUsing bindex 0.8.1\nUsing pg 1.5.3\nUsing matrix 0.4.2\nUsing rubyzip 2.3.2\nUsing erubi 1.12.0\nUsing selenium-webdriver 4.9.1\nUsing rack-test 2.1.0\nUsing puma 5.6.5\nUsing i18n 1.13.0\nUsing tzinfo 2.0.6\nUsing io-console 0.6.0\nUsing websocket-driver 0.7.5\nUsing addressable 2.8.4\nUsing bootsnap 1.16.0\nUsing net-protocol 0.2.1\nUsing nokogiri 1.15.1 (x86_64-darwin)\nUsing activesupport 7.0.4.3\nUsing reline 0.3.4\nUsing net-smtp 0.3.3\nUsing net-imap 0.3.4\nUsing irb 1.6.4\nUsing loofah 2.21.3\nUsing xpath 3.2.0\nUsing webdrivers 5.2.0\nUsing activemodel 7.0.4.3\nUsing rails-dom-testing 2.0.3\nUsing globalid 1.1.0\nUsing activerecord 7.0.4.3\nUsing debug 1.8.0\nUsing activejob 7.0.4.3\nUsing capybara 3.39.1\nUsing net-pop 0.1.2\nUsing rails-html-sanitizer 1.5.0\nUsing mail 2.8.1\nUsing actionview 7.0.4.3\nUsing actionpack 7.0.4.3\nUsing jbuilder 2.11.5\nUsing actioncable 7.0.4.3\nUsing activestorage 7.0.4.3\nUsing actionmailer 7.0.4.3\nUsing railties 7.0.4.3\nUsing actiontext 7.0.4.3\nUsing web-console 4.2.0\nUsing sprockets-rails 3.4.2\nUsing actionmailbox 7.0.4.3\nUsing importmap-rails 1.1.6\nUsing stimulus-rails 1.2.1\nUsing rails 7.0.4.3\nUsing turbo-rails 1.4.0\nBundle complete! 15 Gemfile dependencies, 72 gems now installed.\nUse `bundle info [gemname]` to see where a bundled gem is installed.\n         run  bundle binstubs bundler\n       rails  importmap:install\nAdd Importmap include tags in application layout\n      insert  app/views/layouts/application.html.erb\nCreate application.js module as entrypoint\n      create  app/javascript/application.js\nUse vendor/javascript for downloaded pins\n      create  vendor/javascript\n      create  vendor/javascript/.keep\nEnsure JavaScript files are in the Sprocket manifest\n      append  app/assets/config/manifest.js\nConfigure importmap paths in config/importmap.rb\n      create  config/importmap.rb\nCopying binstub\n      create  bin/importmap\n       rails  turbo:install stimulus:install\nImport Turbo\n      append  app/javascript/application.js\nPin Turbo\n      append  config/importmap.rb\nEnable redis in bundle\n        gsub  Gemfile\n         run  bundle install\nCould not find gem 'redis (~> 4.0)' in locally installed gems.\nRun `bundle install` to install missing gems.\nSwitch development cable to use redis\n        gsub  config/cable.yml\nCould not find gem 'redis (~> 4.0)' in locally installed gems.\nRun `bundle install` to install missing gems.\n$ echo $?\n0\n\nSystem configuration\nRails version:\n$ rails -v\nRails 7.0.4.3\n\nRuby version:\n$ ruby -v\nruby 3.1.4p223 (2023-03-30 revision 957bb7cb81) [x86_64-darwin22]", "number_of_comments": 4, "comment_authors": ["schneems", "skipkayhil", "schneems", "schneems"]},
{"title": "ActionCable sporadically fails to confirm subscribe because the subscription \"already exists\"", "link": "https://github.com/rails/rails/issues/48292", "labels": ["\n                actioncable\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8698563575744629, "creation_date": "2023-05-24T17:43:44Z", "issue_submitter": "shoffing", "body": "Steps to reproduce\n\nCreate a very basic channel that simply streams for the current user:\n\nclass PerfTestChannel < ApplicationCable::Channel\n  def subscribed\n    stream_for current_user\n  end\nend\n\nOn page load, subscribe to the channel.\n\nApp.cable.subscriptions.create('PerfTestChannel');\nExpected behavior\nThe ActionCable client should be able to reliably subscribe to a channel.\nActual behavior\n\nOn a development instance with browser network latency simulation, or any staging/production instance, the subscribe command will sporadically (varying from 5%-70% depending on load) fail to be confirmed. The SubscriptionGuarantor will repeatedly attempt to resubscribe every 500ms, but no confirmation will ever be received.\n\n\n\nI wrote a JS script to assist in reproducing this error. It repeatedly disconnects & subscribes to the channel until the subscription fails to leave the pendingSubscriptions state in under 600ms. Running this in browser JS console reliably reproduces the issue on a staging/production instance:\n\n(async function() {\n  let i = 0;\n  while (true) {\n    i++;\n    App.cable.subscriptions.subscriptions.forEach(sub => App.cable.subscriptions.remove(sub));\n    App.cable.disconnect();\n    App.cable.subscriptions.create('PerfTestChannel');\n    await new Promise(resolve => setTimeout(resolve, 600));\n    const pendingSubs = App.cable.subscriptions.guarantor.pendingSubscriptions;\n    if (pendingSubs.length > 0) {\n      break;\n    } else { console.log('...' + i); }\n  }\n})()\nInvestigation\nThis bug was tricky to investigate as there was nothing useful in our logs. The /cable request was successfully being upgraded to websockets as expected. We saw some errors that might have been relevant, but none of them occurred reliably with the issue being observed. After digging through the ActionCable source code, we have determined the issue is caused by this line in subscriptions.rb: \n\n\nrails/actioncable/lib/action_cable/connection/subscriptions.rb\n\n\n         Line 34\n      in\n      0f5c8c5\n\n\n\n\n\n\n return if subscriptions.key?(id_key) \n\n\n\n\n\nIt returns silently if the subscription \"already exists\". We confirmed this is the source of the error by monkey-patching the class in a config/initializers to add some logging with the return:\n# config/initializers/monkeypatch_actioncable.rb\n# frozen_string_literal: true\n\nrequire \"active_support/core_ext/hash/indifferent_access\"\n\nmodule ActionCable\n  module Connection\n    # Collection class for all the channel subscriptions established on a given connection. Responsible for routing incoming commands that arrive on\n    # the connection to the proper channel.\n    class Subscriptions # :nodoc:\n      def add(data)\n        id_key = data[\"identifier\"]\n        id_options = ActiveSupport::JSON.decode(id_key).with_indifferent_access\n\n        if subscriptions.key?(id_key)\n          Rails.logger.info(\"[Action Cable] Already subscribed to #{id_key}...\")\n          return\n        end\n\n        subscription_klass = id_options[:channel].safe_constantize\n\n        if subscription_klass && ActionCable::Channel::Base > subscription_klass\n          subscription = subscription_klass.new(connection, id_key, id_options)\n          subscriptions[id_key] = subscription\n          subscription.subscribe_to_channel\n        else\n          logger.error \"Subscription class not found: #{id_options[:channel].inspect}\"\n        end\n      end\n    end\n  end\nend\nWe deployed the patch to staging and verified that when the error occurs and subscribe is being repeatedly attempted, our logs are filled with the \"Already subscribed...\" message. This appears to confirms that it's not an issue with our load balancer or nginx or something, the subscribe command is successfully making its way all the way to the Rails server. It's just being ignored, and failing silently.\nPossible Fix\nSimply calling subscribe_to_channel if the subscription already exists seems to fix the issue:\nreturn subscriptions[id_key].subscribe_to_channel if subscriptions.key?(id_key)\nHowever, I'm not familiar enough with ActionCable to fully understand the implications of that logic. For example, I think that may result in multiple subscribed callbacks being invoked in some cases where multiple subscribe commands are sent from the client. There also seems to be some counting-semaphore logic wrapped around the connection to redis, which multiple subscribes could maybe interfere with.\nImpact\nThis bug is blocking our team's adoption of ActionCable. We cannot rely on the system if it fails to connect with even the most basic of setups.\nSystem configuration\nRails version: 7.0.4.3\nRuby version: 3.2.1", "number_of_comments": 4, "comment_authors": ["shoffing", "kushniryb", "shoffing", "shoffing"]},
{"title": "Passing object with id in where parameters behaves differently in Rails 6.1", "link": "https://github.com/rails/rails/issues/48242", "labels": ["\n                activerecord\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.8234217166900635, "creation_date": "2023-05-17T04:56:30Z", "issue_submitter": "rahul342", "body": "In Rails 6.1, if you have a PORO with a attr_reader :id, Rails will pick up the id as a parameter to SQL conditional clause vs using the defined serialization method (like defining value_for_database?), but for inserts it will still use your overridden serialization method.\nThis wasn't the case in Rails 6.0.\nSteps to reproduce\nLet's say I have this class\n#\n# Table name: purchasable_items\n#\n#  id                  :integer          not null, primary key\n#  name                :string(191)      not null\n#  price_cents         :integer          not null\n#  currency            :string(191)      not null\n# index_purchasable_items_on_name_and_currency  (name,currency) UNIQUE\nclass PurchasableItem < ApplicationRecord\n  enumerize :currency, in: [\"USD\", \"KRW\"], predicates: true\nend\nWhen the running the following code\n2.times do |_|\n amount = Money.new(5000, 'KRW')\n PurchasableItem.find_or_create_by!(\n      price_cents: amount.cents,\n      currency: amount.currency,\n      name: \"some_name\",\n  )\nend\nIn Rails 6.0, the following SQL queries are issued for mysql2 adapter\n  [master] PurchasableItem Load (2.1ms)  SELECT `purchasable_items`.* FROM `purchasable_items` WHERE `purchasable_items`.`price_cents` = 5000 AND `purchasable_items`.`currency` = 'KRW' AND `purchasable_items`.`name` = 'some_name' LIMIT 1\n  [master] (1.7ms)  BEGIN\n  [master] PurchasableItem Create (2.4ms)  INSERT INTO `purchasable_items` (`name`, `price_cents`, `currency`) VALUES ('some_name', 5000, 'KRW')\n  [master] (3.8ms)  COMMIT\n  [master] PurchasableItem Load (1.8ms)  SELECT `purchasable_items`.* FROM `purchasable_items` WHERE `purchasable_items`.`price_cents` = 5000 AND `purchasable_items`.`currency` = 'KRW' AND `purchasable_items`.`name` = 'some_name' LIMIT 1\nIn Rails 6.1, the following SQL queries are issued for mysql2 adapter\nPurchasableItem Load (4.9ms)  SELECT `purchasable_items`.* FROM `purchasable_items` WHERE `purchasable_items`.`price_cents` = 5000 AND `purchasable_items`.`currency` = 'krw' AND `purchasable_items`.`name` = 'some_name' LIMIT 1\nTRANSACTION (2.1ms)  BEGIN\nPurchasableItem Create (2.3ms)  INSERT INTO `purchasable_items` (`name`, `price_cents`, `currency`) VALUES ('some_name', 5000, 'KRW')\nTRANSACTION (5.6ms)  COMMIT\nPurchasableItem Load (1.8ms)  SELECT `purchasable_items`.* FROM `purchasable_items` WHERE `purchasable_items`.`price_cents` = 5000 AND `purchasable_items`.`currency` = 'krw' AND `purchasable_items`.`name` = 'some_name' LIMIT 1 \nTRANSACTION (1.8ms)  BEGIN\nPurchasableItem Create (4.4ms)  INSERT INTO `purchasable_items` (`name`, `price_cents`, `currency`) VALUES ('some_name', 5000, 'KRW')\nTRANSACTION (2.8ms)  ROLLBACK\nActiveRecord::RecordNotUnique: Mysql2::Error: Duplicate entry 'some_name-KRW' for key 'index_purchasable_items_on_name_and_currency'\nThis example uses enumerize and money\nHere's the stacktrace from my local for Rails 6.0\n \"/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/money-6.13.2/lib/money/currency.rb:364:in `to_s'\",\n \"/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/enumerize-2.3.1/lib/enumerize/attribute.rb:44:in `find_value'\",\n \"/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/enumerize-2.3.1/lib/enumerize/activerecord.rb:102:in `serialize'\",\n \"/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/activemodel-6.0.6.1/lib/active_model/attribute.rb:55:in `value_for_database'\",\n \"/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/activerecord-6.0.6.1/lib/active_record/relation/query_attribute.rb:13:in `value_for_database'\",\n \"/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/activerecord-6.0.6.1/lib/active_record/statement_cache.rb:53:in `map'\",\n \"/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/activerecord-6.0.6.1/lib/active_record/statement_cache.rb:53:in `sql_for'\",\n \"/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/activerecord-6.0.6.1/lib/active_record/statement_cache.rb:132:in `execute'\",\n \"/Users/rahulagrawal/.rbenv/versions/3.0.5/lib/ruby/gems/3.0.0/gems/activerecord-6.0.6.1/lib/active_record/core.rb:214:in `find_by'\"\nI am not sure if this is internal API that was not supposed to be used.\nExpected behavior\nIdeally, IMO, for non-rails types Rails should either error or simply allow the user to define a way to cast value for database. I tried to read through the code and documentation, but couldn't find a recommended way to be able to pass custom objects to ActiveRecord methods.\nIrrespectively, it looks the behavior varies for insert vs selects.\nActual behavior\nIn Rails 6.1, if you have a PORO which has attr reader :id, Rails will pick up the id as a parameter to SQL conditional clause vs using the defined serialization method (like defining value_for_database), but for inserts it will still use your overridden serialization method.\nSystem configuration\nRails version:\nRails 6.0.6.1\nenumerize-2.3.1\nmoney-6.13.2\nRuby version:\nruby 3.0.5p211 (2022-11-24 revision ba5cf0f7c5) [x86_64-darwin22]", "number_of_comments": 10, "comment_authors": ["rahul342", "skipkayhil", "nickborromeo", "rahul342", "nickborromeo", "rahul342", "rafaelfranca", "nickborromeo", "rafaelfranca", "rafaelfranca"]},
{"title": "Inconsistency between route helpers and url_for expectation in nested routes for resources with the same namespace", "link": "https://github.com/rails/rails/issues/48276", "labels": ["\n                actionpack\n"], "depth": 3, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4762122631072998, "creation_date": "2023-05-22T14:57:57Z", "issue_submitter": "vzelenko", "body": "I'm not sure if this is actually an issue with rails or my misunderstanding of it.  To demonstrate the problem I would have to build a small version of the full application, and I'm happy to do that if requested.\nIf the rails core team agrees this to be an actual issue, I'd be happy to make a PR.\n\nProblem Description\nI have a model (RealEstate::Deal) that has another model (RealEstate::Payment) associated to it via has_many.  They both are stored in directory app/real_estate/*** and have corresponding controllers.\nI use nested routes like this:\n# config/routes.rb\nRails.application.routes.draw do\n  namespace :real_estate do\n    resources :deals do\n      resources :payments\n    end\n  end\nend\nIn the form for entering payment I must generate the url myself:\n<!-- app/views/real_estate/payments/_form.html.erb -->\n<% \n  url = @payment.persisted? ? \n          real_estate_deal_payment_path(@deal, @payment) : \n          real_estate_deal_payemnts_path(@deal) \n%>\n<%= form_for [@deal, @payment], url: url do %>\n  <%# irrelevant code %>\n<% end %>\nExpected behavior\n# url_helper generated from the route definition (`namespace :real_estate { resources :deals { resources :payments } }`):\nreal_estate_deal_payments_path(@deal) || real_estate_deal_payment_path(@deal, @payment) \n\n# url_helper EXPECTED by `url_for(@deal) || url_for(@deal, @payment)` (more specifically, form_for([@deal, @payment]):\nreal_estate_deal_payments_path(@deal) || real_estate_deal_payment_path(@deal, @payment) \nThat is, when the namespace is the same for both objects, only apply it once to the generated url helper.\nActual behavior\n# url_helper generated from the route definition (`namespace :real_estate { resources :deals { resources :payments } }`)\nreal_estate_deal_payments_path(@deal) || real_estate_deal_payment_path(@deal, @payment) \n\n# url_helper EXPECTED by `url_for(@deal) || url_for(@deal, @payment)` (more specifically, form_for([@deal, @payment]):\nreal_estate_deal_real_estate_payments_path(@deal) || real_estate_deal_real_estate_payment_path(@deal, @payment) \nSystem configuration\nRails version:\nRails 7.0.4.3\nRuby version:\nruby 2.7.8p225 (2023-03-30 revision 1f4d455848) [x86_64-darwin22]", "number_of_comments": 6, "comment_authors": ["vzelenko", "hahmed", "vzelenko", "hahmed", "vzelenko", "hahmed"]},
{"title": "Unable to use actioncable with SSR build systems [w/ PR]", "link": "https://github.com/rails/rails/issues/47938", "labels": ["\n                actioncable\n", "\n                attached PR\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6136355400085449, "creation_date": "2023-04-13T22:25:26Z", "issue_submitter": "sirwolfgang", "body": "Steps to reproduce\n\nCreate an App in something like NextJS that has SSR\nCreate a file that uses ActionCable\n\n  import { createConsumer } from '@rails/actioncable'\n\n  const cable = createConsumer()\n\nbuild for errors\n\nError occurred prerendering page \"/accounts\". Read more: https://nextjs.org/docs/messages/prerender-error\nReferenceError: self is not defined\nExpected behavior\nShould not blow up when being used in SSR environments.\nActual behavior\nBlows up when being built in SSR environments\nSystem configuration\nRails version: All\nRuby version: All\nSolution\nh/t @zubairaziz\n// actioncable/adapters.ts\nexport default {\n  logger: typeof globalThis !== 'undefined' ? globalThis.console : undefined,\n  WebSocket: typeof globalThis !== 'undefined' ? globalThis.WebSocket : undefined,\n}", "number_of_comments": 1, "comment_authors": ["sirwolfgang"]},
{"title": "Locals for partials not working on turbo streams as described in docs", "link": "https://github.com/rails/rails/issues/48051", "labels": [], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6136031150817871, "creation_date": "2023-04-24T13:18:07Z", "issue_submitter": "chmich", "body": "Hi\nDocs\non issue 48050 i attached a test project.\nis a different issue, but seems to be related:\nregarding the docs syntax for passing locals to a partial would be like this:\n<%= render partial: \"form\", locals: {zone: @zone} %>\n\nand then inside the partial, just call it by zone.\nRegular rendering works\nFor the controller method dashboard#control1, the only way to get locals to run was:\n@lam = ->{render partial: 'dashboard/test_partial2', locals: {content: 'replace-4'}}\n\nand in the regarding partial just call it like described in the docs:\n<%= content_tag :h1, content %>\n\nand it works!\nDifferent behaviour on turbo-stream\nIf you click on replace3 in the test project mentioned above, you will get the template replace3.turbo_stream.erb rendered, which contains:\n<% lam = ->{render 'dashboard/test_partial', locals: { content: 'replace-3' }} %>\n<%= turbo_stream.replace 'test-replace' do %>\n  <%= lam.call %>\n<% end %>\n\nAnd the only way to access the locale inside the partial `test_partial' was this:\n    <%= content_tag :h1, locals[:content] %>\n\nJust calling content did not work.\nWhen I try to access it as described above, without turbo_stream, just by content, I get the error:\nundefined local variable or method `content' for #<ActionView::Base:0x0000000001ccf0>\n\nNext different behaviour on Turbo::StreamsChannel\nNext, rendering the same partial on Turbo::StreamsChannel, the only way to get the locale to work was to fetch it by local_assings[:content] OR just by content.\nhard to make a workaround\nAt the end i tried to build a helper like that:\n    def _locals(key)\n       k  = key.to_sym\n       (locals[k] rescue false) || local_assigns[k]  rescue nil\n    end\n\nBut, Problem that not locals nor local_assigns can be fetched from a helper\nPlease fix\nFor me it does not matter which way works, but it would be important that the way described in the docs would work in every case.\nThanks, Chris", "number_of_comments": 3, "comment_authors": ["chmich", "chmich", "chmich"]},
{"title": "render not working on lambda/turbo", "link": "https://github.com/rails/rails/issues/48050", "labels": ["\n                stale\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6497392654418945, "creation_date": "2023-04-24T12:53:42Z", "issue_submitter": "chmich", "body": "Hi,\nTo reproduce the error, I have attached a project.\nAssuming the bug is more related to `render', I'll put this question here.\nviews/replace3.turbo_stream.erb\n<% lam = ->{render 'dashboard/test_partial', locals: { content: 'replace-3' }} %>\n<%= turbo_stream.replace 'test-replace' do %>\n  <%= lam.call %>\n<% end %>\n\nworks.\nYou can check it if you open the project, start it from foreman and click replace-3 on the root page.\nThe error\nIf you click replace-4 on the same page, you will see that it does not work:\nThe same lambda is set inside the dashboard#replace4 controller method.\n@lam = ->{render partial: 'dashboard/test_partial', locals: { content: 'replace-4' }}\nand then within the view\n<%= turbo_stream.replace 'test-replace' do %>\n  <%= @lam.call %>\n<% end %>\n\nbreaks.\nSame works without Turbo\nIf you click on control1, the same lambda is set on the controller and rendered in a partial, but without turbo, and @lam.call does what is expected.\nThanks, Chris\ntest-render-lambda.zip", "number_of_comments": 3, "comment_authors": ["chmich", "zzak", "rails-bot"]},
{"title": "find_each have different behavior for different batch_size, with illegitimate has_one association", "link": "https://github.com/rails/rails/issues/47895", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6778948307037354, "creation_date": "2023-04-08T13:07:39Z", "issue_submitter": "yskkin", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :comments, force: true do |t|\n  end\n\n  create_table :post_comments, force: true do |t|\n    t.integer :post_id\n    t.integer :comment_id\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_one :post_comment, dependent: :destroy\n  has_one :comment, through: :post_comment\nend\n\nclass PostComment < ActiveRecord::Base\n  belongs_to :post, dependent: :destroy\n  belongs_to :comment, dependent: :destroy\nend\n\nclass Comment < ActiveRecord::Base\n  has_many :post_comments\n  has_many :post, through: :post_comments\nend\n\nclass BugTest < Minitest::Test\n  def setup\n    bad_post = Post.create!\n    comment = Comment.create!\n    # bad_post has inlegitimate has_one association with post_comment and comment\n    2.times { PostComment.create!(post: bad_post, comment: comment) }\n\n    3.times do\n      post = Post.create!\n      comment = Comment.create!\n      PostComment.create!(post: post, comment: comment)\n    end\n  end\n\n  def teardown\n    Post.destroy_all\n  end\n\n  def test_post_find_each_l000_ok\n    assert_equal 4, Post.includes({ post_comment: :post }, :comment).where(comments: { id: 1.. }).find_each.to_a.count\n  end\n\n  def test_post_find_each_2_ng\n    assert_equal 4, Post.includes({ post_comment: :post }, :comment).where(comments: { id: 1.. }).find_each(batch_size: 2).to_a.count\n  end\nend\nExpected behavior\nBoth test case pass or fail.\nI'm not sure this is a bug or not since there is multiple records in the database for has_one association.\nThis is hard to notice since things work fine when record volume is small with respect to batch_size.\nSome mechanism like warning is desirable even if this is not a bug.\nActual behavior\nOnly test_post_find_each_l000_ok pass.\nSystem configuration\nRails version:\nRuby version: 3.1.2", "number_of_comments": 4, "comment_authors": ["yskkin", "nvasilevski", "yskkin", "rails-bot"]},
{"title": "\"Run pending migrations\" button does not respect multiple migration paths", "link": "https://github.com/rails/rails/issues/47882", "labels": ["\n                activerecord\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7086098194122314, "creation_date": "2023-04-07T00:09:35Z", "issue_submitter": "aedwardg", "body": "The ActionableError page to run pending migrations does not respect multiple migration paths that are otherwise respected by bin/rails db:migrate.\nWe first became aware of this at my company because we use packwerk and packs-rails to help modularize our Rails monolith app. When breaking the app apart into packs, it helps to have migrations live in the same pack as the models that they represent. We used the suggestions in this issue to dynamically add all the packs' migration paths to the application config.\nThe bin/rails db:migrate command respects the application config changes, but the Run pending migrations button does not.\nThis lack of feature parity between the CLI command and the UI button is confusing for developers and can lead to teams having different development environments depending on whether they ran the command or clicked the button.\nI'd be happy to work on a PR to fix this 🙂\nSteps to reproduce\n\nCreate new app\nCreate migration, e.g., generate a model with bin/rails generate model Article title:string body:text\nCreate a subdirectory where you would like other migrations to live, e.g., packs/stories/db/migrate\nCreate another migration and move it to that subdir. e.g., bin/rails generate model Longform title:string body:text\nand move xxxxx_create_longforms.rb from db/migrate -> packs/stories/db/migrate\nInside of your Application class in config/application.rb add the following line:\n config.paths[\"db/migrate\"] << \"packs/stories/db/migrate\"\n\nCheck your migration status: bin/rails db:migrate:status\na. See that you have 2 pending migrations\n\nStart Rails server and go to http://127.0.0.1:3000\na. See that the ActionableError only tells you about one of your migrations\n\nRun migrations with bin/rails db:migrate\na. See that BOTH migrations are run\nRollback the migrations: STEP=2 bin/rails db:rollback\nRestart Rails server and run migrations from the Run pending migrations button in the browser\na. See that only the one migration in db/migrate gets run\n\nExpected behavior\n\nThe actionable error page should list all pending migrations that bin/rails db:migrate:status lists\nClicking the Run pending migrations button should run all migrations that bin/rails db:migrate does\n\nActual behavior\n\nThe actionable error page only lists migrations under the top-level db/migrate directory, no matter how the application is configured.\nClicking the Run pending migrations button only runs migrations located in top-level db/migrate directory\n\nSystem configuration\nRails version: 6.x, 7.x, main branch\nRuby version: 3.1.2, 3.2.0, 3.2.1", "number_of_comments": 4, "comment_authors": ["aedwardg", "hahmed", "RicardoTrindade", "aedwardg"]},
{"title": "Cannot query string columns that use serialize using array of values", "link": "https://github.com/rails/rails/issues/48072", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7099530696868896, "creation_date": "2023-04-26T18:02:47Z", "issue_submitter": "evansalter", "body": "Steps to reproduce\n\nCreate a table with a string column\nAdd a serializer on the column that transforms the string value\nTry to query the model with multiple values (i.e. Model.where(serialized_field: ['value1', 'value2']))\n\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"6.1.7.3\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.string :user_id\n  end\nend\n\nclass Base64Coder\n  def self.dump(value)\n    return unless value\n    Base64.encode64(value)\n  end\n\n  def self.load(value)\n    return unless value\n    Base64.decode64(value)\n  end\nend\n\nclass Post < ActiveRecord::Base\n  serialize :user_id, Base64Coder\nend\n\nclass BugTest < Minitest::Test\n  p1 = Post.create!(user_id: '123')\n  p2 = Post.create!(user_id: '456')\n\n  def test_query_by_single_user_id\n    assert_equal 1, Post.where(user_id: '123').count # Works - returns [p1]\n  end\n\n  def test_query_by_array_of_single_user_ids\n    assert_equal 1, Post.where(user_id: ['123']).count, 1 # Works - returns [p1]\n  end\n\n  def test_query_by_array_of_user_ids\n    assert_equal 2, Post.where(user_id: ['123', '456']).count # Doesn't work - returns []\n  end\n\n  def test_workaround\n    assert_equal 2, Post.where(\"user_id IN (?)\", ['123', '456'].map{|val| Base64.encode64(val)}).count # Works [p1, p2]\n  end\nend\nExpected behavior\nPost.where(user_id: ['123', '456']) works (as it did in v6.0.6.1)\nActual behavior\nPost.where(user_id: ['123', '456']) returns an empty list.\nIf we look at the logs, we can see this is the query that is getting run:\n SELECT COUNT(*) FROM \"posts\" WHERE \"posts\".\"user_id\" IN (?, ?)  [[\"user_id\", \"TVRJego=\\n\"], [\"user_id\", \"TkRVMgo=\\n\"]]\n\nThe issue is that the values are getting serialized twice before getting passed into the query:\n[15] pry(main)> user_id = '123'\n=> \"123\"\n[16] pry(main)> Base64.encode64(user_id)\n=> \"MTIz\\n\"\n[17] pry(main)> Base64.encode64(\"MTIz\\n\")\n=> \"TVRJego=\\n\"\nSystem configuration\nRails version: 6.1.7.3\nRuby version: 2.6", "number_of_comments": 5, "comment_authors": ["evansalter", "fatkodima", "evansalter", "fatkodima", "rails-bot"]},
{"title": "Forms with file input now default to accepting 0 files", "link": "https://github.com/rails/rails/issues/48006", "labels": ["\n                activestorage\n", "\n                docs\n", "\n                good first issue\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7416665554046631, "creation_date": "2023-04-21T01:58:20Z", "issue_submitter": "shamas-", "body": "Steps to reproduce\n<%= form.file_field name, multiple: true, direct_upload: true %>\nExpected behavior\n<input multiple=\"multiple\" data-direct-upload-url=\"http://localhost:3000/rails/active_storage/direct_uploads\" type=\"file\" name=\"name1[name2][]\" id=\"name1_name2_files\">\n\nActual behavior\n<input name=\"name1[name2][]\" type=\"hidden\" value=\"\" autocomplete=\"off\">\n<input multiple=\"multiple\" data-direct-upload-url=\"http://localhost:3000/rails/active_storage/direct_uploads\" type=\"file\" name=\"name1[name2][]\" id=\"name1_name2_files\">\n\nThe documentation says that the hidden input is only output if include_hidden: true is present. However, it is also output even if the include_hidden key is entirely absent. The problem with this is that it turns forms that were designed to require 1+ files into forms that submit successfully with 0+.\ninclude_hidden was not present in 6.1 documentation.\nSystem configuration\nRails version: 7.0.4.3\nRuby version: 3.0", "number_of_comments": 5, "comment_authors": ["shamas-", "ghiculescu", "alexpapworth", "ghiculescu", "alexpapworth"]},
{"title": "Automatic Filtering Params Named as Encrypted Columns does not filter params of child models or when params are nested", "link": "https://github.com/rails/rails/issues/47913", "labels": ["\n                attached PR\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7696657180786133, "creation_date": "2023-04-11T05:20:58Z", "issue_submitter": "annettemmm", "body": "Found two unexpected behaviors w/r/t automatic filtering of encrypted columns. Encrypted columns are configured to be automatically filtered in Rails logs BUT\n\nmodels that inherit from a model with encrypted columns do not have the corresponding parameters filtered in the Rails logs\nwhen a model with encrypted columns is passed as_nested_paramaters, the parameters are not filtered in the Rails logs\n\nCase 1: inheritance\nSteps to reproduce\nclass User < ActiveRecord::Base\n  encrypts(:email)\nend\n\nclass SpecialUser < User\nend\npost with params: {email: 'secret@shh.com'}\nExpected behavior\nemail value would be filtered out in logs for User & SpecialUser\nActual behavior\nparams for User will get correctly filtered in the logs, e.g. Parameters: {\"user\"=>{\"email\"=>\"[FILTERED]\"}}\nparams for Special will not e.g. Parameters: {\"special_user\"=>{\"email\"=>\"secret@shh.com\"}}\nCase 2: nested parameters\nclass User < ActiveRecord::Base\n  encrypts(:email)\n\n  belongs_to :organization\nend\n\nclass Organization < ActiveRecord::Base\n  has_one :user\n  accepts_nested_attributes_for :user\nend\npost to organizations with params: {users_attributes: {new0: {email: 'secret@shh.com'}}}\nExpected behavior\nemail value would be filtered out in Rail logs\nActual behavior\nemail not filtered out e.g. Parameters: {\"organization\"=>{\"user_attributes\"=>{\"email\"=>\"secret@shh.com\"}}}\nSystem configuration\nRails version: Rails 7.0.4.3\nRuby version: ruby 3.2.1 (2023-02-08 revision 31819e82c8) [arm64-darwin21]\nWhy Issue?\nTo address issues, one can explicitly add special_user.email & user_attributes.email to filtered parameters, but it was definitely unexpected for me that nested attributes & child models were not being filtered in the logs. If this is the intended behavior I think there should at least be a warning in the docs.\nWhy Happening?\nBoth behaviors stem from the how encrypts add the encrypted columns to application.config.filter_parameters:\n\n\n\nrails/activerecord/lib/active_record/encryption/configurable.rb\n\n\n        Lines 52 to 58\n      in\n      7c41d97\n\n\n\n\n\n\n ActiveRecord::Encryption.on_encrypted_attribute_declared do |klass, encrypted_attribute_name| \n\n\n\n filter_parameter = [(\"#{klass.model_name.element}\" if klass.name), encrypted_attribute_name.to_s].compact.join(\".\") \n\n\n\n unless excluded_from_filter_parameters?(filter_parameter) \n\n\n\n application.config.filter_parameters << filter_parameter \n\n\n\n klass.filter_attributes += [encrypted_attribute_name] \n\n\n\n end \n\n\n\n end \n\n\n\n\n\nin the example above, when User encrypts(:email), 'user.email' will be added to application.config.filter_parameters and so will not match & filter {\"special_user\" => {\"email\"=>\"secret@shh.com\"}} or {\"user_attributes\"=>{\"email\"=> \"secret@shh.com\"}}\nmy chill-enough local fix\nI was able to generate the behavior I wanted with\nclass ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  extend MyFilteredParams\nend\n\nmodule MyFilteredParams\n  def encrypts(*names, **options)\n    Rails.application.config.filter_parameters += names.map { |x| /^#{x}$/ }\n    super\n  end\nend\nsuper for MyFilteredParams.encrypts: \n\n\nrails/activerecord/lib/active_record/encryption/encryptable_record.rb\n\n\n        Lines 45 to 53\n      in\n      b96ddea\n\n\n\n\n\n\n def encrypts(*names, key_provider: nil, key: nil, deterministic: false, downcase: false, ignore_case: false, previous: [], **context_properties) \n\n\n\n self.encrypted_attributes ||= Set.new # not using :default because the instance would be shared across classes \n\n\n\n scheme = scheme_for key_provider: key_provider, key: key, deterministic: deterministic, downcase: downcase, \\ \n\n\n\n ignore_case: ignore_case, previous: previous, **context_properties \n\n\n\n \n\n\n\n names.each do |name| \n\n\n\n encrypt_attribute name, scheme \n\n\n\n end \n\n\n\n end \n\n\n\n\n\nThis adds '/^email$/' to filter parameters, not scoped to anything, so it would correctly filter logs {\"special_user\" => {\"email\"=>\"[FILTERED]\"}} or {\"user_attributes\"=>{\"email\"=> \"[FILTERED]\"}}\nBUT\nit would also filter any attribute 'email' on any model. For my purposes that's chill because I'd rather over- than under-filter, but it's not a perfect solution.", "number_of_comments": 4, "comment_authors": ["annettemmm", "fatkodima", "jorgemanrubia", "annettemmm"]},
{"title": "Inverses are not properly set for belongs_to associations using foreign keys and scopes", "link": "https://github.com/rails/rails/issues/47574", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                With reproduction steps\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.48166608810424805, "creation_date": "2023-03-03T23:17:35Z", "issue_submitter": "andrewberls", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  # See note; bug was introduced in 6.1.0 and persists through HEAD\n  gem \"activerecord\", \"~> 6.1.7.2\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :authors, force: true do |t|\n    t.string :token\n  end\n\n  create_table :posts, force: true do |t|\n    t.string :author_token\n    t.string :status\n  end\nend\n\nclass Author < ActiveRecord::Base\n  has_one :post,\n    -> { where(status: 'published') },\n    primary_key: :token,\n    foreign_key: :author_token,\n    inverse_of: :author\nend\n\nclass Post < ActiveRecord::Base\n  belongs_to :author,\n    primary_key: :token,\n    foreign_key: :author_token\nend\n\nclass BugTest < Minitest::Test\n  def test_inversing\n    author = Author.create!(token: 'A-123')\n    Post.create!(author: author, status: 'published')\n\n    assert_equal author.post.author.object_id, author.object_id\n  end\nend\nI also have a skeleton repo demonstrating this issue here, with branches showing failure for versions >= 6.1.0.\nExpected behavior\nThe Post#author association should be inversed, and author.post.author.object_id should exactly equal author.object_id\nActual behavior\nThe association does not inverse and the DB is queried to retrieve post.author.\nI believe the bug was introduced in c6f4656 as part of 6.1.0, and exists through HEAD as the code has not changed. In this instance we can see are comparing the foreign key attribute (token) to the ID here, which clearly fails and thus the association is not properly considered inversable?.\nComparing instead to record.send(reflection.association_primary_key) may fix although I am not familiar with Rails internals and would need some assistance to submit a properly-scoped and tested PR.\nThe bug is NOT observed in the absence of a scope; specifically only the set_inverse_instance_from_queries pathway  seems to demonstrate the bug.\nSystem configuration\nRails version: The spec demonstrates 6.1.7.2 but fails beginning at 6.1.0 and persists through HEAD\nRuby version: 2.7.6 (bug also present on 3.0.x)\nThank you!", "number_of_comments": 2, "comment_authors": ["andrewberls", "nickborromeo"]},
{"title": "has_one associated object saved twice and clears saved_changes", "link": "https://github.com/rails/rails/issues/48077", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.144820213317871, "creation_date": "2023-04-27T08:34:19Z", "issue_submitter": "briu", "body": "Steps to reproduce\nbegin\n  require \"bundler/inline\"\nrescue LoadError => e\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\n  raise e\nend\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :users do |t|\n    t.integer :published_posts_count, default: 0\n    t.timestamps\n  end\n\n  create_table :posts do |t|\n    t.integer :user_id\n    t.integer :poll_id\n    t.string :title\n    t.string :status, default: 'unreleased'\n    t.datetime :release_at\n    t.timestamps\n  end\n\n  create_table :polls do |t|\n    t.boolean :multiple\n    t.timestamps\n  end\nend\n\nclass User < ActiveRecord::Base\n  has_many :posts\nend\n\nclass Post < ActiveRecord::Base\n  belongs_to :user\n  belongs_to :poll\n\n  after_commit :test_after_commit\n  # after_save :test_after_commit saved_changes here are exists\n  after_save :test_after_save\n\n  attr_reader :after_save_counter\n\n  def test_after_commit\n    # saved_changes here are blank\n    if saved_change_to_status?(to: 'published')\n      user.increment(:published_posts_count)\n    end\n  end\n\n  def test_after_save\n    # invokes twice when saved with belongs_to association\n    @after_save_counter ||= 0\n    @after_save_counter += 1\n  end\nend\n\nclass Poll < ActiveRecord::Base\n  has_one :post\nend\n\nclass BugTest < Minitest::Test\n  def setup\n    Post.destroy_all\n    Poll.destroy_all\n  end\n\n  def test_creating_post_with_poll_and_poll_options\n    user = User.create\n\n    post = Post.new(\n      user: user,\n      title: 'yoyo',\n      status: 'published'\n    )\n\n    post.poll = Poll.new(multiple: true)\n\n    post.save\n\n    # after_save invokes twice\n    assert_equal 2, post.after_save_counter\n    assert_equal 1, user.published_posts_count\n  end\n\n  def test_creating_post_with_poll_only\n    user = User.create\n\n    post = Post.new(user: user, title: 'yoyo', status: 'published')\n    post.save\n\n    # after_save invokes once as expected\n    assert_equal 1, post.after_save_counter\n    assert_equal 1, user.published_posts_count\n  end\nend\n\nExpected behavior\npost.saved_changes are available in after_commit callback, also after_save callback invokes only once\nActual behavior\npost.saved_changes are blank in after_commit callback\nSystem configuration\nRails version: main branch\nRuby version:  ruby 3.2.2 (2023-03-30 revision e51014f9c0) [arm64-darwin21]", "number_of_comments": 1, "comment_authors": ["briu"]},
{"title": "AR's before_last_save tracking wrong for nested callback", "link": "https://github.com/rails/rails/issues/47695", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0728895664215088, "creation_date": "2023-03-16T18:41:47Z", "issue_submitter": "MaxLap", "body": "Nested callback executions in ActiveRecord (ex: a after_save does a update, which trigger another chain of callbacks) have a weird (IMO wrong) interaction with the saved_change_to_*?, saved_changes, *_before_last_save and friends.\nThe behavior changed in Rails 5.1. Rails 5.0's behavior was more intuitive.\nSteps to reproduce\n( I got repro scripts below )\n\n\nA model with 2 attributes, ex: name and foo\n\n\nHave a after_save (or any other after_something) that does an update to foo of the model (with a condition, so that you don't get infinite recursion). Ex: update(foo: 1) if foo != 1\n\n\nHave another after_save (called after the one in (1)) which checks if the other attribute was changed. Ex: $saw_saved_change_to_name = true if saved_change_to_name?\n\n\nCreate an instance setting only the name: Ex: Post.create(name: 'hi')\n\n\nThe second callback will never see saved_change_to_name? as true, because the first callback, triggering anothere save, fully overwrites the tracking.\nI added a print of the saved_changes in the test to show what's going on. There is a failing script for main and 5.1, and a passing one for 5.0.\nHere is the failing case in main:\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\", '~> 1.4'\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.text :name\n    t.integer :foo\n  end\nend\n\nclass Post < ActiveRecord::Base\n  after_save :set_foo_after_save\n  after_save :check_saved_change_to_name\n\n  def set_foo_after_save\n    update(foo: 1) if foo != 1\n  end\n\n  def check_saved_change_to_name\n    puts \"* Saved changes: #{saved_changes}\"\n    $saw_saved_change_to_name = true if saved_change_to_name?\n  end\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    post = Post.create!(name: 'hi')\n\n    assert($saw_saved_change_to_name)\n  end\nend\n* Saved changes: {\"foo\"=>[nil, 1]}\n* Saved changes: {\"foo\"=>[nil, 1]}\nExpected nil to be truthy\n\nHere is the failing case in 5.1:\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"5.1.7\"\n  gem \"sqlite3\", '1.3.13'\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.text :name\n    t.integer :foo\n  end\nend\n\nclass Post < ActiveRecord::Base\n  after_save :set_foo_after_save\n  after_save :check_saved_change_to_name_after_save\n\n  def set_foo_after_save\n    update(foo: 1) if foo != 1\n  end\n\n  def check_saved_change_to_name_after_save\n    puts \"* Saved changes: #{saved_changes}\"\n    $saw_saved_change_to_name = true if saved_change_to_name?\n  end\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    post = Post.create!(name: 'hi')\n\n    assert($saw_saved_change_to_name)\n  end\nend\n* Saved changes: {\"foo\"=>[nil, 1]}\n* Saved changes: {\"foo\"=>[nil, 1]}\nExpected nil to be truthy\n\nAnd here is the passing case in 5.0, which was before Rails switched to saved_change_to_*? and friends:\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"5.0.7.2\"\n  gem \"sqlite3\", '1.3.13'\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.text :name\n    t.integer :foo\n  end\nend\n\nclass Post < ActiveRecord::Base\n  after_create :set_foo_after_save\n  after_save :check_saved_change_to_name_after_save\n\n  def set_foo_after_save\n    update(foo: 1) if foo != 1\n  end\n\n  def check_saved_change_to_name_after_save\n    puts \"* Saved changes: #{changes}\"\n    $saw_saved_change_to_name = true if name_changed?\n  end\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    post = Post.create!(name: 'hi')\n\n    assert($saw_saved_change_to_name)\n  end\nend\n* Saved changes: {\"id\"=>[nil, 1], \"name\"=>[nil, \"hi\"], \"foo\"=>[nil, 1]}\n* Saved changes: {}\nPasses the test\n\nExpected behavior\nI expect a  after_* callback that reacts to saved_change_to_*? to be called at least once with said change of true when the attribute gets changed.\nActual behavior\nThe callback never gets called with saved_change_to_name? being true because the nested change\nIn my opinion, the priority should be on handling the 1st expected behavior\nThis means that if I make code with such a callback, everything could work, and someone doing a nested update in a different callback could completely break the first callback.\nSystem configuration\nRails version: 5.1, main\nRuby version: 2.4 and 3.1", "number_of_comments": 4, "comment_authors": ["MaxLap", "nickborromeo", "MaxLap", "abhisheksarka"]},
{"title": "unscope not working when where by tripe dot range", "link": "https://github.com/rails/rails/issues/48094", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.1498136520385742, "creation_date": "2023-04-29T07:34:00Z", "issue_submitter": "ippachi", "body": "Steps to reproduce\n\nwhere by triple dot range\nunscope 1.\n\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"~> 7.0.0\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\nend\n\nclass Post < ActiveRecord::Base\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    Post.create!(id: 1)\n    Post.create!(id: 2)\n    Post.create!(id: 3)\n\n    assert_equal 3, Post.where(id: 1..2).unscope(where: :id).count # double dot is working\n    assert_equal 3, Post.where(id: 1...2).unscope(where: :id).count # triple dot is not working\n  end\nend\nExpected behavior\nPost.where(id: 1...2).unscope(where: :id) returns 3\nActual behavior\nPost.where(id: 1...2).unscope(where: :id) returns 1\nSystem configuration\nRails version: 7.0.4.3\nRuby version: 3.2.2", "number_of_comments": 2, "comment_authors": ["ippachi", "Onkar26"]},
{"title": "The action: option specified for a route under scope with action: is ignored", "link": "https://github.com/rails/rails/issues/47576", "labels": ["\n                attached PR\n", "\n                With reproduction steps\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.128614902496338, "creation_date": "2023-03-04T15:25:05Z", "issue_submitter": "YusukeTakeuchi", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"rails\", \"~> 7.0.0\"\nend\n\nrequire \"rack/test\"\nrequire \"action_controller/railtie\"\n\nclass TestApp < Rails::Application\n  config.root = __dir__\n  config.hosts << \"example.org\"\n  config.session_store :cookie_store, key: \"cookie_store_key\"\n  secrets.secret_key_base = \"secret_key_base\"\n\n  config.logger = Logger.new($stdout)\n  Rails.logger  = config.logger\n\n  routes.draw do\n    resources :tests do\n      scope action: :scope_action do\n        get :foo, action: :foo_action\n      end\n    end\n  end\nend\n\nclass TestsController < ActionController::Base\n  include Rails.application.routes.url_helpers\n\n  def foo_action\n    render plain: \"Home\"\n  end\n\n  def scope_action\n    raise 'scope_action called'\n  end\nend\n\nrequire \"minitest/autorun\"\n\nclass BugTest < Minitest::Test\n  include Rack::Test::Methods\n\n  def test_returns_success\n    get \"/tests/2/foo\"\n    assert last_response.ok?\n  end\n\n  private\n    def app\n      Rails.application\n    end\nend\nExpected behavior\nTestsController#foo_action is called and returns ok.\nActual behavior\nTestsController#scope_action is called.\nI, [2023-03-05T00:04:39.266468 #38680]  INFO -- : Started GET \"/tests/2/foo\" for 127.0.0.1 at 2023-03-05 00:04:39 +0900\nF, [2023-03-05T00:04:39.414911 #38680] FATAL -- :   \nRuntimeError (scope_action called):\n\nSystem configuration\nRails version: 7.0.4.2\nRuby version: 3.0.4", "number_of_comments": 1, "comment_authors": ["YusukeTakeuchi"]},
{"title": "Weird interaction between AS::Concern and Module#ancestors", "link": "https://github.com/rails/rails/issues/47699", "labels": [], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7949378490447998, "creation_date": "2023-03-16T21:13:11Z", "issue_submitter": "fxn", "body": "If you throw this file into an application:\n# app/models/foo.rb\nmodule Foo\n  extend ActiveSupport::Concern\nend\n\nmodule Bar\n  extend ActiveSupport::Concern\n  include Foo\n  p ancestors\nend\nThe command bin/rails r Foo prints [Bar], but it should be [Bar, Foo]. You get the correct result if Foo does not extend AS::Concern.", "number_of_comments": 8, "comment_authors": ["fxn", "matthewd", "byroot", "matthewd", "fxn", "fxn", "abrisse", "jan-vitek"]},
{"title": "add_foreign_key should support composite primary_key", "link": "https://github.com/rails/rails/issues/47593", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0898935794830322, "creation_date": "2023-03-07T13:08:27Z", "issue_submitter": "jiridenteo", "body": "add_foreign_key now accepts an argument primary_key and it is also possible to send in an array. however, only the first element from the array is taken.\nTo support multitenancy, it should be possible to send in a composite primary key, eg.\nadd_foreign_key :from, :to, primary_key: [:tenant_id, :id]", "number_of_comments": 13, "comment_authors": ["jiridenteo", "fatkodima", "jiridenteo", "fatkodima", "jiridenteo", "eileencodes", "nvasilevski", "fatkodima", "nvasilevski", "fatkodima", "eileencodes", "fatkodima", "shobee"]},
{"title": "AnalyzeJob with vips fails (jpegload: parameter filename not set)", "link": "https://github.com/rails/rails/issues/48186", "labels": ["\n                third party issue\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.1296546459197998, "creation_date": "2023-05-10T12:56:56Z", "issue_submitter": "kg-currenxie", "body": "Steps to reproduce\nUpload a jpg file with a default ActiveStorage setup (but with AWS S3), with a normal form and file_field.\nFYI: The image works fine to render after uploading in an image_tag\nThe blob's metadata becomes {\"identified\":true,\"analyzed\":true}\nExpected behavior\nThe analyze job should work, adding width and height metadata\nActual behavior\nKey line  20:23:53 web.1  | [ActiveJob] [ActiveStorage::AnalyzeJob] [2ab2d5d6-3997-415d-937e-19f6253b1e78] Skipping image analysis due to an Vips error: jpegload: parameter filename not set\n20:23:53 web.1  | [ActiveJob] [ActiveStorage::AnalyzeJob] [2ab2d5d6-3997-415d-937e-19f6253b1e78]   S3 Storage (2705.0ms) Downloaded file from key: gmge8yk8zykhrtowf5shoi7hhpiz\n20:23:53 web.1  |\n20:23:53 web.1  | (process:53709): GLib-CRITICAL **: 20:23:53.676: g_datalist_id_set_data_full: assertion 'key_id > 0' failed\n20:23:53 web.1  |\n20:23:53 web.1  | (process:53709): GLib-GObject-CRITICAL **: 20:23:53.676: g_param_spec_pool_lookup: assertion 'pool != NULL' failed\n20:23:53 web.1  |\n20:23:53 web.1  | (process:53709): GLib-GObject-WARNING **: 20:23:53.676: g_object_set_is_valid_property: object class '(null)' has no property named 'filename'\n20:23:53 web.1  |\n20:23:53 web.1  | (process:53709): GLib-CRITICAL **: 20:23:53.676: g_datalist_id_set_data_full: assertion 'key_id > 0' failed\n20:23:53 web.1  |\n20:23:53 web.1  | (process:53709): GLib-GObject-CRITICAL **: 20:23:53.676: g_param_spec_pool_lookup: assertion 'pool != NULL' failed\n20:23:53 web.1  |\n20:23:53 web.1  | (process:53709): GLib-GObject-WARNING **: 20:23:53.676: g_object_set_is_valid_property: object class '(null)' has no property named 'access'\n20:23:53 web.1  | [ActiveJob] [ActiveStorage::AnalyzeJob] [2ab2d5d6-3997-415d-937e-19f6253b1e78] Skipping image analysis due to an Vips error: jpegload: parameter filename not set\n20:23:53 web.1  |\n20:23:53 web.1  | [ActiveJob] [ActiveStorage::AnalyzeJob] [2ab2d5d6-3997-415d-937e-19f6253b1e78]   TRANSACTION (0.5ms)  BEGIN\n20:23:53 web.1  | [ActiveJob] [ActiveStorage::AnalyzeJob] [2ab2d5d6-3997-415d-937e-19f6253b1e78]   ActiveStorage::Blob Update (0.4ms)  UPDATE \"active_storage_blobs\" SET \"metadata\" = $1 WHERE \"active_storage_blobs\".\"id\" = $2  [[\"metadata\", \"{\\\"identified\\\":true,\\\"analyzed\\\":true}\"], [\"id\", \"f9d5e9e7-8882-4cc2-9078-e4cb878fae08\"]]\n20:23:53 web.1  | [ActiveJob] [ActiveStorage::AnalyzeJob] [2ab2d5d6-3997-415d-937e-19f6253b1e78]   TRANSACTION (0.8ms)  COMMIT\n20:23:53 web.1  | [ActiveJob] [ActiveStorage::AnalyzeJob] [2ab2d5d6-3997-415d-937e-19f6253b1e78] Performed ActiveStorage::AnalyzeJob (Job ID: 2ab2d5d6-3997-415d-937e-19f6253b1e78) from Async(active_storage_analysis) in 4129.6ms\n\nLooks like it comes from here:\n\n\n\nrails/activestorage/lib/active_storage/analyzer/image_analyzer/vips.rb\n\n\n         Line 22\n      in\n      8d56a0e\n\n\n\n\n\n\n ::Vips::Image.new_from_file(file.path, access: :sequential) \n\n\n\n\n\nSystem configuration\nRails version: 7.0.4.3\nRuby version: 3.1.4\nlibvips: vips-8.14.2 (brew install vips)", "number_of_comments": 9, "comment_authors": ["kg-currenxie", "rishijain", "kg-currenxie", "hahmed", "kg-currenxie", "JoeDupuis", "kg-currenxie", "JoeDupuis", "kg-currenxie"]},
{"title": "Route constraints with an array do not allow building a path only parsing a path.", "link": "https://github.com/rails/rails/issues/47726", "labels": ["\n                actionpack\n", "\n                attached PR\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3778324127197266, "creation_date": "2023-03-21T20:16:22Z", "issue_submitter": "urkle", "body": "Steps to reproduce\n# Given a route like this.\nMyApplication::Application.routes.draw do\n    get '/download/:platform' => 'download#platform',\n        constraints: {\n          platform: %w[windows linux macos],\n        },\n        as: :download_platform\nend\nExpected behavior\nRouting test (rspec)\nexpect(get(\"/download/windows\")).to route_to('download#platform',\n                                                         platform: platform)\nurl building test (rspec)\ndef some_function(platform)\n    download_platform_path(platform: platform)\nend\n\nexpect(some_function('windows')).to eq(download_platform_path('windows'))\nActual behavior\nThe routing spec passes, but the url building test fails with a No route matches ... possible unmatched constraints: [:platform] error.\nHowever,\nIf I change the constraint to this\nMyApplication::Application.routes.draw do\n    get '/download/:platform' => 'download#platform',\n        constraints: {\n          platform: /(windows|linux|macos)/,\n        },\n        as: :download_platform\nend\nboth pass correctly.\nSystem configuration\nRails version: 2.7.3\nRuby version: 6.0.5", "number_of_comments": 6, "comment_authors": ["urkle", "dorianmariefr", "dorianmariefr", "dorianmariefr", "dorianmariefr", "dorianmariefr"]},
{"title": "Selenium WebDriver version 4.8 does not allow passing the URL to the driver anymore (actionpack)", "link": "https://github.com/rails/rails/issues/47706", "labels": ["\n                docs\n", "\n                third party issue\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4252219200134277, "creation_date": "2023-03-17T20:25:38Z", "issue_submitter": "Martouta", "body": "Summary\nIn my ApplicationSystemTestCase, An ArgumentError is thrown when initializing Selenium::WebDriver::Chrome::Driver (in the driven_by) with the :url option in selenium-webdriver version 4.8.1. This issue was introduced intentionally in a recent commit.\nSteps to reproduce\nGiven an ApplicationSystemTestCase such as the following:\nrequire 'test_helper'\nrequire 'selenium-webdriver'\n\nclass ApplicationSystemTestCase < ActionDispatch::SystemTestCase\n  driven_by :selenium, using: :headless_chrome, options: { url: 'http://localhost:4444/wd/hub' } do |option|\n    option.add_argument('no-sandbox')\n  end\nend\nUsing selenium-webdriver version 4.8.1 (I guess it is the same with 4.8.0 as I will explain briefly).\nThe tests fail (in CircleCI) with this error log:\nError:\nMainSystemTest#test_#root_&_#home:\nArgumentError: Can't initialize Selenium::WebDriver::Chrome::Driver with :url\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/selenium-webdriver-4.8.1/lib/selenium/webdriver/chrome/driver.rb:32:in `initialize'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/selenium-webdriver-4.8.1/lib/selenium/webdriver/common/driver.rb:47:in `new'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/selenium-webdriver-4.8.1/lib/selenium/webdriver/common/driver.rb:47:in `for'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/selenium-webdriver-4.8.1/lib/selenium/webdriver.rb:88:in `for'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/capybara-3.38.0/lib/capybara/selenium/driver.rb:83:in `browser'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/actionpack-7.0.4.3/lib/action_dispatch/system_testing/driver.rb:64:in `block in register_selenium'\n    <internal:kernel>:90:in `tap'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/actionpack-7.0.4.3/lib/action_dispatch/system_testing/driver.rb:63:in `register_selenium'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/actionpack-7.0.4.3/lib/action_dispatch/system_testing/driver.rb:49:in `block in register'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/capybara-3.38.0/lib/capybara/session.rb:105:in `driver'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/capybara-3.38.0/lib/capybara/session.rb:91:in `initialize'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/capybara-3.38.0/lib/capybara.rb:421:in `new'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/capybara-3.38.0/lib/capybara.rb:421:in `block in session_pool'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/capybara-3.38.0/lib/capybara.rb:317:in `current_session'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/capybara-3.38.0/lib/capybara/dsl.rb:46:in `page'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/actionpack-7.0.4.3/lib/action_dispatch/system_testing/test_helpers/screenshot_helper.rb:99:in `save_image'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/actionpack-7.0.4.3/lib/action_dispatch/system_testing/test_helpers/screenshot_helper.rb:36:in `take_screenshot'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/actionpack-7.0.4.3/lib/action_dispatch/system_testing/test_helpers/screenshot_helper.rb:45:in `take_failed_screenshot'\n    /root/.rbenv/versions/3.2.0/lib/ruby/gems/3.2.0/gems/actionpack-7.0.4.3/lib/action_dispatch/system_testing/test_helpers/setup_and_teardown.rb:8:in `before_teardown'\n\nrails test test/system/main_system_test.rb:22\n\nI would expect it to work as it was working with selenium-webdriver version 4.7.1 for this line:\n\n\n\nrails/actionpack/lib/action_dispatch/system_testing/driver.rb\n\n\n         Line 16\n      in\n      18e53fb\n\n\n\n\n\n\n gem \"selenium-webdriver\", \">= 4.0.0\" \n\n\n\n\n\nBut the reason it fails is that they introduced this exception intentionally in this commit:\nSeleniumHQ/selenium@08ee2d9\nLooking at the date of that commit, I am guessing that the exception is also introduced in version 4.8.0 although I haven't tried this one, based on the release dates:\n\nI see that your tests right now assume that the URL can be passed:\n\n\n\nrails/actionpack/test/dispatch/system_testing/driver_test.rb\n\n\n        Lines 13 to 29\n      in\n      29441c0\n\n\n\n\n\n\n test \"initializing the driver with a browser\" do \n\n\n\n driver = ActionDispatch::SystemTesting::Driver.new(:selenium, using: :chrome, screen_size: [1400, 1400], options: { url: \"http://example.com/wd/hub\" }) \n\n\n\n assert_equal :selenium, driver.instance_variable_get(:@driver_type) \n\n\n\n assert_equal :chrome, driver.instance_variable_get(:@browser).name \n\n\n\n assert_nil driver.instance_variable_get(:@browser).options \n\n\n\n assert_equal [1400, 1400], driver.instance_variable_get(:@screen_size) \n\n\n\n assert_equal ({ url: \"http://example.com/wd/hub\" }), driver.instance_variable_get(:@options) \n\n\n\n end \n\n\n\n \n\n\n\n test \"initializing the driver with a headless chrome\" do \n\n\n\n driver = ActionDispatch::SystemTesting::Driver.new(:selenium, using: :headless_chrome, screen_size: [1400, 1400], options: { url: \"http://example.com/wd/hub\" }) \n\n\n\n assert_equal :selenium, driver.instance_variable_get(:@driver_type) \n\n\n\n assert_equal :headless_chrome, driver.instance_variable_get(:@browser).name \n\n\n\n assert_instance_of Selenium::WebDriver::Chrome::Options, driver.instance_variable_get(:@browser).options \n\n\n\n assert_equal [1400, 1400], driver.instance_variable_get(:@screen_size) \n\n\n\n assert_equal ({ url: \"http://example.com/wd/hub\" }), driver.instance_variable_get(:@options) \n\n\n\n end \n\n\n\n\n\nSystem configuration\nYou can see all the versions I am using for the log backtrace, but anyway:\nRails version: 7.0.4.3\nRuby version: 3.2.0", "number_of_comments": 9, "comment_authors": ["Martouta", "dorianmariefr", "dorianmariefr", "dorianmariefr", "Martouta", "hahmed", "hahmed", "rails-bot", "dorianmariefr"]},
{"title": "belongs_to relation SQL merges with and overwrites the default_scope", "link": "https://github.com/rails/rails/issues/47558", "labels": ["\n                activerecord\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4217803478240967, "creation_date": "2023-03-02T16:11:47Z", "issue_submitter": "JeremyC-za", "body": "Steps to reproduce\nI've only tested this with a belongs_to relation, I'm not sure if there are similar issues with other relations. It looks like the default scope conditions are being merged with and overwritten by the relation sql conditions when they are dealing with the same column (most commonly id).\nI have seen from this commit that the intended behaviour going forward is that the latter condition replaces former, but it doesn't seem like that makes sense in the case of the default scope. I'd expect the default scope to take precedence.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # gem \"rails\", github: \"rails/rails\", branch: \"6-0-stable\"\n  # gem \"rails\", github: \"rails/rails\", branch: \"6-1-stable\"\n  # gem \"rails\", github: \"rails/rails\", branch: \"7-0-stable\"\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\n  gem \"pry\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\n\n  # The same scope defined in different ways.\n  SCOPES = {\n    scope_1: -> { $scope_active ? where(table[:id].eq(20)) : nil },\n    scope_2: -> { $scope_active ? where(table[\"id\"].eq(20)) : nil },\n    scope_3: -> { $scope_active ? where(id: 20) : nil },\n    scope_4: -> { $scope_active ? where(\"id\" => 20) : nil },\n    scope_5: -> { $scope_active ? where(\"id = ?\", 20) : nil },\n    scope_6: -> { $scope_active ? where(\"id IN (?)\", [20]) : nil },\n    scope_7: -> { $scope_active ? where(\"#{self.klass.table_name}.id = ?\", 20) : nil },\n  }\n\n  def self.set_default_scope(scope_key)\n    default_scope SCOPES[scope_key]\n  end\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\nend\n\nclass BugTest < Minitest::Test\n  def test_default_scope_bug\n    # Default unscoped case\n    $scope_active = false\n    post = Post.create!\n    comment = Comment.create!(post_id: post.id)\n    assert Post.find_by_id(post.id)\n    assert Comment.find(comment.id).post\n\n    # Test each default scope\n    $scope_active = true\n    Post::SCOPES.keys.each do |scope_key|\n      puts scope_key\n      Post.default_scopes = [] # Clear them each time.\n      Post.set_default_scope(scope_key)\n\n      assert_nil Post.find_by_id(post.id), \"Post should be scoped to id == 20 (#{scope_key})\"\n      assert_nil Comment.find(comment.id).post, \"Relation sql should not overwrite default scope (#{scope_key})\"\n    end\n  end\nend\nExpected behavior\nI'd expect the Post that was created at the beginning of the test (with id == 1) should never be reachable due to the default scope restricting all queries to id == 20. This should apply when selecting the Post directly, and through the Comment's relation.\nActual behavior\nFinding the Post directly does respect the default scope, but comment.post ignores (merges and overwrites) it. This is the SQL from the final two assert_nil commands for scope_1:\n-- Post.find_by_id(post.id)\nPost Load (0.1ms)  SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"id\" = 20 AND \"posts\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]]\n\n-- Comment.find(comment.id).post\nComment Load (0.0ms)  SELECT \"comments\".* FROM \"comments\" WHERE \"comments\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]]\nPost Load (0.0ms)  SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]]\nSystem configuration\nRails version: >= 6.0\nRuby version: 2.7.0", "number_of_comments": 3, "comment_authors": ["JeremyC-za", "rails-bot", "JeremyC-za"]},
{"title": "load_async on associations does not load the association", "link": "https://github.com/rails/rails/issues/47809", "labels": ["\n                activerecord\n", "\n                pinned\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3388257026672363, "creation_date": "2023-03-29T22:00:33Z", "issue_submitter": "mikerobe", "body": "Steps to reproduce\nIf you have a model called User that has_many notes for example,\nclass User < ApplicationRecord\n  has_many :notes, dependent: :destroy, as: :notable\nend\nclass Note < ApplicationRecord\n  belongs_to :notable, polymorphic: true\nend\nand you then load the notes association using load_async,\nuser = User.find(1)\nuser.notes.load_async\nuser.notes.loaded? # false\nsleep 3\nputs user.notes # Kicks off another SELECT query\nthe asynchronously loaded data is not used on subsequent requests to the association.\nThe only way to get the async loaded association to be used is to save the result of load_async to a variable, and the result is then only usable from that variable rather than the association itself:\nuser = User.find(1)\nnotes = user.notes.load_async\nnotes.loaded? # true\nsleep 3\nputs notes # uses the async results\nExpected behavior\nI would expect user.notes to use the result of the async load rather than kicking off another query, and I would expect user.notes.loaded? to be true after the call to user.notes.load_async.\nActual behavior\nIt kicks off another query when accessing the association and user.notes.loaded? is false after user.notes.load_async.\nSystem configuration\nRails version: 7.0.4.3\nRuby version: 3.1.3", "number_of_comments": 3, "comment_authors": ["mikerobe", "skipkayhil", "casperisfine"]},
{"title": "[ActiveSupport::Inflector] Acronyms preceded by digits behave differently in camelize and underscore", "link": "https://github.com/rails/rails/issues/47740", "labels": ["\n                activesupport\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3698339462280273, "creation_date": "2023-03-22T22:33:42Z", "issue_submitter": "b-loyola", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"activesupport\", \"~> 7.0.0\"\nend\n\nrequire \"active_support\"\nrequire \"active_support/inflector\"\nrequire \"minitest/autorun\"\n\nclass BugTest < Minitest::Test\n  def setup\n    ActiveSupport::Inflector.inflections(:en) do |inflect|\n      inflect.acronym(\"HTTP\")\n    end\n  end\n\n  def test_camelize_and_underscore_acronym\n    assert_equal \"http\", \"HTTP\".underscore\n    assert_equal \"HTTP\", \"http\".camelize\n    assert_equal \"http_one\", \"HTTPOne\".underscore\n    assert_equal \"HTTPOne\", \"http_one\".camelize\n    assert_equal \"http1.1\", \"HTTP1.1\".underscore\n    assert_equal \"HTTP1.1\", \"http1.1\".camelize\n  end\nend\nExpected behavior\nShould acronyms followed by numbers be considered their own words for camelize in the same way they are for underscore? The underscore method seems to transform HTTP1 to http1 and HTTPOne to http_one, seemingly recognizing the acronym regardless of the character that follows it, whereas camelize will consider digits as part of the same word for acronyms, failing to recognize the HTTP acronym when followed by digits. Perhaps the behaviour should be consistent?\nI know there is some reluctance to change inflections \"to avoid breaking legacy applications which may be relying on errant inflections\" but perhaps this could be done through an inflector option and/or configuration so that we can fix things like these while allowing previous errant inflections with default configuration?\nI'd be happy to work on something like this, but wanted to check first if it would be acceptable.\nE.g.:\nActiveSupport::Inflector.configure do |config|\n  config.camelize_with_digits = false # defaults to `true`\nend\n\nActiveSupport::Inflector.inflections(:en) do |inflect|\n  inflect.acronym(\"HTTP\")\nend\n\n\"http1.1\".camelize\n#=> \"HTTP1.1\"\nActual behavior\n  1) Failure:\nBugTest#test_camelize_and_underscore_acronym [test_inflection.rb:30]:\nExpected: \"HTTP1.1\"\n  Actual: \"Http1.1\"\n\n1 runs, 6 assertions, 1 failures, 0 errors, 0 skips\n\nSystem configuration\nRails version: Using activesupport 7.0.4.3\nRuby version: ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-darwin20]", "number_of_comments": 6, "comment_authors": ["b-loyola", "dorianmariefr", "b-loyola", "rails-bot", "dorianmariefr", "b-loyola"]},
{"title": "Support for combining structurally incompatible relations with and", "link": "https://github.com/rails/rails/issues/47571", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4282097816467285, "creation_date": "2023-03-03T13:45:15Z", "issue_submitter": "maxnotarangelo", "body": "To combine multiple relations, you can use relation.merge, which has no problem when the two relations are joined to different tables, have different preloading, etc. When the relations both have a where clause for the same key, the second relation's condition is used, just like Hash.merge:\n\n\n\nrails/activerecord/test/cases/relation/merging_test.rb\n\n\n         Line 113\n      in\n      556025d\n\n\n\n\n\n\n assert_equal [mary, bob], david_and_mary.merge(mary_and_bob) \n\n\n\n\n\nThe behavior I want is to keep both filters. As far as I can tell, this is how merge used to work, at least in most cases (see #39328). The and method was added in Rails 6.1 as a replacement (see #39558):\n\n\n\nrails/activerecord/test/cases/relation/merging_test.rb\n\n\n         Line 115\n      in\n      556025d\n\n\n\n\n\n\n assert_equal [mary], david_and_mary.and(mary_and_bob) \n\n\n\n\n\nHowever, it won't let you combine two relations if they're \"structurally incompatible\": if the two relations are joined to different tables, have different preloading, etc. This means that if you have a join or preloading on one of the relations, you can't combine them with and:\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :categories, force: true do |t|\n  end\n\n  create_table :posts, force: true do |t|\n    t.integer :category_id\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n    t.integer :score\n  end\nend\n\nclass Category < ActiveRecord::Base\n  has_many :posts\n  has_many :quality_comments, -> { where(score: 4..6) }, through: :posts, source: :comments\nend\n\nclass Post < ActiveRecord::Base\n  belongs_to :category\n  has_many :comments\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\nend\n\nclass RelationAndTest < Minitest::Test\n  def test_relation_and\n    category = Category.create!\n    post = Post.create!(category:)\n    post.comments << Comment.create!(score: 3)\n    post.comments << Comment.create!(score: 4)\n    post.comments << Comment.create!(score: 5)\n\n    mediocre_comments = Comment.where(score: 2..4)\n\n    merged = mediocre_comments.merge(category.quality_comments)\n    assert_equal [4, 5], merged.pluck(:score).sort\n\n    anded = mediocre_comments.and(category.quality_comments)\n    # => raises ArgumentError: Relation passed to #and must be structurally compatible. Incompatible values: [:joins]\n  end\nend\nI was able to work around it by using merge and then combining the where relations manually:\ncombined_wheres = mediocre_comments.where_clause | category.quality_comments.where_clause\nvalid_anded = merged\nvalid_anded.where_clause = combined_wheres\nassert_equal [4], valid_anded.pluck(:score)\nI'd rather just be able to use and, but I don't know if there's some reason that combining all the non-filtering parts of two relations would cause problems for and that it doesn't cause for merge.\nSystem configuration\nRails version: 7.1.0\nRuby version: 3.1.1", "number_of_comments": 1, "comment_authors": ["maxnotarangelo"]},
{"title": "Attempting to save duplicate records with has_many_inversing enabled leads to SQL error", "link": "https://github.com/rails/rails/issues/47559", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4238307476043701, "creation_date": "2023-03-02T19:01:03Z", "issue_submitter": "jhottenstein", "body": "Steps to reproduce\nWhen attempting to build multiple in-memory associations from an AR object to the same in-memory AR object:\n\nwith ActiveRecord::Base.has_many_inversing = true\nwhen explicitly including  inverse_of: on the belongs_to\n\nactiverecord generates sql that loses the association to the original AR object\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\nActiveRecord::Base.has_many_inversing = true\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :comments, force: true do |t|\n    t.references :post, null: false\n    t.references :author, null: false\n  end\n\n  create_table :authors, force: true do |t|\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\nend\n\nclass Author < ActiveRecord::Base\n  has_many :comments\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post, inverse_of: :comments\n  belongs_to :author, inverse_of: :comments\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    post = Post.new\n    author = Author.new\n    post.comments.build(author: author)\n    post.comments.build(author: author)\n\n    post.save! \n  end\nend\nExpected behavior\nThis case is similar to #43222 so I would expect the second comments.build command to be a NOOP as it is trying to make another link to the same author.\nIt would also be understandable if there were multiple comments rows created with the same author and post.\nActual behavior\nWhen attempting to save the second comment, activerecord omits the post_id and it fails on NOT NULL constraint.\nD, [2023-03-02T13:44:04.811276 #52249] DEBUG -- :   TRANSACTION (0.0ms)  begin transaction\nD, [2023-03-02T13:44:04.811336 #52249] DEBUG -- :   Post Create (0.1ms)  INSERT INTO \"posts\" DEFAULT VALUES\nD, [2023-03-02T13:44:04.811591 #52249] DEBUG -- :   Author Create (0.0ms)  INSERT INTO \"authors\" DEFAULT VALUES\nD, [2023-03-02T13:44:04.811787 #52249] DEBUG -- :   Comment Create (0.0ms)  INSERT INTO \"comments\" (\"post_id\", \"author_id\") VALUES (?, ?)  [[\"post_id\", 1], [\"author_id\", 1]]\nD, [2023-03-02T13:44:04.812018 #52249] DEBUG -- :   Comment Create (0.1ms)  INSERT INTO \"comments\" (\"author_id\") VALUES (?)  [[\"author_id\", 1]]\nD, [2023-03-02T13:44:04.812076 #52249] DEBUG -- :   TRANSACTION (0.0ms)  rollback transaction\n\nError:\nBugTest#test_association_stuff:\nActiveRecord::NotNullViolation: SQLite3::ConstraintException: NOT NULL constraint failed: comments.post_id\n\nIf there are no NOT NULL constraints, it eventually gets the association correct with an UPDATE statement\nD, [2023-03-02T14:00:24.734133 #52815] DEBUG -- :   TRANSACTION (0.0ms)  begin transaction\nD, [2023-03-02T14:00:24.734195 #52815] DEBUG -- :   Post Create (0.1ms)  INSERT INTO \"posts\" DEFAULT VALUES\nD, [2023-03-02T14:00:24.734628 #52815] DEBUG -- :   Author Create (0.0ms)  INSERT INTO \"authors\" DEFAULT VALUES\nD, [2023-03-02T14:00:24.734831 #52815] DEBUG -- :   Comment Create (0.0ms)  INSERT INTO \"comments\" (\"post_id\", \"author_id\") VALUES (?, ?)  [[\"post_id\", 1], [\"author_id\", 1]]\nD, [2023-03-02T14:00:24.734968 #52815] DEBUG -- :   Comment Create (0.0ms)  INSERT INTO \"comments\" (\"author_id\") VALUES (?)  [[\"author_id\", 1]]\nD, [2023-03-02T14:00:24.735838 #52815] DEBUG -- :   Comment Update (0.0ms)  UPDATE \"comments\" SET \"post_id\" = ? WHERE \"comments\".\"id\" = ?  [[\"post_id\", 1], [\"id\", 2]]\nD, [2023-03-02T14:00:24.735919 #52815] DEBUG -- :   TRANSACTION (0.0ms)  commit transaction\n\nSystem configuration\nRails version:\nAbove repro is from main template.  Can repro all versions that include has_many_inversing (back to 6.1)\nRuby version:\nruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [arm64-darwin22]", "number_of_comments": 3, "comment_authors": ["jhottenstein", "jhottenstein", "abaldwin88"]},
{"title": "test_iso8601_output_and_reparsing test fails on i686", "link": "https://github.com/rails/rails/issues/47832", "labels": ["\n                activesupport\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3331663608551025, "creation_date": "2023-03-31T12:23:25Z", "issue_submitter": "Apteryks", "body": "Steps to reproduce\nRun the test suite on a i686-linux machine.\nExpected behavior\nAll tests should pass.\nActual behavior\nThe test_iso8601_output_and_reparsing test fails (just on i686, not x86_64):\nstarting phase `check'\n/gnu/store/g6a33hmhk43dsd7a9kqcq1s1mcfc7ich-ruby-2.7.4/bin/ruby -w -I\"lib\" -I\"/gnu/store/g6a33hmhk43dsd7a9kqcq1s1mcfc7ich-ruby-2.7.4/lib/ruby/gems/2.7.0/gems/rake-13.0.1/lib\" \"/gnu/store/g6a33hmhk43dsd7a9kqcq1s1mcfc7ich-ruby-2.7.4/lib/ruby/gems/2.7.0/gems/rake-13.0.1/lib/rake/rake_test_loader.rb\" \"test/actionable_error_test.rb\" \"test/array_inquirer_test.rb\" \"test/autoload_test.rb\" \"test/benchmarkable_test.rb\" \"test/broadcast_logger_test.rb\" \"test/cache/cache_entry_test.rb\" \"test/cache/cache_key_test.rb\" \"test/cache/cache_store_logger_test.rb\" \"test/cache/cache_store_namespace_test.rb\" \"test/cache/cache_store_setting_test.rb\" \"test/cache/coder_test.rb\" \"test/cache/local_cache_middleware_test.rb\" \"test/cache/stores/null_store_test.rb\" \"test/callback_inheritance_test.rb\" \"test/callbacks_test.rb\" \"test/clean_backtrace_test.rb\" \"test/clean_logger_test.rb\" \"test/concern_test.rb\" \"test/concurrency/load_interlock_aware_monitor_test.rb\" \"test/configurable_test.rb\" \"test/configuration_file_test.rb\" \"test/core_ext/array/access_test.rb\" \"test/core_ext/array/conversions_test.rb\" \"test/core_ext/array/extract_options_test.rb\" \"test/core_ext/array/extract_test.rb\" \"test/core_ext/array/grouping_test.rb\" \"test/core_ext/array/wrap_test.rb\" \"test/core_ext/bigdecimal_test.rb\" \"test/core_ext/class/attribute_test.rb\" \"test/core_ext/class_test.rb\" \"test/core_ext/date_and_time_compatibility_test.rb\" \"test/core_ext/date_ext_test.rb\" \"test/core_ext/date_time_ext_test.rb\" \"test/core_ext/digest/uuid_test.rb\" \"test/core_ext/duration_test.rb\" \"test/core_ext/enumerable_test.rb\" \"test/core_ext/file_test.rb\" \"test/core_ext/hash/transform_values_test.rb\" \"test/core_ext/hash_ext_test.rb\" \"test/core_ext/integer_ext_test.rb\" \"test/core_ext/kernel/concern_test.rb\" \"test/core_ext/kernel_test.rb\" \"test/core_ext/load_error_test.rb\" \"test/core_ext/module/anonymous_test.rb\" \"test/core_ext/module/attr_internal_test.rb\" \"test/core_ext/module/attribute_accessor_per_thread_test.rb\" \"test/core_ext/module/attribute_accessor_test.rb\" \"test/core_ext/module/attribute_aliasing_test.rb\" \"test/core_ext/module/concerning_test.rb\" \"test/core_ext/module/introspection_test.rb\" \"test/core_ext/module/remove_method_test.rb\" \"test/core_ext/module_test.rb\" \"test/core_ext/name_error_test.rb\" \"test/core_ext/numeric_ext_test.rb\" \"test/core_ext/object/acts_like_test.rb\" \"test/core_ext/object/blank_test.rb\" \"test/core_ext/object/deep_dup_test.rb\" \"test/core_ext/object/duplicable_test.rb\" \"test/core_ext/object/inclusion_test.rb\" \"test/core_ext/object/instance_variables_test.rb\" \"test/core_ext/object/json_cherry_pick_test.rb\" \"test/core_ext/object/json_gem_encoding_test.rb\" \"test/core_ext/object/to_param_test.rb\" \"test/core_ext/object/to_query_test.rb\" \"test/core_ext/object/try_test.rb\" \"test/core_ext/pathname/existence_test.rb\" \"test/core_ext/range_ext_test.rb\" \"test/core_ext/regexp_ext_test.rb\" \"test/core_ext/secure_random_test.rb\" \"test/core_ext/string_ext_test.rb\" \"test/core_ext/symbol_ext_test.rb\" \"test/core_ext/time_ext_test.rb\" \"test/core_ext/time_with_zone_test.rb\" \"test/current_attributes_test.rb\" \"test/dependencies_test.rb\" \"test/deprecation/method_wrappers_test.rb\" \"test/deprecation/proxy_wrappers_test.rb\" \"test/deprecation_test.rb\" \"test/descendants_tracker_test.rb\" \"test/digest_test.rb\" \"test/encrypted_configuration_test.rb\" \"test/encrypted_file_test.rb\" \"test/error_reporter_test.rb\" \"test/execution_context_test.rb\" \"test/executor_test.rb\" \"test/file_update_checker_test.rb\" \"test/fork_tracker_test.rb\" \"test/gzip_test.rb\" \"test/hash_with_indifferent_access_test.rb\" \"test/i18n_test.rb\" \"test/inflector_test.rb\" \"test/isolated_execution_state_test.rb\" \"test/json/decoding_test.rb\" \"test/json/encoding_test.rb\" \"test/key_generator_test.rb\" \"test/lazy_load_hooks_test.rb\" \"test/log_subscriber_test.rb\" \"test/logger_test.rb\" \"test/message_encryptor_test.rb\" \"test/message_verifier_test.rb\" \"test/messages/rotation_configuration_test.rb\" \"test/multibyte_chars_test.rb\" \"test/multibyte_proxy_test.rb\" \"test/notifications/evented_notification_test.rb\" \"test/notifications/instrumenter_test.rb\" \"test/notifications_test.rb\" \"test/number_helper_i18n_test.rb\" \"test/number_helper_test.rb\" \"test/option_merger_test.rb\" \"test/ordered_hash_test.rb\" \"test/ordered_options_test.rb\" \"test/parameter_filter_test.rb\" \"test/per_thread_registry_test.rb\" \"test/reloader_test.rb\" \"test/rescuable_test.rb\" \"test/safe_buffer_test.rb\" \"test/secure_compare_rotator_test.rb\" \"test/security_utils_test.rb\" \"test/share_lock_test.rb\" \"test/silence_logger_test.rb\" \"test/string_inquirer_test.rb\" \"test/subscriber_test.rb\" \"test/tagged_logging_test.rb\" \"test/test_case_test.rb\" \"test/testing/after_teardown_test.rb\" \"test/testing/constant_lookup_test.rb\" \"test/testing/file_fixtures_test.rb\" \"test/testing/method_call_assertions_test.rb\" \"test/time_travel_test.rb\" \"test/time_zone_test.rb\" \"test/transliterate_test.rb\" \"test/xml_mini/jdom_engine_test.rb\" \"test/xml_mini/libxml_engine_test.rb\" \"test/xml_mini/libxmlsax_engine_test.rb\" \"test/xml_mini/nokogiri_engine_test.rb\" \"test/xml_mini/nokogirisax_engine_test.rb\" \"test/xml_mini/rexml_engine_test.rb\" \"test/xml_mini/xml_mini_engine_test.rb\" \"test/xml_mini_test.rb\" \n/gnu/store/1il0aqb2570nxh9yv3bgkmi6k26c56bb-ruby-libxml-3.0.0/lib/ruby/vendor_ruby/gems/libxml-ruby-3.0.0/lib/libxml/schema/type.rb:8: warning: method redefined; discarding old annotation\n/gnu/store/1il0aqb2570nxh9yv3bgkmi6k26c56bb-ruby-libxml-3.0.0/lib/ruby/vendor_ruby/gems/libxml-ruby-3.0.0/lib/libxml/schema/element.rb:18: warning: method redefined; discarding old annotation\nRunning 3792 tests in parallel using 12 processes\nRun options: --seed 12320\n\n# Running:\n\ncould not load hiredis extension, using (slower) pure Ruby implementation.\n....WARNING: could not load hiredis extension, using (slower) pure Ruby implementation.\nn\nFinished in 5.270397s, 719.4905 runs/s, 2324.6828 assertions/s.\n\n  1) Error:\nDurationTest#test_iso8601_output_and_reparsing:\nDate::Error: invalid date\n    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/core_ext/date/calculations.rb:115:in `>>'\n    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/core_ext/date/calculations.rb:115:in `advance'\n    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/core_ext/time/calculations.rb:193:in `advance'\n    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/duration.rb:496:in `block in sum'\n    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/duration.rb:488:in `each'\n    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/duration.rb:488:in `inject'\n    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/duration.rb:488:in `sum'\n    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/duration.rb:431:in `since'\n    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/lib/active_support/core_ext/time/calculations.rb:282:in `plus_with_duration'\n    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/test/core_ext/duration_test.rb:664:in `block in test_iso8601_output_and_reparsing'\n    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/test/core_ext/duration_test.rb:662:in `each'\n    /tmp/guix-build-ruby-activesupport-7.0.4.3.drv-0/source/activesupport/test/core_ext/duration_test.rb:662:in `test_iso8601_output_and_reparsing'\n\n3792 runs, 12252 assertions, 0 failures, 1 errors, 55 skips\n\nYou have skipped tests. Run with --verbose for details.\nrake aborted!\n\nSystem configuration\nRails version: 7.0.4.3\nRuby version: 2.7.4", "number_of_comments": 1, "comment_authors": ["Apteryks"]},
{"title": "COPY ... TO cannot be executed on a readonly database connection (postgresql)", "link": "https://github.com/rails/rails/issues/47870", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                PostgreSQL\n"], "depth": 4, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3211252689361572, "creation_date": "2023-04-05T16:11:29Z", "issue_submitter": "kholbekj", "body": "Steps to reproduce\nActiveRecord::Base.connected_to(role: :reading) { ActiveRecord::Base.connection.execute('COPY (SELECT id FROM users WHERE id = 1) TO example.csv WITH CSV HEADER') }\n#=> ActiveRecord::ReadOnlyError: Write query attempted while in readonly mode:\n\nI guess the issue is that the regex simply considers COPY statements not read. But while COPY .. FROM is a write query, COPY .. TO is not. It writes to a file in the filesystem, but only reads from the DB.\nExpected behavior\nNo error should be raised, the query should run.\nActual behavior\nActiveRecord::ReadOnlyError: Write query attempted while in readonly mode: is raised\nSystem configuration\nRails version: 6.1.6.1 (but as far as I can tell the regex for rails 7 has the same issue)\nRuby version: 3.0.4p208", "number_of_comments": 4, "comment_authors": ["kholbekj", "yahonda", "nickborromeo", "kholbekj"]},
{"title": "ActiveRecord::StrictLoadingViolationError raised on has_one :through associations", "link": "https://github.com/rails/rails/issues/47498", "labels": ["\n                activerecord\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.030698537826538, "creation_date": "2023-02-24T17:40:08Z", "issue_submitter": "MatheusRich", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\nActiveRecord::Base.strict_loading_by_default = true\n\nActiveRecord::Schema.define do\n  create_table :employees, force: true do |t|\n    t.integer :team_id\n  end\n\n  create_table :teams, force: true do |t|\n    t.integer :company_id\n  end\n\n  create_table :companies, force: true do |t|\n    t.string :name\n  end\nend\n\nclass Employee < ActiveRecord::Base\n  belongs_to :team\n  has_one :company, through: :team\n\n  def company_name\n    company.name\n  end\nend\n\nclass Team < ActiveRecord::Base\n  has_many :employees\n  belongs_to :company\nend\n\nclass Company < ActiveRecord::Base\n  has_many :teams\nend\n\nclass BugTest < Minitest::Test\n  def test_has_one_lazy_loading_raises_error\n    company_name = \"test\"\n    company = Company.create(name: company_name)\n    team = Team.create(company: company)\n\n    # This simulates what a controller would do\n    employee_params = {\n      team_id: team.id\n    }\n    employee = Employee.new(employee_params)\n    employee.save\n\n    assert_raises(ActiveRecord::StrictLoadingViolationError) do\n      employee.company_name\n    end\n  end\nend\nExpected behavior\nWhile this is not a bug, I think the development experience could be improved when using strict_loading_by_default = true. The main use case for this feature is to avoid N + 1 queries, which is not the case in this example (it's just lazy loading).\nWe can set the strict loading mode to :n_plus_one_only on a per-record basis to avoid the exception\n  def test_has_one_lazy_loading_with_mode_n_plus_one_only_doesnt_raise_error\n    company_name = \"test\"\n    company = Company.create(name: company_name)\n    team = Team.create(company: company)\n\n    # This simulates what a controller would do\n    employee_params = {\n      team_id: team.id\n    }\n    employee = Employee.new(employee_params)\n    employee.save\n    employee.strict_loading!(mode: :n_plus_one_only) # this could be done in the `company_name` method as well\n\n    assert_equal company_name, employee.company_name\n  end\nbut doing it for every record is a bit cumbersome. Is there a way to avoid this? I'm considering the following alternatives:\n\nAllow setting the strict loading mode per-model\nActiveRecord::Base.strict_loading_by_default = true\nActiveRecord::Base.strict_loading_mode = :n_plus_one_only\n\nAllow setting the strict loading mode globally\nconfig.active_record.strict_loading_by_default = true\nconfig.active_record.strict_loading_mode = :n_plus_one_only\n\n\nI'm happy to hear y'alls thoughts on this. I'm also happy to provide a patch for this.\nActual behavior\nLoading a has_one association leads to a StrictLoading violation even for non-N+1 queries.\nSystem configuration\nRails version: 7.1.0.alpha\nRuby version: 3.2.0", "number_of_comments": 4, "comment_authors": ["MatheusRich", "MatheusRich", "rails-bot", "MatheusRich"]},
{"title": "saved_changes from ActiveRecord::Dirty does not include some changes on nested attributes", "link": "https://github.com/rails/rails/issues/47521", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0437192916870117, "creation_date": "2023-02-27T19:50:37Z", "issue_submitter": "Tao-Galasse", "body": "Steps to reproduce\nI have those two classes (same example than the has_one association documentation from the Active Record Associations guide) :\nclass Supplier < ApplicationRecord\n  has_one :account, inverse_of: :supplier\nend\n\nclass Account < ApplicationRecord\n  belongs_to :supplier, inverse_of: :account\n  accepts_nested_attributes_for :supplier\nend\nand I am updating the supplier from the account like this : account.update(supplier_attributes: { name: 'new supplier' })\nSee this test in my dummy app => https://github.com/Tao-Galasse/rails-test-app/blob/main/test/models/account_test.rb\nExpected behavior\nI expect account.saved_changes to return something like {\"supplier_id\"=>[1, 2]}\nActual behavior\naccount.saved_changes returns an empty hash {}\nSystem configuration\nRails version:\nTested with Rails 6.1.7.2 & Rails 7.0.4.2\nRuby version:\n3.2.0", "number_of_comments": 6, "comment_authors": ["Tao-Galasse", "benngarcia", "saiqulhaq", "Tao-Galasse", "saiqulhaq", "Tao-Galasse"]},
{"title": "counter_cache is double incremented with disabled partial_inserts.", "link": "https://github.com/rails/rails/issues/47555", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.053680181503296, "creation_date": "2023-03-02T14:12:22Z", "issue_submitter": "konalegi", "body": "Steps to reproduce\nThis happens only when defined with has_many through association and with partial_inserts set to false\nThe query difference with enabled and disable partial_inserts\nwith enabled\nStep Create (0.1ms)  INSERT INTO \"steps\" DEFAULT VALUES\nStep Update All (0.1ms)  UPDATE \"steps\" SET \"specializations_count\" = COALESCE(\"specializations_count\", 0) + ? WHERE \"steps\".\"id\" = ?  [[\"specializations_count\", 1], [\"id\", 1]]\n\nwith disabled\nStep Create (0.1ms)  INSERT INTO \"steps\" (\"specializations_count\") VALUES (?)  [[\"specializations_count\", 1]]\nStep Update All (0.1ms)  UPDATE \"steps\" SET \"specializations_count\" = COALESCE(\"specializations_count\", 0) + ? WHERE \"steps\".\"id\" = ?  [[\"specializations_count\", 1], [\"id\", 1]]\n\nAs you might see, with disabled partial_inserts, specializations_count is set to 1, but when enabled, it's set to its default value.\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  gem \"rails\", '~> 7.0.4.2'\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\nActiveRecord::Base.partial_inserts = false\n\nActiveRecord::Schema.define do\n  create_table :steps, force: true do |t|\n    t.integer \"specializations_count\", default: 0\n  end\n\n  create_table :specialization_steps, force: true do |t|\n    t.integer \"specialization_id\", null: false\n    t.integer \"step_id\", null: false\n  end\n\n  create_table :specializations, force: true do |t|\n  end\nend\n\nclass SpecializationStep < ActiveRecord::Base\n  belongs_to :specialization\n  belongs_to :step, counter_cache: :specializations_count\nend\n\nclass Step < ActiveRecord::Base\n  has_many :specialization_steps\n  has_many :specializations, through: :specialization_steps, counter_cache: :specializations_count\nend\n\nclass Specialization < ActiveRecord::Base\n  has_many :specialization_steps\n  has_many :steps, through: :specialization_steps\nend\n\nclass BugTest < Minitest::Test\n  def test_1\n    step = Step.create!(specializations: [Specialization.create!])\n\n    assert_equal 1, step.reload.specializations_count\n  end\n\n  def test_2\n    step = Step.new(specializations: [Specialization.create!])\n    assert_equal 1, step.specializations_count\n  end\nend\nExpected behavior\n.\n\nFinished in 0.021899s, 91.3284 runs/s, 91.3284 assertions/s.\n2 runs, 2 assertions, 0 failures, 0 errors, 0 skips\n\nActual behavior\nF\n\nFailure:\nBugTest#test_1 [reproduce_github.rb:51]:\nExpected: 1\n  Actual: 2\n\nSystem configuration\nRails version: 7.0.4.2\nRuby version:  ruby 3.0.4p208 (2022-04-12 revision 3fa771dded) [x86_64-darwin20]", "number_of_comments": 4, "comment_authors": ["konalegi", "fatkodima", "konalegi", "rails-bot"]},
{"title": "Document other web server support for AC::Streaming", "link": "https://github.com/rails/rails/issues/47173", "labels": ["\n                actionpack\n", "\n                docs\n", "\n                good first issue\n", "\n                stale\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0240449905395508, "creation_date": "2023-01-28T23:39:10Z", "issue_submitter": "zzak", "body": "When applying some changes to ActionController::Streaming recently I noticed the \"Web server support\" section is missing puma and falcon, but perhaps others too?\nMaybe a good first patch if someone wants to investigate! 🙇", "number_of_comments": 8, "comment_authors": ["zzak", "ioquatix", "haadfida", "Basit108", "zzak", "giovannism20", "zzak", "rails-bot"]},
{"title": "Avoid second query on in_batches.pluck", "link": "https://github.com/rails/rails/issues/47462", "labels": ["\n                activerecord\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0266978740692139, "creation_date": "2023-02-22T17:34:41Z", "issue_submitter": "sobrinho", "body": "Steps to reproduce\nrequire 'bundler/inline'\n\ngemfile do\n  gem 'activerecord'\n  gem 'sqlite3'\nend\n\nrequire 'active_record'\nrequire 'sqlite3'\n\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Base.establish_connection(\n  adapter: 'sqlite3',\n  database: ':memory:'\n)\n\nActiveRecord::Base.connection.create_table :people, id: :uuid do |t|\n  t.string :name\nend\n\nclass Person < ActiveRecord::Base\nend\n\ndata = 100_000.times.map { |i| { id: SecureRandom.uuid, name: \"Person #{i}\" } }\nPerson.insert_all(data)\n\nPerson.in_batches.each do |batch|\n  batch.pluck(:id)\nend\nruby script.rb | grep 'SELECT \"people\"' | wc -l\n[DEPRECATED] This Gemfile does not include an explicit global source. Not using an explicit global source may result in a different lockfile being generated depending on the gems you have installed locally before bundler is run. Instead, define a global source in your Gemfile like this: source \"https://rubygems.org\".\n     201\n\nExpected behavior\nI would expect to see 100 queries.\nActual behavior\nI see 200 queries, one to get the ids and a second one to get the ids from a list of ids.\nSystem configuration\nRails version: 7.0.4.2\nRuby version: 2.7.6", "number_of_comments": 15, "comment_authors": ["sobrinho", "ghiculescu", "sobrinho", "fatkodima", "fatkodima", "sobrinho", "fatkodima", "sobrinho", "sobrinho", "sobrinho", "fatkodima", "sobrinho", "sobrinho", "rails-bot", "fatkodima"]},
{"title": "The eager load associations need check association scope", "link": "https://github.com/rails/rails/issues/47175", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0510485172271729, "creation_date": "2023-01-29T04:08:06Z", "issue_submitter": "OuYangJinTing", "body": "Steps to reproduce\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org/\"\n  # source \"https://gems.ruby-china.com/\"\n\n  gem \"minitest\", \"~> 5.15\"\n  gem \"minitest-reporters\"\n  gem \"activerecord\", \"~> 7.0.2\"\n  gem \"sqlite3\"\nend\n\nrequire \"minitest/autorun\"\nrequire \"minitest/reporters\"\nrequire \"active_record\"\n\nMinitest::Reporters.use!\n\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :users, force: true do |t|\n    t.string :name, null: false\n  end\n\n  create_table :posts, force: true do |t|\n    t.belongs_to :user\n    t.string :title, null: false\n  end\nend\n\nclass User < ActiveRecord::Base\n  has_many :posts, dependent: :destroy\n\n  has_one :latest_post, -> { order(id: :desc) }, class_name: \"Post\"\nend\n\nclass Post < ActiveRecord::Base\n  belongs_to :user\nend\n\nclass BugTest < Minitest::Test\n  def setup\n    3.times do |i|\n      User.create(name: \"foo-#{i + 1}\").tap do |user|\n        10.times do |j|\n          user.posts.create(title: \"bar-#{j + 1}\")\n        end\n      end\n    end\n  end\n\n\n  def test_correct_query\n    assert_equal 10, User.first.latest_post.id\n    assert_equal 10, User.includes(:latest_post).first.latest_post.id\n  end\n\n  def test_wrong_query\n    assert_equal 10, User.eager_load(:latest_post).first.latest_post.id\n  end\nend\nExpected behavior\nThe ActiveRecord should raise error when try to execute User.eager_load(:latest_post).\nFor example, like the #check_eager_loadable! method handles\nActual behavior\nThe result of eager load is wrong\nSystem configuration\nRails version: 7\nRuby version: 3", "number_of_comments": 9, "comment_authors": ["OuYangJinTing", "bradhuskins", "OuYangJinTing", "rails-bot", "bradhuskins", "rails-bot", "OuYangJinTing", "skipkayhil", "OuYangJinTing"]},
{"title": "current_page? wrong with root route", "link": "https://github.com/rails/rails/issues/47184", "labels": ["\n                actionview\n", "\n                attached PR\n", "\n                routing\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6350224018096924, "creation_date": "2023-01-30T03:08:45Z", "issue_submitter": "user073", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"rails\", \"~> 7.0.0\"\nend\n\nrequire \"rack/test\"\nrequire \"action_controller/railtie\"\nrequire \"minitest/autorun\"\n\nclass BugTest < ActiveSupport::TestCase\n  attr_accessor :controller, :request\n\n  routes = ActionDispatch::Routing::RouteSet.new\n  routes.draw do\n    root \"posts#index\"\n    resources :posts, only: :index\n  end\n\n  include ActionView::Helpers::UrlHelper\n  include routes.url_helpers\n\n  def request_for_url(url, opts = {})\n    env = Rack::MockRequest.env_for(\"http://www.example.com#{url}\", opts)\n    ActionDispatch::Request.new(env)\n  end\n\n  def test_returns_success\n    @request = request_for_url(\"/posts\", method: :head)\n    assert current_page?(controller: \"posts\", action: \"index\")\n  end\nend\nExpected behavior\ncurrent_page?(controller: \"posts\", action: \"index\") returns true.\nActual behavior\ncurrent_page?(controller: \"posts\", action: \"index\") returns false.\nIt appears that the issue is url_for(options) here:\n\n\n\nrails/actionview/lib/action_view/helpers/url_helper.rb\n\n\n         Line 596\n      in\n      6d82760\n\n\n\n\n\n\n url_string = URI::DEFAULT_PARSER.unescape(url_for(options)).force_encoding(Encoding::BINARY) \n\n\n\n\n\ncurrent_page?(controller: \"posts\", action: \"index\") returns false because url_for(controller: \"spots\", action: \"index\") returns \"/\", which does not equal the request_uri, \"/posts\".\nSystem configuration\nRails version: 7.0.4.2\nRuby version: 3.1.0", "number_of_comments": 3, "comment_authors": ["user073", "bradhuskins", "bradhuskins"]},
{"title": "Error does not bubble up from invalid associated record to parent (more detailed)", "link": "https://github.com/rails/rails/issues/47334", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6321208477020264, "creation_date": "2023-02-09T10:52:24Z", "issue_submitter": "loqimean", "body": "Steps to reproduce\nclass Parent\n  has_many :child_parents\n  has_many :children, through: :child_parents\nend\n\nclass ChildParent\n  belongs_to :parent\n  belongs_to :child\nend\n\nclass Child\n  has_many :child_parents\n  has_many :parents, through: :child_parents\n\n  validates :name, uniqueness: { scope: :parent }\nend\n\n\nfirst_child = Child.create(name: \"John\")\nsecond_child = Child.create(name: \"John\")\n\nparent = Parent.create\n\nparent.update(children_ids: [first_child.id, second_child.id])\n\nparent.save #=> false\nparent.errors.full_messages #=> \"Children invalid\"\nparent.children.map(&:errors).compact.map(&:full_messages) #=> \"[[\"Child's name already taken\"]]\"\nExpected behavior\nExpected to have message more detailed, like \"Child with id '45' has already taken name\" on parent model\nActual behavior\nIt just returns an error message \"Children are invalid\" 🙂\nSystem configuration\nRails version: 7.0.4\nRuby version: 3.1.1", "number_of_comments": 3, "comment_authors": ["loqimean", "fmichaut-diff", "rails-bot"]},
{"title": "ActiveStorage \"index_active_storage_blobs_on_key\" should be \"index_active_storage_blobs_on_key_and_service_name\"", "link": "https://github.com/rails/rails/issues/47382", "labels": ["\n                activestorage\n", "\n                stale\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6251587867736816, "creation_date": "2023-02-13T22:20:27Z", "issue_submitter": "weilandia", "body": "Steps to reproduce\nCreate two blobs with the same key but with a different service_name.  The \"index_active_storage_blobs_on_key\" does not take service_name into account when it seems like it should.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n  gem \"rails\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record/railtie\"\nrequire \"active_storage/engine\"\nrequire \"tmpdir\"\n\nclass TestApp < Rails::Application\n  config.active_storage.service = :local_a\n  config.active_storage.service_configurations = {\n    local_a: {\n      root: Dir.tmpdir,\n      service: \"Disk\"\n    },\n    local_b: {\n      root: Dir.tmpdir,\n      service: \"Disk\"\n    },\n  }\nend\n\ndb_dir = Dir.mktmpdir(\"test\", Dir.tmpdir)\nENV[\"DATABASE_URL\"] = \"sqlite3:#{db_dir}/db.sqlite3\"\n\nRails.application.initialize!\n\nrequire ActiveStorage::Engine.root.join(\"db/migrate/20170806125915_create_active_storage_tables.rb\").to_s\n\nActiveRecord::Schema.define do\n  CreateActiveStorageTables.new.change\n\n  create_table :users, force: true\nend\n\nclass User < ActiveRecord::Base\n  has_one_attached :profile_a, service: :local_a\n  has_one_attached :profile_b, service: :local_b\nend\n\nrequire \"minitest/autorun\"\n\nclass BugTest < Minitest::Test\n  include Rails.application.routes.url_helpers\n  include Rack::Test::Methods\n\n  def test_upload_and_fetch\n    user = User.create!\n    user.profile_a.attach(\n      key: \"test\",\n      io: StringIO.new(\"test\"),\n      filename: \"test.txt\"\n    )\n\n    assert_raises(ActiveRecord::RecordNotUnique) do\n      user.profile_b.attach(\n        key: \"test\",\n        io: StringIO.new(\"test\"),\n        filename: \"test.txt\"\n      )\n    end\n  end\nend\nExpected behavior\nWhen blobs are created with the same key in different services, I don't think there should be a RecordNotUnique error.\nActual behavior\nThe unique constraint on key for active_storage_blobs does not take service_name into account when it seem like it should.", "number_of_comments": 5, "comment_authors": ["weilandia", "ghiculescu", "weilandia", "rails-bot", "rails-bot"]},
{"title": "accepts_nested_attributes_for does not set ActiveRecord_Associations_CollectionProxy instance cache for unpersisted records until it is called using to_a", "link": "https://github.com/rails/rails/issues/47426", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5841264724731445, "creation_date": "2023-02-17T17:26:02Z", "issue_submitter": "sampatbadhe", "body": "Steps to reproduce\nWhile exploring ActiveRecord.build with has_many association came across following scenario.\naccepts_nested_attributes_for does not set ActiveRecord_Associations_CollectionProxy instance cache for unpersisted records until it is called using to_a, is this expected?\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.string :title\n    t.text :body\n    t.integer :user_id\n  end\n\n  create_table :users, force: true do |t|\n    t.string :name\n    t.string :email\n  end\nend\n\nclass Post < ApplicationRecord\n  belongs_to :user, inverse_of: :posts\nend\n\nclass User < ApplicationRecord\n  has_many :posts, inverse_of: :user\n\n  accepts_nested_attributes_for :posts\nend\n\nLoading development environment (Rails 7.1.0.alpha)\n3.0.0 :001 > user = User.build(name: 'Jamie', posts_attributes: [{ title: \"Intro Post 1\" }, { title: \"Intro Post 2\" }] )\n => #<User:0x00007f929fc37cb8 id: nil, name: \"Jamie\", email: nil, created_at: nil, updated_at: nil> \n3.0.0 :002 > user.posts.class\n => Post::ActiveRecord_Associations_CollectionProxy \n3.0.0 :003 > user.posts\n => [] \n3.0.0 :004 > user.posts.to_a\n => \n[#<Post:0x00007f92a85fe708 id: nil, body: nil, title: \"Intro Post 1\", user_id: nil, created_at: nil, updated_at: nil>,\n #<Post:0x00007f92a48cd1e0 id: nil, body: nil, title: \"Intro Post 2\", user_id: nil, created_at: nil, updated_at: nil>] \n3.0.0 :005 > user.posts\n => \n[#<Post:0x00007f92a85fe708 id: nil, body: nil, title: \"Intro Post 1\", user_id: nil, created_at: nil, updated_at: nil>,\n #<Post:0x00007f92a48cd1e0 id: nil, body: nil, title: \"Intro Post 2\", user_id: nil, created_at: nil, updated_at: nil>] \n3.0.0 :006 > user.posts.class\n => Post::ActiveRecord_Associations_CollectionProxy \n3.0.0 :007 > user.posts.to_a.class\n => Array \n\nSystem configuration\nRails version: 7.1.0.alpha\nRuby version: 3.0.0p0", "number_of_comments": 3, "comment_authors": ["sampatbadhe", "doconnor-clintel", "zzak"]},
{"title": "Rails 7 router can raise NoMethodError (undefined method names' for nil:NilClass)`", "link": "https://github.com/rails/rails/issues/47244", "labels": ["\n                routing\n", "\n                stale\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7001461982727051, "creation_date": "2023-02-03T06:17:02Z", "issue_submitter": "engwan", "body": "Steps to reproduce\nWhen having a route with a regex constraint with a negative lookahead, we get exceptions when matching some routes.\nI simplified the regex and created a minimal example below:\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"rails\", \"~> 7.0.0\"\nend\n\nrequire \"rack/test\"\nrequire \"action_controller/railtie\"\n\nclass TestApp < Rails::Application\n  config.root = __dir__\n  config.hosts << \"example.org\"\n  config.session_store :cookie_store, key: \"cookie_store_key\"\n  secrets.secret_key_base = \"secret_key_base\"\n\n  config.logger = Logger.new($stdout)\n  Rails.logger  = config.logger\n\n  routes.draw do\n    get '*namespace_id/:project_id/bar', to: 'test#index', constraints: { namespace_id: /(?!api\\/)[a-zA-Z0-9_\\\\]+/, project_id: /[a-zA-Z0-9]+/ }\n\n    # This version works:\n    #get '*namespace_id/:project_id/bar', to: 'test#index', constraints: lambda { |req| req.params[:namespace_id].match?(/\\A(?!api\\/)[a-zA-Z0-9_\\\\]+\\z/) && req.params[:project_id].match?(/\\A[a-zA-Z0-9]+\\z/) }\n\n    get '/api/foo/bar', to: 'test#index'\n  end\nend\n\nclass TestController < ActionController::Base\n  include Rails.application.routes.url_helpers\n\n  def index\n    render plain: \"Home\"\n  end\nend\n\nrequire \"minitest/autorun\"\n\nclass BugTest < Minitest::Test\n  include Rack::Test::Methods\n\n  def test_returns_success\n    get \"/api/foo/bar\"\n    assert last_response.ok?\n  end\n\n  private\n    def app\n      Rails.application\n    end\nend\nExpected behavior\nIt should match the second route and render the page\nActual behavior\nIt raises an exception:\nStarted GET \"/api/foo/bar/\" for 127.0.0.1 at 2023-02-03 14:04:19 +0800\n\nNoMethodError (undefined method `names' for nil:NilClass):\n\nactionpack (7.0.4.2) lib/action_dispatch/journey/router.rb:126:in `block in find_routes'\nactionpack (7.0.4.2) lib/action_dispatch/journey/router.rb:123:in `map!'\nactionpack (7.0.4.2) lib/action_dispatch/journey/router.rb:123:in `find_routes'\nactionpack (7.0.4.2) lib/action_dispatch/journey/router.rb:32:in `serve'\nactionpack (7.0.4.2) lib/action_dispatch/routing/route_set.rb:852:in `call'\n\nSystem configuration\nRails version: 7.0.4.2\nRuby version: 3.0.5", "number_of_comments": 10, "comment_authors": ["engwan", "engwan", "pedro108", "pedro108", "jesse-shopify", "jesse-shopify", "engwan", "pedro108", "rails-bot", "rails-bot"]},
{"title": "Track yarn version", "link": "https://github.com/rails/rails/issues/47416", "labels": [], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3518202304840088, "creation_date": "2023-02-16T14:38:21Z", "issue_submitter": "rubys", "body": "Steps to reproduce\nrails new with 7.1, specifying a javavascript option\nExpected behavior\npackage manager should be set in package.json\nActual behavior\nNo package manager in package.json\nSystem configuration\nRails version: 7.1\nRuby version: 3.2.1\nSee also\n\nChange dockerfile from using Node 19 to match dev environment #46794 (comment)\nhttps://nodejs.org/dist/latest-v16.x/docs/api/all.html#all_packages_packagemanager\nfly-apps/dockerfile-rails@c1184c5", "number_of_comments": 6, "comment_authors": ["rubys", "rails-bot", "rails-bot", "rubys", "rafaelfranca", "rubys"]},
{"title": "Inconsistent scoping rules for all queries: true scopes and #reload", "link": "https://github.com/rails/rails/issues/47357", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4008150100708008, "creation_date": "2023-02-10T17:28:44Z", "issue_submitter": "pjambet", "body": "Steps to reproduce\n\nCollapsed because the test is pretty long\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\nrequire \"debug\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n    t.boolean :deleted, default: false\n  end\nend\n\nclass SQLCounter\n  class << self\n    attr_accessor :ignored_sql, :log, :log_all\n    def clear_log; self.log = []; self.log_all = []; end\n  end\n\n  clear_log\n\n  def call(name, start, finish, message_id, values)\n    return if values[:cached]\n\n    sql = values[:sql]\n    self.class.log_all << sql\n    self.class.log << sql unless [\"SCHEMA\", \"TRANSACTION\"].include? values[:name]\n  end\nend\n\nActiveSupport::Notifications.subscribe(\"sql.active_record\", SQLCounter.new)\n\ndef capture_sql(output = nil)\n  ActiveRecord::Base.connection.materialize_transactions\n  SQLCounter.clear_log\n  yield\n  log = SQLCounter.log.dup.first # I only care about the first here\n  log\nensure\n  log = SQLCounter.log.dup.first if log.nil?\n  output.concat(log) if output\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\n  default_scope -> { where(deleted: false) }\n  default_scope -> { where(post_id: 1) }, all_queries: true\nend\n\nclass CommentWithOnlyDefaultScopeWithoutAllQueries < ActiveRecord::Base\n  self.table_name = \"comments\"\n  belongs_to :post\n  default_scope -> { where(deleted: false) }\nend\n\nclass CommentWithOnlyDefaultScopeWithAllQueries < ActiveRecord::Base\n  self.table_name = \"comments\"\n  belongs_to :post\n  default_scope -> { where(post_id: 1) }, all_queries: true\nend\n\nclass BugTest < Minitest::Test\n  def setup\n    if Post.find_by(id: 1) # only run this before once\n      @post1 = Post.find(1)\n      @comment1 = Comment.unscoped.find(1)\n\n      @post2 = Post.find(2)\n      @comment2 = Comment.unscoped.find(2)\n    else\n      @post1 = Post.create!\n      @comment1 = @post1.comments.create!\n\n      @post2 = Post.create!\n      @comment2 = @post2.comments.create!\n    end\n  end\n\n  def test_scope_without_all_queries_is_ignored_on_reload_on_a_model_without_default_scopes\n    # Expected behavior: scope not flagged with all_queries, is ignored, currently works:\n    assert Post.where(\"1=2\").scoping { @post1.reload }\n  end\n\n  def test_scope_with_all_queries_is_applied_on_reload_on_a_model_without_default_scopes\n    # Expected behavior: scope flagged with all_queries, is applied, currently works:\n    assert_raises(ActiveRecord::RecordNotFound) { Post.where(\"1=2\").scoping(all_queries: true) { @post1.reload } }\n  end\n\n  ###\n\n  def test_default_scope_with_all_queries_is_applied_on_reload_on_a_model_with_both_default_scopes_with_and_without_all_queries\n    # Expected behavior: default scope is flagged with all_queries, scope is applied, currently works:\n    sql = capture_sql { assert @comment1.reload } # where post_id = 1 matches that row\n    assert_match(/WHERE \"comments\".\"post_id\" = \\? AND \"comments\".\"id\" = \\? LIMIT \\?\\Z/, sql)\n    sql = +\"\"\n    assert_raises(ActiveRecord::RecordNotFound) { capture_sql(sql) { @comment2.reload } }  # where post_id = 1 doesn't match that row\n    assert_match(/WHERE \"comments\".\"post_id\" = \\? AND \"comments\".\"id\" = \\? LIMIT \\?\\Z/, sql)\n  end\n\n  def test_scope_without_all_queries_is_ignored_on_reload_on_a_model_with_both_default_scopes_with_and_without_all_queries\n    # skip(\"doesnt work\")\n    # Expected behavior: only the default scope flagged with all_queries: true is applied, the other ones, on deleted = false and 1=1, are not, does not work:\n    sql = capture_sql { Comment.where(\"1=1\").scoping { @comment1.reload } }\n    assert_match(/WHERE \"comments\".\"post_id\" = \\? AND \"comments\".\"id\" = \\? LIMIT \\?\\Z/, sql) # fails because 1=1 & deleted = false are incorrectly applied\n  end\n\n  def test_scope_with_all_queries_is_applied_but_only_default_scope_with_all_queries_on_reload_on_a_model_with_both_default_scopes_with_and_without_all_queries\n    # skip(\"doesnt work\")\n    # Expected behavior: only the default scope flagged with all_queries: true is applied, does not work:\n    sql = capture_sql { Comment.where(\"1=1\").scoping(all_queries: true) { @comment1.reload } }\n    assert_match(/WHERE \"comments\".\"post_id\" = \\? AND \\(1=1\\) AND \"comments\".\"id\" = \\? LIMIT \\?\\Z/, sql) # fails because deleted = false is incorrectly applied\n  end\n\n  def test_scope_without_all_queries_is_ignored_on_reload_on_a_model_with_only_a_default_scope_without_all_queries\n    # Expected behavior: only the default scope flagged with all_queries: true is applied, currently works:\n    comment1 = CommentWithOnlyDefaultScopeWithoutAllQueries.find(1)\n    sql = capture_sql {  CommentWithOnlyDefaultScopeWithoutAllQueries.where(\"1=2\").scoping { comment1.reload } }\n    assert_match(/WHERE \"comments\".\"id\" = \\? LIMIT \\?\\Z/, sql)\n  end\n\n  def test_scope_with_all_queries_is_applied_on_reload_on_a_model_with_only_a_default_scope_without_all_queries\n    # skip(\"doesnt work\")\n    # Expected behavior: only the explicit scope flagged with all_queries: true is applied, does not work:\n    comment1 = CommentWithOnlyDefaultScopeWithoutAllQueries.find(1)\n    sql = capture_sql { CommentWithOnlyDefaultScopeWithoutAllQueries.where(\"1=1\").scoping(all_queries: true) { comment1.reload } }\n    assert_match(/WHERE \\(1=1\\) AND \"comments\".\"id\" = \\? LIMIT \\?\\Z/, sql) # Fails because deleted = false is incorrectly included\n  end\n\n  def test_scope_without_all_queries_is_ignored_on_reload_on_a_model_with_only_a_default_scope_with_all_queries\n    # skip(\"does not work\")\n    # Expected behavior: only the default scope flagged with all_queries: true is applied, does not work:\n    comment1 = CommentWithOnlyDefaultScopeWithAllQueries.find(1)\n    sql = capture_sql { CommentWithOnlyDefaultScopeWithAllQueries.where(\"1=1\").scoping { comment1.reload } }\n    assert_match(/WHERE \"comments\".\"post_id\" = \\? AND \"comments\".\"id\" = \\? LIMIT \\?\\Z/, sql) # Fails because 1=1 is incorrectly included\n  end\n\n  def test_scope_with_all_queries_is_applied_on_reload_on_a_model_with_only_a_default_scope_with_all_queries\n    # Expected behavior: the default scope flagged with all_queries: true and the explicit scope flagged with all_queries: true are applied, works:\n    comment1 = CommentWithOnlyDefaultScopeWithAllQueries.find(1)\n    sql = capture_sql { CommentWithOnlyDefaultScopeWithAllQueries.where(\"1=1\").scoping(all_queries: true) { comment1.reload } }\n    assert_match(/WHERE \"comments\".\"post_id\" = \\? AND \\(1=1\\) AND \"comments\".\"id\" = \\? LIMIT \\?\\Z/, sql)\n  end\nend\n\nExpected behavior\nI would expect all tests to pass. In other words, scopes not flagged with all_queries: true should never be applied on #reload, whether they are added as default scopes on the model, or created explicitly with .scoping.\nActual behavior\nThe following cases lead to scopes not flagged with all_queries: true to be applied:\n\nCalling .scoping() on a model with two default scopes, one with all_queries: true, one without, causes all three scopes to be applied, instead of only the default one with all_queries: true. See test test_scope_without_all_queries_is_ignored_on_reload_on_a_model_with_both_default_scopes_with_and_without_all_queries above\nCalling .scoping(all_queries: true) on a model with two default scopes, one with all_queries: true, one without, causes all three scopes to be applied, instead of only the two scopes with all_queries: true one. See test test_scope_with_all_queries_is_applied_but_only_default_scope_with_all_queries_on_reload_on_a_model_with_both_default_scopes_with_and_without_all_queries above\nCalling .scoping(all_queries: true) on a model with a default scope not flagged with all_queries: true causes both scopes to be applied, instead of only the all_queries: true one. See test test_scope_with_all_queries_is_applied_on_reload_on_a_model_with_only_a_default_scope_without_all_queries above\nCalling .scoping() on a model with a default scope flagged with all_queries: true causes both scopes to be applied instead of only the default one with all_queries: true. See test test_scope_without_all_queries_is_ignored_on_reload_on_a_model_with_only_a_default_scope_with_all_queries above\n\nAll four cases are probably the same underlying issue in terms of how scopes are applied but I figured I would make an exhaustive list of all combinations and expected outcome.\nRelated issue: #46731 (and PR that fixed it)\n\nI didn't get a chance yet, but I'm curious if the same issue happens with other instance methods such as #update and #destroy, as in, only scopes with all_queries: true should be applied.\nSystem configuration\nRails version: main@c88ca3b\nRuby version:  ruby 3.1.1p18 (2022-02-18 revision 53f5fc4236) [arm64-darwin21]", "number_of_comments": 2, "comment_authors": ["pjambet", "rails-bot"]},
{"title": "Active Storage previewable not resized when using proxy mode on storage service local", "link": "https://github.com/rails/rails/issues/47071", "labels": ["\n                activestorage\n", "\n                attached PR\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7853991985321045, "creation_date": "2023-01-20T09:16:27Z", "issue_submitter": "mbodlund", "body": "Steps to reproduce\nActive proxy mode or use rails_storage_proxy_path to generate preview of a video or pdf.\nRails.application.config.active_storage.resolve_model_to_route = :rails_storage_proxy\ndevelopment.rb\nconfig.active_storage.service = :local\n\nactive_storage.rb\nRails.application.config.active_storage.resolve_model_to_route = :rails_storage_proxy\n\nIn a view\nimage_tag message.video.preview(resize_to_limit: [100, 100]) \nExpected behavior\nAn jpg version resized to limit 100x100\nActual behavior\nReturns a jpg version in the same size as the original video (or pdf)\nIf you turn off rails_storage_proxy it works as expected.\nSystem configuration\nRails 7.0.4.1\nffmpeg version 5.1.2 (also tried version 3.x and 4.x with the same result)\nmutool version 1.20.0\nRuby 3.1.2", "number_of_comments": 2, "comment_authors": ["mbodlund", "alexandreruban"]},
{"title": "COUNT(DISTINCT ..) using a column name from arel_table returns incorrect result against MariaDB", "link": "https://github.com/rails/rails/issues/47125", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.786430835723877, "creation_date": "2023-01-24T18:04:01Z", "issue_submitter": "kwojcik", "body": "Steps to reproduce\nTest passes against homebrew MySQL 5.7.40 Homebrew and fails against MariaDB 5.5.5-10.10.2-MariaDB-1:10.10.2+maria~ubu2204. MySQL was run using homebrew. MariaDB was run using docker run --name mariadb -e MARIADB_ALLOW_EMPTY_ROOT_PASSWORD=true -p 3306:3306 -d mariadb.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"~> 7.0.0\"\n  gem \"mysql2\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"mysql2\", database: \"bug_test\", user: 'root', host: '127.0.0.1', port: 3306)\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n    t.string :status\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    post = Post.create!\n    post.comments << Comment.create!(status: 'a')\n    post.comments << Comment.create!(status: 'b')\n\n    expected = {'a' => 1, 'b' => 1}\n    assert_equal expected, Comment.group(:status).distinct.count(:post_id)\n    assert_equal expected, Comment.group(:status).distinct.count(Comment.arel_table[:post_id])\n  end\nend\nExpected behavior\nBoth queries should return the same result\nActual behavior\nUsing an arel_table column name in the count clause causes the result to always set the count to 0 on MariaDB.\nSystem configuration\nRails version: 7.0.4.1\nRuby version: 3.1.1", "number_of_comments": 2, "comment_authors": ["kwojcik", "yahonda"]},
{"title": "Rails logs a 200 even if Rack::ConditionalGet has replaced it with a 304", "link": "https://github.com/rails/rails/issues/46869", "labels": ["\n                actionpack\n", "\n                attached PR\n", "\n                With reproduction steps\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.777625560760498, "creation_date": "2023-01-02T17:58:04Z", "issue_submitter": "matteoredz", "body": "Steps to reproduce\n# Create a new Rails api_only application and run it.\nrails new my_api --api\n\n# Make an HTTP call, I'm using HTTPie here.\nhttp -h get http://localhost:3000\n\n# Get the ETag header from the response\n# and submit again the same request with the `If-None-Match` header.\nhttp -h get http://localhost:3000 'If-None-Match:W/\"cda84c1039ef9b25d5aed03568965293\"'\nExpected behavior\nThe Rack::ConditionalGet replaces the 200 with a 304 and Rails logs the 304\nActual behavior\nThe Rack::ConditionalGet replaces the 200 with a 304 but Rails still logs the 200\nStarted GET \"/\" for ::1 at 2023-01-02 18:52:50 +0100\nProcessing by Rails::WelcomeController#index as */*\nCompleted 200 OK in 0ms (Views: 0.2ms | ActiveRecord: 0.0ms | Allocations: 213)\nSystem configuration\nRails version: 7.0.4\nRuby version: 3.1.2", "number_of_comments": 6, "comment_authors": ["matteoredz", "fatkodima", "matteoredz", "skipkayhil", "rails-bot", "zzak"]},
{"title": "ActiveStorage::FileNotFoundError due to upload after commit", "link": "https://github.com/rails/rails/issues/47047", "labels": ["\n                activestorage\n", "\n                docs\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8254194259643555, "creation_date": "2023-01-18T10:16:33Z", "issue_submitter": "sbungartz", "body": "We were getting ActiveStorage::FileNotFoundErrors spuriously and are fairly confident that this is a race condition in the way ActiveStorage handles uploads and attachment.\nSteps to reproduce\nIn the rails guides, the recommended set up for a controller that attaches a file to a model is as follows:\nclass SignupController < ApplicationController\n  def create\n    user = User.create!(user_params)\n    redirect_to root_path\n  end\n\n  private\n  def user_params\n    params.require(:user).permit(:email_address, :password, :avatar)\n  end\nend\nWhen using this recommended set up Rails will upload the file after committing the creation and attachment of the Blob to the model.\nWithin the same thread this is not a problem because the hook will obviously wait until the upload is finished and other code runs that might depend on that file.\nHowever since the Blob and Attachment are already committed in the database, parallel processes like integrations polling for updates, or even just users clicking on the entity at just the wrong moment, will already see the attachment and try to download it causing an ActiveStorage::FileNotFoundError.\nExpected behavior\nBefore the file is actually uploaded, the User should not be committed to the database.\nFor updates, the Attachment should not be committed to the database before upload is finished.\nActual behavior\nThe new user is committed with the Blob attached before the file is uploaded. Other requests or background tasks can find that User causing an ActiveStorage::FileNotFoundError when they try to download the avatar.\nOur workaround\nRewriting the controller like this solves the problem as the file is uploaded before the change is committed to the database:\nEdit: The original version of the workaround that I posted broke presence-validation. With this updated variant, we still just assign nil to the avatar, if the param is not sent, so displaying form errors still works normally.\nclass SignupController < ApplicationController\n  def create\n    user = User.new(user_params.except(:avatar)) # Note this change, to avoid creating the attachment twice.\n    user.avatar = try_create_and_upload_blob!(user_params.fetch(:avatar, nil))\n\n    user.save!\n    redirect_to root_path\n  end\n\n  private\n  def user_params\n    params.require(:user).permit(:email_address, :password, :avatar)\n  end\n\n  # This can also be put somewhere as a static method for reuse in different controllers.\n  def try_create_and_upload_blob!(uploaded_file)\n    return nil if uploaded_file.blank?\n    ActiveStorage::Blob.create_and_upload!(\n      io: uploaded_file.to_io,\n      filename: uploaded_file.original_filename,\n    )\n  end\nend\nThis makes sure, that the file is completely uploaded before the Blob is attached to the User. Of course this is quite a bit more cumbersome.\nOther considerations\nI could also see other problems arising from doing a long upload within a transaction, so I was wondering if this was intentional.\nIf upload it is really supposed to be happening in the after_commit, at least the guide should point out these potential issues and maybe we can even find a way to make uploading before committing less verbose and cumbersome.\nPotentially related issues\nThese issues might be related:\n\nActive Storage: FileNotFoundError on AnalyzeJob and resulting/being cause of  missing image #42003\nActiveStorage::FileNotFoundError in AnalyzeJob due to enqueue-before-upload #39107\n\nSystem configuration\nRails version: 6.1.6\nRuby version: 3.1.3", "number_of_comments": 7, "comment_authors": ["sbungartz", "zzak", "sbungartz", "zzak", "sbungartz", "Polo2", "rails-bot"]},
{"title": "Child is created twice when Parent has_one Child and update Parent from before_create of Child.", "link": "https://github.com/rails/rails/issues/47171", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                With reproduction steps\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3765287399291992, "creation_date": "2023-01-28T23:29:19Z", "issue_submitter": "kyanagi", "body": "Steps to reproduce\nThis problem is not reproduced if we set has_many :comments instead of has_one :comment.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.integer :status\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_one :comment\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\n  before_create :update_post_status\n\n  def update_post_status\n    post.update!(status: 2)\n  end\nend\n\nclass BugTest < Minitest::Test\n  def test_comment_is_created_only_once\n    post = Post.create!\n    Comment.create!(post:)\n\n    pp Comment.all\n    assert_equal 1, Comment.count\n  end\nend\nExpected behavior\nComment is created only once.\nActual behavior\nComment is created twice.\n% ruby b.rb\nFetching https://github.com/rails/rails.git\nFetching gem metadata from https://rubygems.org/......\nResolving dependencies...\nUsing rake 13.0.6\nUsing concurrent-ruby 1.2.0\nUsing connection_pool 2.3.0\nUsing minitest 5.17.0\nUsing builder 3.2.4\nUsing erubi 1.12.0\nUsing racc 1.6.2\nUsing crass 1.0.6\nUsing rack 3.0.4.1\nUsing nio4r 2.5.8\nUsing websocket-extensions 0.1.5\nUsing zeitwerk 2.6.6\nUsing marcel 1.0.2\nUsing mini_mime 1.1.2\nUsing date 3.3.3\nUsing timeout 0.3.1\nUsing bundler 2.4.1\nUsing thor 1.2.1\nUsing webrick 1.8.1\nUsing sqlite3 1.6.0 (arm64-darwin)\nUsing i18n 1.12.0\nUsing tzinfo 2.0.6\nUsing nokogiri 1.14.0 (arm64-darwin)\nUsing rack-session 2.0.0\nUsing websocket-driver 0.7.5\nUsing net-protocol 0.2.1\nUsing rack-test 2.0.2\nUsing activesupport 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)\nUsing loofah 2.19.1\nUsing net-imap 0.3.4\nUsing net-pop 0.1.2\nUsing net-smtp 0.3.3\nUsing rackup 2.1.0\nUsing rails-dom-testing 2.0.3\nUsing rails-html-sanitizer 1.5.0\nUsing activemodel 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)\nUsing mail 2.8.0.1\nUsing globalid 1.1.0\nUsing actionview 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)\nUsing activerecord 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)\nUsing actionpack 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)\nUsing activejob 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)\nUsing actioncable 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)\nUsing railties 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)\nUsing activestorage 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)\nUsing actionmailer 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)\nUsing actionmailbox 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)\nUsing actiontext 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)\nUsing rails 7.1.0.alpha from https://github.com/rails/rails.git (at main@0258cc4)\n-- create_table(:posts, {:force=>true})\nD, [2023-01-29T08:17:44.598399 #32858] DEBUG -- :    (0.0ms)  DROP TABLE IF EXISTS \"posts\"\nD, [2023-01-29T08:17:44.598584 #32858] DEBUG -- :    (0.1ms)  CREATE TABLE \"posts\" (\"id\" integer PRIMARY KEY AUTOINCREMENT NOT NULL, \"status\" integer)\n   -> 0.0045s\n-- create_table(:comments, {:force=>true})\nD, [2023-01-29T08:17:44.598686 #32858] DEBUG -- :    (0.0ms)  DROP TABLE IF EXISTS \"comments\"\nD, [2023-01-29T08:17:44.598756 #32858] DEBUG -- :    (0.0ms)  CREATE TABLE \"comments\" (\"id\" integer PRIMARY KEY AUTOINCREMENT NOT NULL, \"post_id\" integer)\n   -> 0.0001s\nD, [2023-01-29T08:17:44.599317 #32858] DEBUG -- :    (0.0ms)  CREATE TABLE \"schema_migrations\" (\"version\" varchar NOT NULL PRIMARY KEY)\nD, [2023-01-29T08:17:44.599833 #32858] DEBUG -- :    (0.0ms)  CREATE TABLE \"ar_internal_metadata\" (\"key\" varchar NOT NULL PRIMARY KEY, \"value\" varchar, \"created_at\" datetime(6) NOT NULL, \"updated_at\" datetime(6) NOT NULL)\nD, [2023-01-29T08:17:44.607881 #32858] DEBUG -- :   ActiveRecord::InternalMetadata Load (0.6ms)  SELECT * FROM \"ar_internal_metadata\" WHERE \"ar_internal_metadata\".\"key\" = ? ORDER BY \"ar_internal_metadata\".\"key\" ASC LIMIT 1  [[nil, \"environment\"]]\nD, [2023-01-29T08:17:44.608046 #32858] DEBUG -- :   ActiveRecord::InternalMetadata Create (0.0ms)  INSERT INTO \"ar_internal_metadata\" (\"key\", \"value\", \"created_at\", \"updated_at\") VALUES ('environment', 'development', '2023-01-28 23:17:44.607921', '2023-01-28 23:17:44.607923')\nRun options: --seed 3183\n\n# Running:\n\nD, [2023-01-29T08:17:44.627165 #32858] DEBUG -- :   TRANSACTION (0.0ms)  begin transaction\nD, [2023-01-29T08:17:44.627216 #32858] DEBUG -- :   Post Create (0.1ms)  INSERT INTO \"posts\" DEFAULT VALUES\nD, [2023-01-29T08:17:44.627310 #32858] DEBUG -- :   TRANSACTION (0.0ms)  commit transaction\nD, [2023-01-29T08:17:44.632578 #32858] DEBUG -- :   TRANSACTION (0.0ms)  begin transaction\nD, [2023-01-29T08:17:44.632635 #32858] DEBUG -- :   Post Update (0.1ms)  UPDATE \"posts\" SET \"status\" = ? WHERE \"posts\".\"id\" = ?  [[\"status\", 2], [\"id\", 1]]\nD, [2023-01-29T08:17:44.632850 #32858] DEBUG -- :   Comment Create (0.0ms)  INSERT INTO \"comments\" (\"post_id\") VALUES (?)  [[\"post_id\", 1]]\nD, [2023-01-29T08:17:44.632919 #32858] DEBUG -- :   Comment Create (0.0ms)  INSERT INTO \"comments\" DEFAULT VALUES\nD, [2023-01-29T08:17:44.632982 #32858] DEBUG -- :   TRANSACTION (0.0ms)  commit transaction\nD, [2023-01-29T08:17:44.637644 #32858] DEBUG -- :   Comment Load (0.0ms)  SELECT \"comments\".* FROM \"comments\" /* loading for pp */ LIMIT ?  [[\"LIMIT\", 11]]\n[#<Comment:0x000000010b649388 id: 1, post_id: 1>, #<Comment:0x000000010b649108 id: 2, post_id: nil>]\nD, [2023-01-29T08:17:44.637970 #32858] DEBUG -- :   Comment Count (0.0ms)  SELECT COUNT(*) FROM \"comments\"\nF\n\nFailure:\nBugTest#test_comment_is_created_only_once [b.rb:51]:\nExpected: 1\n  Actual: 2\n\n\nrails test b.rb:46\n\n\n\nFinished in 0.013718s, 72.8969 runs/s, 72.8969 assertions/s.\n1 runs, 1 assertions, 1 failures, 0 errors, 0 skips\n\nSystem configuration\nRails version: main@0258cc4\nRuby version: ruby 3.2.0 (2022-12-25 revision a528908271) [arm64-darwin21]", "number_of_comments": 6, "comment_authors": ["kyanagi", "albertpaulp", "JeffLtz", "rails-bot", "kyanagi", "zzak"]},
{"title": "ActiveStorage::MirrorJob always uses the default service, even if overridden via has_*_attached ..., service: :another_service", "link": "https://github.com/rails/rails/issues/46806", "labels": ["\n                activestorage\n", "\n                attached PR\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6937675476074219, "creation_date": "2022-12-23T18:56:11Z", "issue_submitter": "jnimety", "body": "I ran into this when trying to migrate all of my attached from local storage to s3. After setting up mirroring and running ActiveStorage::Blob.find_each &:mirror_later I was surprised to find all of my attachments in the default storage service, even if a different service had been specified via has_*_attached ..., service: ...\nI think the culprit is here:\n\n\n\nrails/activestorage/app/jobs/active_storage/mirror_job.rb\n\n\n         Line 13\n      in\n      a790203\n\n\n\n\n\n\n ActiveStorage::Blob.service.try(:mirror, key, checksum: checksum) \n\n\n\n\n\nActiveStorage::Blob.service the default service. The other jobs pass blob to perform... Is there any reason not to pass blob here as well, and use blob.service instead of ActiveStorage::Blob.service?\nIf that's acceptable I'm happy to submit a PR. Thanks!", "number_of_comments": 4, "comment_authors": ["jnimety", "ghiculescu", "jnimety", "skipkayhil"]},
{"title": "Serialized attributes assigned with accepts_nested_attributes_for throw Psych::DisallowedClass errors", "link": "https://github.com/rails/rails/issues/46684", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7537589073181152, "creation_date": "2022-12-09T14:36:18Z", "issue_submitter": "akaspick", "body": "Steps to reproduce\nAssigning serializable attributes to child associations via accepts_nested_attributes_for throws Psych::DisallowedClass: Tried to load unspecified class: ActiveSupport::HashWithIndifferentAccess errors during the serialization process.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", git: 'https://github.com/rails/rails'\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :customers, force: true do |t|\n  end\n  create_table :orders, force: true do |t|\n    t.text :data\n    t.belongs_to :customer\n  end\nend\n\nclass Customer < ActiveRecord::Base\n  has_many :orders\n  accepts_nested_attributes_for :orders\nend\nclass Order < ActiveRecord::Base\n  serialize :data, Hash\n  belongs_to :customer\nend\n\nclass BugTest < Minitest::Test\n  def test_serialization_for_new_record\n    order_attributes = [{'data' => {'test' => 1}}]\n\n    assert_equal Hash, order_attributes.first.class\n    assert_equal Hash, order_attributes.first['data'].class\n\n    # NOTE\n    # Raises Psych::DisallowedClass: Tried to load unspecified class: ActiveSupport::HashWithIndifferentAccess\n    # Error due to conversion of Hash to HashWithIndifferentAccess at https://github.com/rails/rails/blob/main/activerecord/lib/active_record/nested_attributes.rb#L518\n    Customer.new orders_attributes: order_attributes\n  end\nend\nExpected behavior\nWhen using a Hash with the serialize method, I expect to be able to assign a hash of values with accepts_nested_attributes_for without issues.\nActual behavior\nCurrently when using a serialize :data, Hash attribute, you can't assign an actual hash to the attribute via parameters set using the accepts_nested_attributes_for method.  When doing so the hash to be serialized is converted to a HashWithIndifferentAccess which is not allowed with the YAML/Psych loader and a Psych::DisallowedClass: Tried to load unspecified class: ActiveSupport::HashWithIndifferentAccess error is thrown.\nThe issue is due to a hash conversion in the source at https://github.com/rails/rails/blob/main/activerecord/lib/active_record/nested_attributes.rb#L518\nwith_indifferent_access does a deep hash conversion of keys including the hash attribute to be serialized.  The serialized attribute should not be converted and should be left as-is.\nSystem configuration\nRails version: main branch (issue also exists when using 7.0.4)\nRuby version: 3.1", "number_of_comments": 2, "comment_authors": ["akaspick", "akaspick"]},
{"title": "Deterministically encrypted attributes do not support joins for queries with support_unencrypted_data", "link": "https://github.com/rails/rails/issues/46809", "labels": ["\n                attached PR\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7237379550933838, "creation_date": "2022-12-23T20:58:13Z", "issue_submitter": "ezekg", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Encryption.configure(\n  primary_key: SecureRandom.alphanumeric(32),\n  deterministic_key: SecureRandom.alphanumeric(32),\n  key_derivation_salt: SecureRandom.alphanumeric(32),\n  support_unencrypted_data: true,\n)\n\nActiveRecord::Encryption::ExtendedDeterministicQueries.install_support\n\nActiveRecord::Schema.define do\n  create_table :users, force: true do |t|\n    t.string :email\n  end\n\n  create_table :posts, force: true do |t|\n    t.references :user\n  end\nend\n\nclass User < ActiveRecord::Base\n  encrypts :email, deterministic: true\n\n  has_many :posts\nend\n\nclass Post < ActiveRecord::Base\n  belongs_to :user\n\n  scope :by_user, -> email { joins(:user).where(users: { email: }) }\nend\n\nclass BugTest < Minitest::Test\n  def test_encrypted_join_on_deterministically_encrypted_attributes\n    user = User.create!(email: \"user@test.example\")\n    post = Post.create!(user:)\n\n    assert_includes Post.by_user(user.email), post\n  end\n\n  def test_unencrypted_join_on_deterministically_encrypted_attributes\n    user = ActiveRecord::Encryption.without_encryption { User.create!(email: \"user@test.example\") }\n    post = Post.create!(user:)\n\n    assert_includes Post.by_user(user.email), post\n  end\nend\nExpected behavior\nWhen joining an association on an encrypted attribute with an unencrypted value, when support_unencrypted_data is enabled, I would expect to be able to join on the deterministically encrypted attributes.\nI would expect AR to produce a query using IN:\nSELECT \"posts\".* FROM \"posts\" INNER JOIN \"users\" ON \"users\".\"id\" = \"posts\".\"user_id\" WHERE \"users\".\"email\" IN ('{\"p\":\"PEwzUcqZSnt+OyndCbySB1Q=\",\"h\":{\"iv\":\"AYWjFGhQ2JM4gRCc\",\"at\":\"ZpbYXFfPirsF7Ew7JW5Sbw==\"}}', 'user@test.example')\nActual behavior\nThe query does not use IN. AR joins on the encrypted value only, instead of both the encrypted and unencrypted values:\nSELECT \"posts\".* FROM \"posts\" INNER JOIN \"users\" ON \"users\".\"id\" = \"posts\".\"user_id\" WHERE \"users\".\"email\" = '{\"p\":\"PEwzUcqZSnt+OyndCbySB1Q=\",\"h\":{\"iv\":\"AYWjFGhQ2JM4gRCc\",\"at\":\"ZpbYXFfPirsF7Ew7JW5Sbw==\"}}'\nSimilar issue to #46788.\nSystem configuration\nRails version: 7.0.4\nRuby version: ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-darwin19]", "number_of_comments": 1, "comment_authors": ["ezekg"]},
{"title": "Active Job async adapter may use connections without a lease", "link": "https://github.com/rails/rails/issues/46797", "labels": ["\n                activejob\n", "\n                pinned\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7507760524749756, "creation_date": "2022-12-23T04:15:25Z", "issue_submitter": "georgeclaghorn", "body": "On latest main, tests for an application of mine reliably stall locally and in CI. Sometimes warnings like the following are printed:\nWARNING:  there is already a transaction in progress\nmessage type 0x43 arrived from server while idle\nmessage type 0x5a arrived from server while idle\n\nEnvironment:\n\n\nThe app uses a single Postgres DB and AR’s Postgres adapter.\n\n\nIt uses RSpec and FactoryBot, not Minitest or AR fixtures.\nrspec-core (3.12.0)\n  rspec-support (~> 3.12.0)\nrspec-expectations (3.12.0)\n  diff-lcs (>= 1.2.0, < 2.0)\n  rspec-support (~> 3.12.0)\nrspec-mocks (3.12.0)\n  diff-lcs (>= 1.2.0, < 2.0)\n  rspec-support (~> 3.12.0)\nrspec-rails (6.0.1)\n  actionpack (>= 6.1)\n  activesupport (>= 6.1)\n  railties (>= 6.1)\n  rspec-core (~> 3.11)\n  rspec-expectations (~> 3.11)\n  rspec-mocks (~> 3.11)\n  rspec-support (~> 3.11)\nrspec-support (3.12.0)\n\n\n\nIt’s on Ruby 3.1.3.\n\n\nA git bisect pointed to 1a2ca19 (cc @byroot). That change does seem relevant, but I haven’t been able to reproduce the issue in a minimal app yet. I’ve tried with both Minitest and RSpec.\nThe tests usually stall in around the same place with the same seed, but not exactly the same place. And I looked at two stalled runs with different seeds that didn’t run any common tests before their stalls.\nThis has been difficult to pin down so far but I will keep looking.", "number_of_comments": 14, "comment_authors": ["georgeclaghorn", "byroot", "georgeclaghorn", "byroot", "bensheldon", "georgeclaghorn", "georgeclaghorn", "bensheldon", "georgeclaghorn", "byroot", "bensheldon", "rails-bot", "byroot", "rezonant"]},
{"title": "becomes lost default value on target class", "link": "https://github.com/rails/rails/issues/46653", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7606241703033447, "creation_date": "2022-12-06T11:00:29Z", "issue_submitter": "oniram88", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"~> 7.0.0\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :animals, force: true do |t|\n\n    t.string :name\n    t.string :type\n\n    t.integer :fly_speed\n\n  end\n\nend\n\nclass Animal < ActiveRecord::Base\n  attribute :name, :string, default: \"DEFAULT NAME\"\nend\n\nclass Bird < Animal\n  attribute :fly_speed, :string, default: 100\n\nend\n\nclass BugTest < Minitest::Test\n  def test_becomes_with_defaults\n    animal = Animal.new\n\n    assert_equal \"DEFAULT NAME\", animal.name\n\n    bird = animal.becomes(Bird)\n\n    assert_equal 100, bird.fly_speed\n  end\nend\nExpected behavior\nI expect that the method becomes set correctly the defaults of the model\nActual behavior\nbecomes is coping the @attributes directly from Animal in this case, and so the new model lost the defaults generated during initialization\nSystem configuration\nGems:\n\nactiverecord 7.0.4\n\nRuby version:\n\n3.1.2", "number_of_comments": 8, "comment_authors": ["oniram88", "asif9qureshi", "asif9qureshi", "asif9qureshi", "adrianna-chang-shopify", "asif9qureshi", "oniram88", "rails-bot"]},
{"title": "has_one multiple assignment, update lost", "link": "https://github.com/rails/rails/issues/47135", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.5621466636657715, "creation_date": "2023-01-25T12:37:18Z", "issue_submitter": "montdidier", "body": "Steps to reproduce\n#!/usr/bin/env ruby\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  gem \"rails\", '~> 6.1.0'\n  gem \"sqlite3\"\n  gem \"byebug\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :subscriptions do |t|\n    t.string :name\n  end\n\n  create_table :payment_accounts do |t|\n    t.string :name\n    t.references :subscription\n  end\nend\n\nclass Subscription < ActiveRecord::Base\n  has_one :payment_account, inverse_of: :subscription, dependent: :destroy\nend\n\nclass PaymentAccount < ActiveRecord::Base\n  belongs_to :subscription, inverse_of: :payment_account, optional: true\nend\n\nclass TestDoubleBackwardsAssigment < Minitest::Test\n  def test_double_backward_assignment\n    subscription = Subscription.create(name: 'Example subsciption')\n    originl_payment_account = PaymentAccount.create(subscription: subscription, name: \"Bob's account\")\n    assert_equal \"Bob's account\", subscription.payment_account.name\n\n    new_payment_account = PaymentAccount.new(name: \"Fran's account\")\n    new_payment_account.subscription = subscription\n\n    subscription.payment_account = new_payment_account\n\n    subscription.save!\n\n    assert_equal \"Fran's account\", subscription.reload.payment_account.name\n\n    assert_equal 1, PaymentAccount.count\n  end\nend\nExpected behaviour\nOne would be least surprised to see that Fran's account has been persisted and that there is only one PaymentAccount in the database. The test should show Fran's account as being the associated persisted account and that total PaymentAccounts would be 1.\nUpon inspecting the code it appears the problem probably lies in the area of:\nActiveRecord::Associations::HasOneAssociation#replace\nActual behaviour\nWhat seems to be happening is that that the has_one association , when assigned via the inverse belongs_to relationship, that then receives an additional assignment from the front - does not understand that the has_one entity needs to be persisted and that the existing has_one persisted target needs to be deleted. It seem that the unpersisted target is not checked to see if it is a new record and is assumed to have not changed.  I think it should detect the target is unpersisted, respect the last assignment , reload the the target from the db, destroy it and then make the assignment, then persist the new assignment.\nIt is quite close to doing the right thing. For example there is a check here where the target could potentially be reloaded but I don't quite understand the logic in load_target here with respect to detecting staleness or whether the most up-to-date entity is loaded.\nSystem configuration\nRails version: 6.1.7.2\nRuby version: 3.0.4", "number_of_comments": 4, "comment_authors": ["montdidier", "ahowardm", "montdidier", "joshuay03"]},
{"title": "Unexpected routes in console using app.", "link": "https://github.com/rails/rails/issues/46822", "labels": ["\n                railties\n"], "depth": 5, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7107734680175781, "creation_date": "2022-12-25T12:41:48Z", "issue_submitter": "woto", "body": "Steps to reproduce\nirb(main):013:0> host = \"https://host.ru:443\"\n=> \"https://host.ru:443\"\n\nirb(main):014:0> Rails.application.routes.url_helpers.tests_url(host: host)\n=> \"https://host.ru/tests\"\n\nirb(main):015:0> app.tests_url(host: host)\n=> \"http://host.ru:443/tests\"\n\nirb(main):016:0> \nirb(main):017:0> \n\nirb(main):018:0> host = \"https://host.ru:443/\"\n=> \"https://host.ru:443/\"\n\nirb(main):019:0> Rails.application.routes.url_helpers.tests_url(host: host)\n=> \"https://host.ru/tests\"\n\nirb(main):020:0> app.tests_url(host: host)\n=> \"http://host.ru/tests\"\nExpected behavior\nIn all cases I expect that output will be https://host.ru/tests\nActual behavior\nUnexpected results built with app. are http://host.ru:443/tests and http://host.ru/tests\nSystem configuration\nRails version:\n7.0.4\nRuby version:\nruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]\nCheers!", "number_of_comments": 7, "comment_authors": ["woto", "ghiculescu", "ghiculescu", "woto", "rails-bot", "zzak", "rails-bot"]},
{"title": "ActiveJob's retry behavior is not consistent", "link": "https://github.com/rails/rails/issues/46419", "labels": ["\n                activejob\n", "\n                With reproduction steps\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5187520980834961, "creation_date": "2022-11-04T10:37:42Z", "issue_submitter": "shouichi", "body": "Steps to reproduce\nRun a job with retry attempt 1. The won't be retried.\nclass FooJob < ApplicationJob\n  class FooError < StandardError; end\n\n  retry_on FooError, attempts: 1\n\n  def perform\n    raise FooError\n  end\nend\nExpected behavior\nActiveJob should retry at most the number of times specified by the attempts option.\nActual behavior\nattempts: 0: runs once, no retry\nattempts: 1: runs once, no retry\nattempts: 2: runs once, one retry\nattempts: 3: runs once, two retries\nThe behavior is not consistent. We can either change the behavior to be consistent (won't happen?) or at least document it very clearly.\n#33816 also pointed out the problem.\nSystem configuration\nRails version: Rails 7.0.4\nRuby version: ruby 3.1.1p18 (2022-02-18 revision 53f5fc4236) [x86_64-linux]", "number_of_comments": 6, "comment_authors": ["shouichi", "OvidiuToma", "rails-bot", "rails-bot", "shouichi", "contexterr"]},
{"title": "ActiveRecord column_defaults should not memoize callable defaults", "link": "https://github.com/rails/rails/issues/46521", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.567570686340332, "creation_date": "2022-11-18T18:09:42Z", "issue_submitter": "stanhu", "body": "Steps to reproduce\nThis is somewhat related to #33031, which was fixed via #33925. Let's modify the test in that issue to this:\nbegin\n  require \"bundler/inline\"\nrescue LoadError => e\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\n  raise e\nend\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n  gem \"activerecord\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\n\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\n\nActiveRecord::Schema.define do\n  create_table :widgets, force: true do |t|\n    t.string :uuid\n  end\nend\n\nclass Widget < ActiveRecord::Base\n  attribute :uuid, :string, default: -> { SecureRandom.uuid }\nend\n\nclass CallableAttributeDefaultTest < Minitest::Test\n  def test_callable_default\n    first_default = Widget.column_defaults['uuid']\n    second_default = Widget.column_defaults['uuid']\n\n    refute_equal first_default, second_default\n  end\nend\nExpected behavior\nSince uuid should be generated dynamically, I'd expect each attempt to retrieve the default for the uuid column to change with each invocation.\nThis is important because gems such as statemachines_activerecord call column_defaults, which then causes every default procedure to execute. This can have unintended side effects (e.g. database queries, network calls, etc), especially if you only need the default for a single column.\nActual behavior\nInstead, it's memoized: \n\n\nrails/activerecord/lib/active_record/model_schema.rb\n\n\n        Lines 482 to 490\n      in\n      cf2be23\n\n\n\n\n\n\n def column_defaults \n\n\n\n load_schema \n\n\n\n @column_defaults ||= _default_attributes.deep_dup.to_hash.freeze \n\n\n\n end \n\n\n\n \n\n\n\n def _default_attributes # :nodoc: \n\n\n\n load_schema \n\n\n\n @default_attributes ||= ActiveModel::AttributeSet.new({}) \n\n\n\n end \n\n\n\n\n\n#33925 worked around the issue by doing a deep copy, but I'd argue the correct fix would have been to lazily evaluate the procedure.\nPerhaps we could change AttributeSet to LazyAttributeSet?\nSystem configuration\nRails version: 7.0.4\nRuby version: 2.7.5", "number_of_comments": 5, "comment_authors": ["stanhu", "ghiculescu", "rails-bot", "zzak", "rails-bot"]},
{"title": "Applications using Sprockets, Rails UJS, but not CoffeeScript cannot consume Rails via git prior to Rails UJS abandoning CoffeeScript", "link": "https://github.com/rails/rails/issues/46292", "labels": ["\n                actionview\n", "\n                With reproduction steps\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5447406768798828, "creation_date": "2022-10-20T21:43:31Z", "issue_submitter": "sambostock", "body": "Context\nOur application continues to run into the bug fixed by #46110, as the fix is not present on any release. While discussing temporary monkey patches in Slack, @eileencodes recommended pointing our app to the 7-0-stable branch of Rails, which contains an unreleased backport. When trying to switch over, we ran into the following error:\nLoadError: cannot load such file -- coffee_script\n\nThis same error occurs even if switching from the 7.0.4 published release of the gem to directly to the corresponding v7.0.4 git tag, indicating the issue is due to consuming Rails via git, as opposed to a commit introduced on 7-0-stable since the 7.0.4 release.\nInvestigation\n@bryanparadis and I conducted an investigation and came to the following conclusion:\nPrior to #45546, Rails UJS was written as .coffeescript files.\nWhen a host app still using Sprockets for Javascript and including Rails UJS in its manifest compiles assets it tries to include those files. In the published versions of Rails, these files have been already compiled into regular Javascript, so no additional compilation is necessary.\nIf Rails is being consumed via git, the files only exist as .coffeescript files, so Sprockets tries to load coffee_script to compile them.\nIf the host application does not depend on coffee_script, then this raises a LoadError.\nSteps to reproduce\nReproduction Script\n# /usr/bin/env bash\n\nset -euo pipefail\n\necho 'Preparing directory...'\nrm -rf dummy\nmkdir dummy\ncd dummy\n\necho 'Installing Rails...'\necho 'source \"https://rubygems.org\"' > Gemfile\necho 'gem \"rails\", git: \"https://github.com/rails/rails.git\", branch: \"7-0-stable\"' >> Gemfile\nbundle install --quiet\n\necho 'Initialize Rails app...'\nrails new \\\n\t--force \\\n\t--no-rc \\\n\t--quiet \\\n\t--skip-action-cable \\\n\t--skip-action-mailbox \\\n\t--skip-action-mailer \\\n\t--skip-action-text \\\n\t--skip-active-job \\\n\t--skip-active-record \\\n\t--skip-active-storage \\\n\t--skip-bootsnap \\\n\t--skip-git \\\n\t--skip-hotwire \\\n\t--skip-javascript \\\n\t--skip-jbuilder \\\n\t--skip-keeps \\\n\t--skip-system-test \\\n\t--skip-test \\\n\t.\n\necho 'Using Sprockets for JS...'\nmkdir app/assets/javascripts\ntouch app/assets/javascripts/application.js\necho \"//= link_directory ../javascripts .js\" >> app/assets/config/manifest.js\n\necho \"Using Rails UJS...\"\necho \"//= require rails-ujs\" > app/assets/javascripts/application.js\n\necho \"Precompiling assets using $(bundle info rails | grep '\\*' | sed 's/ *\\* //')...\"\nbundle exec rails assets:precompile\n\necho 'Switching to 7-0-stable version of Rails...'\nsed -i '' 's/gem \"rails\", \"[^\"]*\"/gem \"rails\", github: \"rails\\/rails\", branch: \"7-0-stable\"/' Gemfile\nbundle install --quiet\n\necho \"Precompiling assets using $(bundle info rails | grep '\\*' | sed 's/ *\\* //')...\"\nbundle exec rails assets:precompile\n\n\nExpected behavior\nConsuming a released version of Rails or its equivalent git tag should behave the same.\nActual behavior\nApplications that work with a released version of Rails (e.g. 7.0.4) do not work with the equivalent git tag (e.g. v7.0.4) under certain circumstances:\n\nNot depending on coffee-script\nUsing Sprockets for JavaScript, not Import Maps\nDepending on Rails UJS\n\nSystem configuration\nRails version: v7.0.4\nRuby version: 3.1.2", "number_of_comments": 5, "comment_authors": ["sambostock", "sambostock", "ghiculescu", "skipkayhil", "ghiculescu"]},
{"title": "rendering from templates do now allow you to override contextual details as expected", "link": "https://github.com/rails/rails/issues/46587", "labels": ["\n                actionview\n", "\n                attached PR\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.64501953125, "creation_date": "2022-11-26T15:57:19Z", "issue_submitter": "virtualfunction", "body": "Steps to reproduce\nRendering from a view doesn't allow you to override context defaults like the format. For instance, when rendering an HTML snippet from a template that was rendering JSON, such as below.\n= render partial: 'item', formats: [ :html ] \nExpected behaviour\nThis renders the HTML format of the template rather than the format inherited.\nActual behaviour\nIt renders the inherited format of the parent template (e.g. JSON)\nPotential cause\nrendering_helper.rb needs to be updated to the following\nin_rendering_context(options) do |renderer|\n  if block_given?\n    renderer.render_partial(self, options.merge(partial: options[:layout]), &block)\n  else\n    renderer.render(self, options)\n  end\nend\nCurrently, it's ignoring the new context yielded from in_rendering_context and using the old view_renderer, which I think is wrong.\nSystem configuration\nRails version: 7.0.4\nRuby version: ruby 3.1.3p185 (2022-11-24 revision 1a6b16756e) [x86_64-linux-musl]", "number_of_comments": 3, "comment_authors": ["virtualfunction", "ghiculescu", "rails-bot"]},
{"title": "validates_associated does not properly use context specified in on option.", "link": "https://github.com/rails/rails/issues/46239", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8137340545654297, "creation_date": "2022-10-13T20:29:31Z", "issue_submitter": "austenmadden", "body": "PR with fix and test: #46238\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"~> 7.0.4\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :topics, force: true do |t|\n  end\n\n  create_table :replies, force: true do |t|\n    t.belongs_to :topic\n    t.string :content\n  end\nend\n\nclass Topic < ActiveRecord::Base\n  has_one :reply\n  validates_associated :reply, on: :custom\nend\n\nclass Reply < ActiveRecord::Base\n  belongs_to :topic\n  validates_presence_of :content, on: :custom\nend\n\nclass BugTest < Minitest::Test\n  def test_validates_associated_with_custom_context\n    topic = Topic.create\n    reply = Reply.create(topic: topic)\n    refute topic.valid?(:custom)\n    assert_equal [\"is invalid\"], topic.errors[:reply]\n  end\nend\nExpected behavior\nhttps://api.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated States the following:\n\n:on - Specifies the contexts where this validation is active. Runs in all validation contexts by default nil. You can pass a symbol or an array of symbols. (e.g. on: :create or on: :custom_validation_context or on: [:create, :custom_validation_context])\n\nThis option should be respected when validating the associated object.\nActual behavior\nThe default context is used and a custom context is not respected. In the above test this means the association is considered valid when it should not.\nSystem configuration\nRails version: 7.0.4\nRuby version: 3.1.1", "number_of_comments": 1, "comment_authors": ["austenmadden"]},
{"title": "Collection association callbacks are not fired when set via inverse", "link": "https://github.com/rails/rails/issues/46423", "labels": ["\n                activerecord\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.873492956161499, "creation_date": "2022-11-04T19:16:05Z", "issue_submitter": "agrobbin", "body": "Steps to reproduce\nWhen running the below test case, test_has_many_after_add_via_inverse fails. @gmcgibbon as I mentioned in #37413 (comment), and as you seemed to agree with in #37413 (comment), these 2 seemingly identical scenarios do not result in the same behavior.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :bars, force: true\n\n  create_table :foos, force: true do |t|\n    t.belongs_to :bar, null: false\n  end\nend\n\nclass Foo < ActiveRecord::Base\n  belongs_to :bar\nend\n\nclass Bar < ActiveRecord::Base\n  has_many :foos, inverse_of: :bar, after_add: :increment_callback_count\n\n  attr_accessor :callback_count\n\n  def increment_callback_count(*)\n    self.callback_count ||= 0\n    self.callback_count += 1\n  end\nend\n\nclass BugTest < ActiveSupport::TestCase\n  include ActiveRecord::TestFixtures\n\n  self.use_transactional_tests = true\n\n  def test_has_many_after_add\n    bar = Bar.new\n\n    bar.foos.build\n\n    assert_equal 1, bar.callback_count\n  end\n\n  def test_has_many_after_add_via_inverse\n    foo = Foo.new\n\n    foo.build_bar\n\n    assert_equal 1, foo.bar.callback_count\n  end\nend\n#37413 turned this off, and I believe it actually should fire in at least this scenario.\nExpected behavior\nWhen building an associated record via a belongs_to association, the related has_many association with callbacks should have its callbacks invoked.\nActual behavior\nAny has_many callbacks are not invoked.\nSystem configuration\nRails version: 7.0.4\nRuby version: 3.1.2", "number_of_comments": 7, "comment_authors": ["agrobbin", "rails-bot", "agrobbin", "rails-bot", "agrobbin", "rails-bot", "agrobbin"]},
{"title": "[BUG] Active Record only_integer: true validation doesn't always work with accepts_nested_attributes_for", "link": "https://github.com/rails/rails/issues/46509", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8325772285461426, "creation_date": "2022-11-16T13:50:11Z", "issue_submitter": "mrabets", "body": "Steps to reproduce\n1. Create Post and Comments models with has_many association and accepts_nested_attributes_for\napp/models/post.rb\nclass Post < ApplicationRecord\n  has_many :comments\n\n  accepts_nested_attributes_for :comments\nend\n\napp/models/comment.rb\nclass Comment < ApplicationRecord\n  belongs_to :post\n\n  validates :likes_count, numericality: { only_integer: true  }\nend\n\n2. Setup posts params for nested attributes in the controller\napp/controllers/posts_controller.rb\nclass PostsController < ApplicationController\n  before_action :set_post, only: %i[ show edit update destroy ]\n\n  def index\n    @posts = Post.all\n  end\n\n  def show\n  end\n\n  def new\n    @post = Post.new\n    @post.comments.build\n  end\n\n  def edit\n  end\n\n  def create\n    @post = Post.new(post_params)\n\n    respond_to do |format|\n      if @post.save\n        format.html { redirect_to post_url(@post), notice: \"Post was successfully created.\" }\n        format.json { render :show, status: :created, location: @post }\n      else\n        format.html { render :new, status: :unprocessable_entity }\n        format.json { render json: @post.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  def update\n    respond_to do |format|\n      if @post.update(post_params)\n        format.html { redirect_to post_url(@post), notice: \"Post was successfully updated.\" }\n        format.json { render :show, status: :ok, location: @post }\n      else\n        format.html { render :edit, status: :unprocessable_entity }\n        format.json { render json: @post.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  private\n    def set_post\n      @post = Post.find(params[:id])\n    end\n\n    def post_params\n      params\n        .require(:post)\n        .permit(:title,\n                comments_attributes: [:id, :post_id, :likes_count])\n    end\nend\n\n\n3. Setup posts form\napp/views/posts/_form.html.erb\n<%= form_with(model: @post) do |form| %>\n  <% if post.errors.any? %>\n    <div id=\"error_explanation\">\n      <h2><%= pluralize(post.errors.count, \"error\") %> prohibited this post from being saved:</h2>\n\n      <ul>\n        <% post.errors.each do |error| %>\n          <li><%= error.full_message %></li>\n        <% end %>\n      </ul>\n    </div>\n  <% end %>\n\n  <div class=\"field\">\n    <%= form.label :title %>\n    <%= form.text_field :title %>\n  </div>\n\n  <div class=\"nested_field\">\n    <%= form.fields_for :comments do |comment_subform| %>\n      <%= comment_subform.label :likes_count %>\n      <%= comment_subform.text_field :likes_count %>\n    <% end %>\n  </div>\n\n  <div class=\"actions\">\n    <%= form.submit %>\n  </div>\n<% end %>\n\n4. Create a post with likes_count = 5. Go to the edit page of this post and change likes_count to 5.1 (or any float number from 5.0 to 5.999...)\nExpected behavior\nShould generates the error message: \"Must be integer\"\nActual behavior\nIt doesn't generate the error message and it saves the record\nSystem configuration\nRails version: 7.0.4 (tried also with 6.1.5)\nRuby version: 2.7.6\nVideo showing the bug\n\n\n\n\n\nrails_integer_only_bug.mp4", "number_of_comments": 12, "comment_authors": ["mrabets", "fatkodima", "simi", "fatkodima", "fatkodima", "ghiculescu", "fatkodima", "ghiculescu", "dsusviela", "JohnAnon9771", "rails-bot", "rails-bot"]},
{"title": "TextHelper highlight does sanitisation incorrectly", "link": "https://github.com/rails/rails/issues/46514", "labels": ["\n                actionview\n", "\n                attached PR\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8974435329437256, "creation_date": "2022-11-17T01:13:28Z", "issue_submitter": "viraptor", "body": "Steps to reproduce\nhighlight(\"xxx yyy & zzz\", \"a\")\nExpected behavior\nSanitisation is done on each matched / not matched part of the string separately. This results in:\n\"xxx yyy &amp; zzz\"\n\nActual behavior\nThe whole string is sanitised before the highlighting which results in:\n\"xxx yyy &<mark>a</mark>mp; zzz\"\n\nInstead of sanitising the whole string at once, highlight could do something like:\n\nsplit the string into matching / not matching parts\nescape each part separately\nwrap the matching parts in <mark>...</mark>\njoin them and return with .html_safe\n\nSystem configuration\nRails version: 6+ (main is still affected)\nRuby version: any", "number_of_comments": 3, "comment_authors": ["viraptor", "fgiannattasio", "viraptor"]},
{"title": "High object allocation count from ActiveRecord::ConnectionAdapters::PoolManager#pool_configs", "link": "https://github.com/rails/rails/issues/45906", "labels": ["\n                activerecord\n", "\n                regression\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.1906836032867432, "creation_date": "2022-08-30T12:58:42Z", "issue_submitter": "amarchenkoshopify", "body": "Steps to reproduce\nWhile working on memory efficiency investigation I noticed that a very big bunch of object allocations comes from a single method ActiveRecord::ConnectionAdapters::PoolManager#pool_configs:\n      def pool_configs(role = nil)\n        if role\n          @role_to_shard_mapping[role].values\n        else\n          @role_to_shard_mapping.flat_map { |_, shard_map| shard_map.values }\n        end\n      end \nThis method is called on every activerecord operation and does not cache its result: could we think about a way of caching its result?\ncc @eileencodes\nExpected behavior\n#pool_configs allocates configs once\nActual behavior\n#pool_configs allocates configs every time it is executed\nSystem configuration\nRails version: main branch\nRuby version: 3.1", "number_of_comments": 3, "comment_authors": ["amarchenkoshopify", "eileencodes", "eileencodes"]},
{"title": "main_app.posts_url doesn't include options from constraints", "link": "https://github.com/rails/rails/issues/46412", "labels": ["\n                actionmailer\n", "\n                With reproduction steps\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2706716060638428, "creation_date": "2022-11-03T09:47:14Z", "issue_submitter": "balvig", "body": "Steps to reproduce\nCreate route with constraints:\nRails.application.routes.draw do\n  constraints host: \"admin\" do\n    resources :posts\n  end\nend\nStart console with bin/rails c and compare output:\nExpected behavior\napp.posts_url #=> \"http://admin/posts\"\napp.main_app.posts_url #=> \"http://admin/posts\"\nActual behavior\napp.posts_url #=> \"http://admin/posts\"\napp.main_app.posts_url #=> \"http://www.example.com/posts\"\nSystem configuration\nRails version: 7.0.4\nRuby version: 3.0.0p0\nAnything else\n\nDummy app with failing test case here.\nPossibly related issues:\n\nMounted engine URLs are missing subdomain from constraint #34252\nSupport for subdomain in mailer generated urls thredded/thredded#778", "number_of_comments": 2, "comment_authors": ["balvig", "rails-bot"]},
{"title": "Loss of state after reload, transaction, and after_save_commit callback (regression in ActiveRecord 7.0)", "link": "https://github.com/rails/rails/issues/46363", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4785103797912598, "creation_date": "2022-10-27T19:27:54Z", "issue_submitter": "dmytro-savochkin", "body": "During an upgrade of an existing application from Rails 6.1 to 7.0 I stumbled upon a fail in our specs. Initially I noticed the problem because it caused rspec's mock to lose its stub on the record. However, it's not specific to rspec and mocks: the code below shows an example where record loses the change made to its name inside of a second after_save_commit callback. This only happens under several pretty specific conditions including\na) usage of reload,\nb) then a transaction\nc) with an update of a has_one/has_many through association.\nI managed to find that this regression happens after the changes in this commit: 3328cd1\nIn particular this line causes the problem: \n\n\nrails/activerecord/lib/active_record/persistence.rb\n\n\n         Line 838\n      in\n      3328cd1\n\n\n\n\n\n\n @association_cache = fresh_object.instance_variable_get(:@association_cache) \n\n\n\n\n\nSteps to reproduce\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n  gem \"activerecord\", \"7.0.4\"\n  gem \"sqlite3\", \"1.5.3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :articles, force: true\n  create_table :reviews, force: true do |t|\n    t.integer \"desired_article_id\"\n    t.string \"name\"\n  end\n  create_table :article_reviews, force: true do |t|\n    t.integer  \"review_id\"\n    t.integer  \"article_id\"\n  end\nend\n\nclass Review < ActiveRecord::Base\n  belongs_to :desired_article, class_name: \"Article\", inverse_of: :review\n  has_many :article_reviews\n  has_many :articles, through: :article_reviews\n\n  after_initialize do\n    self.desired_article = build_desired_article\n  end\n\n  after_save_commit :touch_name\n  def touch_name\n    self.name += ' (touched)'\n  end\nend\n\nclass Article < ActiveRecord::Base\n  has_one :review, foreign_key: :desired_article_id, inverse_of: :desired_article\n  has_many :article_reviews\nend\n\nclass ArticleReview < ActiveRecord::Base\n  belongs_to :article, required: true\n  belongs_to :review, required: true\nend\n\nclass BugTest < Minitest::Test\n  def test_reload_transaction_association\n    record = Review.create!(name: 'Some Review Name')\n    assert_equal 'Some Review Name (touched)', record.name\n    record.reload\n    assert_equal 'Some Review Name', record.name\n    record.transaction do\n      record.articles = [record.build_desired_article]\n      record.save!\n    end\n    assert_equal 'Some Review Name (touched)', record.name # <= this assertion fails\n  end\nend\nExpected behavior\nBoth assert_equal calls should pass (as they do with ActiveRecord 6.1.7). Below is the result of running the script if I replace gem \"activerecord\", \"7.0.4\" with gem \"activerecord\", \"6.1.7\".\nD, [2022-10-29T23:13:45.401247 #45166] DEBUG -- :   TRANSACTION (0.0ms)  begin transaction\nD, [2022-10-29T23:13:45.401383 #45166] DEBUG -- :   Article Create (0.1ms)  INSERT INTO \"articles\" DEFAULT VALUES\nD, [2022-10-29T23:13:45.401816 #45166] DEBUG -- :   Review Create (0.0ms)  INSERT INTO \"reviews\" (\"desired_article_id\", \"name\") VALUES (?, ?)  [[\"desired_article_id\", 1], [\"name\", \"Some Review Name\"]]\nD, [2022-10-29T23:13:45.402067 #45166] DEBUG -- :   TRANSACTION (0.0ms)  commit transaction\nD, [2022-10-29T23:13:45.402561 #45166] DEBUG -- :   Review Load (0.1ms)  SELECT \"reviews\".* FROM \"reviews\" WHERE \"reviews\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]]\nD, [2022-10-29T23:13:45.407101 #45166] DEBUG -- :   TRANSACTION (0.0ms)  begin transaction\nD, [2022-10-29T23:13:45.409435 #45166] DEBUG -- :   Article Load (0.1ms)  SELECT \"articles\".* FROM \"articles\" INNER JOIN \"article_reviews\" ON \"articles\".\"id\" = \"article_reviews\".\"article_id\" WHERE \"article_reviews\".\"review_id\" = ?  [[\"review_id\", 1]]\nD, [2022-10-29T23:13:45.409797 #45166] DEBUG -- :   Article Create (0.0ms)  INSERT INTO \"articles\" DEFAULT VALUES\nD, [2022-10-29T23:13:45.410226 #45166] DEBUG -- :   Review Update (0.0ms)  UPDATE \"reviews\" SET \"desired_article_id\" = ? WHERE \"reviews\".\"id\" = ?  [[\"desired_article_id\", 2], [\"id\", 1]]\nD, [2022-10-29T23:13:45.412718 #45166] DEBUG -- :   ArticleReview Create (0.0ms)  INSERT INTO \"article_reviews\" (\"review_id\", \"article_id\") VALUES (?, ?)  [[\"review_id\", 1], [\"article_id\", 2]]\nD, [2022-10-29T23:13:45.412999 #45166] DEBUG -- :   TRANSACTION (0.0ms)  commit transaction\n.\n\nFinished in 0.020931s, 47.7760 runs/s, 143.3281 assertions/s.\n\n1 runs, 3 assertions, 0 failures, 0 errors, 0 skips\nActual behavior\nD, [2022-10-29T23:15:04.871483 #45405] DEBUG -- :   TRANSACTION (0.0ms)  begin transaction\nD, [2022-10-29T23:15:04.871593 #45405] DEBUG -- :   Article Create (0.1ms)  INSERT INTO \"articles\" DEFAULT VALUES\nD, [2022-10-29T23:15:04.872151 #45405] DEBUG -- :   Review Create (0.1ms)  INSERT INTO \"reviews\" (\"desired_article_id\", \"name\") VALUES (?, ?)  [[\"desired_article_id\", 1], [\"name\", \"Some Review Name\"]]\nD, [2022-10-29T23:15:04.872412 #45405] DEBUG -- :   TRANSACTION (0.0ms)  commit transaction\nD, [2022-10-29T23:15:04.873278 #45405] DEBUG -- :   Review Load (0.1ms)  SELECT \"reviews\".* FROM \"reviews\" WHERE \"reviews\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]]\nD, [2022-10-29T23:15:04.877716 #45405] DEBUG -- :   TRANSACTION (0.0ms)  begin transaction\nD, [2022-10-29T23:15:04.879912 #45405] DEBUG -- :   Article Load (0.1ms)  SELECT \"articles\".* FROM \"articles\" INNER JOIN \"article_reviews\" ON \"articles\".\"id\" = \"article_reviews\".\"article_id\" WHERE \"article_reviews\".\"review_id\" = ?  [[\"review_id\", 1]]\nD, [2022-10-29T23:15:04.880268 #45405] DEBUG -- :   Article Create (0.0ms)  INSERT INTO \"articles\" DEFAULT VALUES\nD, [2022-10-29T23:15:04.880719 #45405] DEBUG -- :   Review Update (0.0ms)  UPDATE \"reviews\" SET \"desired_article_id\" = ? WHERE \"reviews\".\"id\" = ?  [[\"desired_article_id\", 2], [\"id\", 1]]\nD, [2022-10-29T23:15:04.882989 #45405] DEBUG -- :   ArticleReview Create (0.0ms)  INSERT INTO \"article_reviews\" (\"review_id\", \"article_id\") VALUES (?, ?)  [[\"review_id\", 1], [\"article_id\", 2]]\nD, [2022-10-29T23:15:04.883306 #45405] DEBUG -- :   Review Update (0.0ms)  UPDATE \"reviews\" SET \"desired_article_id\" = ? WHERE \"reviews\".\"id\" = ?  [[\"desired_article_id\", 2], [\"id\", 1]]\nD, [2022-10-29T23:15:04.883439 #45405] DEBUG -- :   TRANSACTION (0.0ms)  commit transaction\nF\n\nFinished in 0.020406s, 49.0052 runs/s, 147.0156 assertions/s.\n\n  1) Failure:\nBugTest#test_reload_transaction_association [report2.rb:63]:\nExpected: \"Some Review Name (touched)\"\n  Actual: \"Some Review Name\"\n\n1 runs, 3 assertions, 1 failures, 0 errors, 0 skips\nSystem configuration\nRails version: 7.0.4 (same with main)\nRuby version: 3.0.2", "number_of_comments": 4, "comment_authors": ["dmytro-savochkin", "dmytro-savochkin", "rails-bot", "dmytro-savochkin"]},
{"title": "ActiveRecord Rollbacks on errors which happen on commit", "link": "https://github.com/rails/rails/issues/45830", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.217468023300171, "creation_date": "2022-08-15T12:09:14Z", "issue_submitter": "Baxxx", "body": "Steps to reproduce\nIn some of our projects we use Postgres as database, and for some cases we deferred trigger constraints. These triggers fire up when COMMIT is called. Trigger can raise an error, which kills the transaction. ActiveRecord catches the error, and bubbles it up to developer, but it also sends ROLLBACK to Postgres, to which Postgres gives a warning that there is no transaction in progress.\nI didn't test this with sqlite3 or mysql.\nYou can see the reproduction script, and screenshot with the current behavior.\nbegin\n  require \"bundler/inline\"\nrescue LoadError => e\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\n  raise e\nend\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", \"~> 7\"\n  gem \"pg\"\nend\n\nrequire \"active_record\"\nrequire \"logger\"\n\nlogger = Logger.new(STDOUT)\n\n# This connection will do for database-independent bug reports.\npg_opts = {adapter: \"postgresql\", database: \"ar_rollback_after_failed_commit_issue\"}\n\nActiveRecord::Base.establish_connection(pg_opts.except(:database))\nActiveRecord::Base.connection.drop_database(pg_opts[:database])\nActiveRecord::Base.connection.create_database(pg_opts[:database])\nlogger.info \"Database #{pg_opts[:database]} was (re)created.\"\n\nActiveRecord::Base.establish_connection(pg_opts)\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  execute <<~SQL\n    CREATE FUNCTION perform_custom_validation()\n      RETURNS TRIGGER\n      LANGUAGE plpgsql\n      AS $$\n        DECLARE\n          total_invalid INTEGER;\n        BEGIN\n          SELECT COUNT(*) INTO total_invalid\n          FROM things\n          WHERE name = 'bad';\n\n          IF (total_invalid > 0) THEN\n            RAISE EXCEPTION 'There are bad things';\n          END IF;\n          RETURN NULL;\n        END;\n      $$;\n\n    CREATE TABLE \"things\" (\n      \"id\" bigserial primary key,\n      \"name\" character varying NOT NULL\n    );\n\n    CREATE CONSTRAINT\n      TRIGGER bank_transaction_rl_payment_date_validation\n      AFTER INSERT OR UPDATE ON things\n      DEFERRABLE INITIALLY DEFERRED\n      FOR EACH ROW EXECUTE FUNCTION perform_custom_validation();\n  SQL\nend\n\nclass Thing < ActiveRecord::Base\n  validates :name, presence: true\nend\n\n# All good\nlogger.info \"First transaction\"\nThing.create!(name: \"good\")\n\n# AR tries to commit, DB raises an error, AR tries to ROLLBACK, and PG gives a warning\nbegin\n  logger.info \"Second transaction\"\n  Thing.create!(name: \"bad\")\nrescue StandardError\n  # Doesn't matter\nend\nExpected behavior\nActiveRecord should not ROLLBACK, as there is no transaction in progress.\nActual behavior\nActiveRecord tries to ROLLBACK.\n\nSystem configuration\nRails version: 7.0.3.1\nRuby version: 2.7.5p203", "number_of_comments": 12, "comment_authors": ["Baxxx", "skipkayhil", "Baxxx", "nvasilevski", "nvasilevski", "dsusviela", "nvasilevski", "dsusviela", "matthewd", "dsusviela", "matthewd", "dsusviela"]},
{"title": "Google search links to old API docs", "link": "https://github.com/rails/rails/issues/45880", "labels": ["\n                attached PR\n", "\n                docs\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.230717420578003, "creation_date": "2022-08-24T14:33:55Z", "issue_submitter": "abraham", "body": "Steps to reproduce\n\nSearch Google for a Rails API https://www.google.com/search?q=rails+update_all\nFollow link for \"ActiveRecord::Relation - Rails API\"\n\nExpected behavior\nFind documentation for the latest version of Rails. Currently 7.0.3.1.\nhttps://api.rubyonrails.org/classes/ActiveRecord/Relation.html\nActual behavior\nFind documentation for the the very old version of 3.2.3.\nhttps://api.rubyonrails.org/v3.2.3/classes/ActiveRecord/Relation.html", "number_of_comments": 8, "comment_authors": ["abraham", "abraham", "bijoysijo", "salty-ivy", "ghiculescu", "p8", "zzak", "zzak"]},
{"title": "[Bug] ActiveSupport::TimeWithZone's today? method returns wrong results when used with timezone other than UTC.", "link": "https://github.com/rails/rails/issues/46361", "labels": ["\n                activesupport\n", "\n                attached PR\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4528772830963135, "creation_date": "2022-10-27T13:42:52Z", "issue_submitter": "jatindhankhar", "body": "Steps to reproduce\nActiveSupport::TimeWithZone's today? method returns wrong and inconsistent results when used in conjunction with other predicate methods.\nThis was noticed on production when one of the business logic that processed data in local time zone lead to incorrect execution of the data set, on further debugging we discovered it due to the implementation of today? that relies on time instead of the utc and presents wrong and in-correct comparison.\nGemfile\nsource \"https://rubygems.org\"\ngit_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\nruby \"3.1.0\"\n\n# Bundle edge Rails instead: gem \"rails\", github: \"rails/rails\", branch: \"main\"\ngem \"rails\", \"~> 7.0.3\"\n\n# The original asset pipeline for Rails [https://github.com/rails/sprockets-rails]\ngem \"sprockets-rails\"\n\n# Use sqlite3 as the database for Active Record\ngem \"sqlite3\", \"~> 1.4\"\n\n# Use the Puma web server [https://github.com/puma/puma]\ngem \"puma\", \"~> 5.0\"\n\n# Use JavaScript with ESM import maps [https://github.com/rails/importmap-rails]\ngem \"importmap-rails\"\n\n# Hotwire's SPA-like page accelerator [https://turbo.hotwired.dev]\ngem \"turbo-rails\"\n\n# Hotwire's modest JavaScript framework [https://stimulus.hotwired.dev]\ngem \"stimulus-rails\"\n\n# Build JSON APIs with ease [https://github.com/rails/jbuilder]\ngem \"jbuilder\"\n\n# Use Redis adapter to run Action Cable in production\ngem \"redis\", \"~> 4.0\"\n\n# Timecop for mocking\ngem 'timecop', '~> 0.9.5'\n\n# Use Kredis to get higher-level data types in Redis [https://github.com/rails/kredis]\n# gem \"kredis\"\n\n# Use Active Model has_secure_password [https://guides.rubyonrails.org/active_model_basics.html#securepassword]\n# gem \"bcrypt\", \"~> 3.1.7\"\n\n# Windows does not include zoneinfo files, so bundle the tzinfo-data gem\ngem \"tzinfo-data\", platforms: %i[ mingw mswin x64_mingw jruby ]\n\n# Reduces boot times through caching; required in config/boot.rb\ngem \"bootsnap\", require: false\n\n# Use Sass to process CSS\n# gem \"sassc-rails\"\n\n# Use Active Storage variants [https://guides.rubyonrails.org/active_storage_overview.html#transforming-images]\n# gem \"image_processing\", \"~> 1.2\"\n\ngroup :development, :test do\n  # See https://guides.rubyonrails.org/debugging_rails_applications.html#debugging-with-the-debug-gem\n  gem \"debug\", platforms: %i[ mri mingw x64_mingw ]\nend\n\ngroup :development do\n  # Use console on exceptions pages [https://github.com/rails/web-console]\n  gem \"web-console\"\n\n  # Add speed badges [https://github.com/MiniProfiler/rack-mini-profiler]\n  # gem \"rack-mini-profiler\"\n\n  # Speed up commands on slow machines / big apps [https://github.com/rails/spring]\n  # gem \"spring\"\nend\n\ngroup :test do\n  # Use system testing [https://guides.rubyonrails.org/testing.html#system-testing]\n  gem \"capybara\"\n  gem \"selenium-webdriver\"\n  gem \"webdrivers\"\nend\nrequire 'timecop'\nprocessing_date = \"21-Oct-2022\"\ntarget_time = ActiveSupport::TimeZone['New Delhi'].parse(\"22 Oct 2022 02:00 AM\")\nTimecop.freeze(target_time)\n\nlocal_parsed_date = ActiveSupport::TimeZone['New Delhi'].parse(processing_date)\n\nputs \"Freezed time according to zone is #{ActiveSupport::TimeZone['New Delhi'].now}\"\nputs \"Parsed time according to zone is #{local_parsed_date}\"\n\nlocal_parsed_date.today? # Is true\nlocal_parsed_date.past? # Is true\n\n\nExpected behavior\nlocal_parsed_date.today? should return false.\nlocal_parsed_date.past? should return true\nlocal_parsed_date is Fri, 21 Oct 2022 00:00:00.000000000 IST +05:30 while the current time zone of the system is Sat, 22 Oct 2022 02:00:00.000000000 IST +05:30\nThere is a difference of one day between both days.\nAlso a date can either be today? or past? but not both.\nActual behavior\nlocal_parsed_date.today? returns true\nlocal_parsed_date.past? returns true as well\nSystem configuration\nRails version: 7.0.3 / 6.0.5\nRuby version: 3.1.0 / 2.6.6\nAlthough this behaviour is universal for all rails and ruby versions.\nPossible reason\nThis seems to be arising due to the implementation difference between today? and past?, while the past? uses correct utc object, today?use the time object, resulting in the inconsistencies between results.\n\n\n\nrails/activesupport/lib/active_support/time_with_zone.rb\n\n\n        Lines 273 to 283\n      in\n      64cac36\n\n\n\n\n\n\n # Returns true if the current object's time is in the past. \n\n\n\n def past? \n\n\n\n utc.past? \n\n\n\n end \n\n\n\n \n\n\n\n # Returns true if the current object's time falls within \n\n\n\n # the current day. \n\n\n\n def today? \n\n\n\n time.today? \n\n\n\n end \n\n\n\n \n\n\n\n\n\n\n\n0> time\n=> 2022-10-21 00:00:00 UTC\n\n0> utc\n=> 2022-10-20 18:30:00 UTC\n\n0> utc.today?\n=> false\n\n0> time.today?\n=> true", "number_of_comments": 11, "comment_authors": ["jatindhankhar", "ghiculescu", "jatindhankhar", "rails-bot", "zzak", "jatindhankhar", "jatindhankhar", "zzak", "jatindhankhar", "softwaregravy", "rails-bot"]},
{"title": "Updating a column using serialize to its database default value of {} instead tries to save it as NULL", "link": "https://github.com/rails/rails/issues/46351", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.5263164043426514, "creation_date": "2022-10-26T19:36:56Z", "issue_submitter": "dfritsch", "body": "Steps to reproduce\nI originally was noticing issues trying to disable partial_inserts as part of upgrading to Rails 7. The oddness was that some models were failing to be created because Rails was now setting a null value for a column that had a database default and didn't allow nulls.\nI then debugged that to what I think is consistent behavior in serialize that if you try to set the value of a column using serialize to its database default, Rails will instead try to set the value to NULL instead of the default value (which ultimately means you don't get the default).\nBelow is a test case I was able to write against ActiveRecord that I believe isolates the core issue here. At the very least I likely need to use a different model/fixture for adding the new column with null false and a default, but thought I would get some feedback on whether this is a real issue before digging deeper to try to isolate where the nil comes from.\n# new test added here:\n# activerecord/test/cases/serialized_attribute_test.rb\n  def test_serialized_attribute_with_default_can_update_to_default\n    klass = Class.new(ActiveRecord::Base) do\n      self.table_name = Topic.table_name\n      serialize(:content, Hash)\n    end\n\n    t = klass.create!(content: { \"other_key\" => \"new_value\" })\n    assert_equal({ \"other_key\" => \"new_value\" }, t.content)\n\n    t.update!(content: {})\n    assert_equal({}, t.content)\n  end\n# Adjusted the Topic schema in activerecord/test/schema/schema.rb to:\nt.text     :content, null: false, default: \"{}\"\nRunning\nbundle exec ruby -Itest test/cases/serialized_attribute_test.rb -n test_serialized_attribute_with_default_can_update_to_default\n\nThen gives the failure that you are violating the not null constraint:\nError:\nSerializedAttributeTestWithYamlSafeLoad#test_serialized_attribute_with_default_can_update_to_default:\nActiveRecord::NotNullViolation: SQLite3::ConstraintException: NOT NULL constraint failed: topics.content\n    /Users/dfritsch/.gem/ruby/3.1.2/gems/sqlite3-1.4.4/lib/sqlite3/statement.rb:108:in `step'\n    /Users/dfritsch/.gem/ruby/3.1.2/gems/sqlite3-1.4.4/lib/sqlite3/statement.rb:108:in `block in each'\n    /Users/dfritsch/.gem/ruby/3.1.2/gems/sqlite3-1.4.4/lib/sqlite3/statement.rb:107:in `loop'\n    /Users/dfritsch/.gem/ruby/3.1.2/gems/sqlite3-1.4.4/lib/sqlite3/statement.rb:107:in `each'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/connection_adapters/sqlite3/database_statements.rb:54:in `to_a'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/connection_adapters/sqlite3/database_statements.rb:54:in `block (2 levels) in exec_query'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:970:in `block in with_raw_connection'\n    /Users/dfritsch/workspace/rails/activesupport/lib/active_support/concurrency/load_interlock_aware_monitor.rb:25:in `handle_interrupt'\n    /Users/dfritsch/workspace/rails/activesupport/lib/active_support/concurrency/load_interlock_aware_monitor.rb:25:in `block in synchronize'\n    /Users/dfritsch/workspace/rails/activesupport/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `handle_interrupt'\n    /Users/dfritsch/workspace/rails/activesupport/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `synchronize'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:942:in `with_raw_connection'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/connection_adapters/sqlite3/database_statements.rb:45:in `block in exec_query'\n    /Users/dfritsch/workspace/rails/activesupport/lib/active_support/notifications/instrumenter.rb:58:in `instrument'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/connection_adapters/abstract_adapter.rb:1075:in `log'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/connection_adapters/sqlite3/database_statements.rb:44:in `exec_query'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/connection_adapters/sqlite3/database_statements.rb:72:in `exec_delete'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:180:in `update'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/connection_adapters/abstract/query_cache.rb:22:in `update'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/persistence.rb:513:in `_update_record'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/persistence.rb:1081:in `_update_row'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/locking/optimistic.rb:88:in `_update_row'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/persistence.rb:1103:in `_update_record'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/attribute_methods/dirty.rb:216:in `_update_record'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/callbacks.rb:465:in `block in _update_record'\n    /Users/dfritsch/workspace/rails/activesupport/lib/active_support/callbacks.rb:99:in `run_callbacks'\n    /Users/dfritsch/workspace/rails/activesupport/lib/active_support/callbacks.rb:947:in `_run_update_callbacks'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/callbacks.rb:465:in `_update_record'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/timestamp.rb:121:in `_update_record'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/persistence.rb:1090:in `create_or_update'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/callbacks.rb:457:in `block in create_or_update'\n    /Users/dfritsch/workspace/rails/activesupport/lib/active_support/callbacks.rb:99:in `run_callbacks'\n    /Users/dfritsch/workspace/rails/activesupport/lib/active_support/callbacks.rb:947:in `_run_save_callbacks'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/callbacks.rb:457:in `create_or_update'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/timestamp.rb:126:in `create_or_update'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/persistence.rb:648:in `save!'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/validations.rb:55:in `save!'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/transactions.rb:304:in `block in save!'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/transactions.rb:356:in `block in with_transaction_returning_status'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:320:in `transaction'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/transactions.rb:352:in `with_transaction_returning_status'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/transactions.rb:304:in `save!'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/suppressor.rb:54:in `save!'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/persistence.rb:801:in `block in update!'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/transactions.rb:356:in `block in with_transaction_returning_status'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:455:in `block in within_new_transaction'\n    /Users/dfritsch/workspace/rails/activesupport/lib/active_support/concurrency/load_interlock_aware_monitor.rb:25:in `handle_interrupt'\n    /Users/dfritsch/workspace/rails/activesupport/lib/active_support/concurrency/load_interlock_aware_monitor.rb:25:in `block in synchronize'\n    /Users/dfritsch/workspace/rails/activesupport/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `handle_interrupt'\n    /Users/dfritsch/workspace/rails/activesupport/lib/active_support/concurrency/load_interlock_aware_monitor.rb:21:in `synchronize'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/connection_adapters/abstract/transaction.rb:453:in `within_new_transaction'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb:322:in `transaction'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/transactions.rb:352:in `with_transaction_returning_status'\n    /Users/dfritsch/workspace/rails/activerecord/lib/active_record/persistence.rb:799:in `update!'\n    test/cases/serialized_attribute_test.rb:592:in `test_serialized_attribute_with_default_can_update_to_default'\n\nExpected behavior\nI'd expect the column to be updated to the serialized format of the column default.\nActual behavior\nNil/null is passed as the new column default, violating the not null constraint.\nSystem configuration\nRails version: 7.0.4 and main\nRuby version: 3.1.2", "number_of_comments": 6, "comment_authors": ["dfritsch", "fatkodima", "fatkodima", "byroot", "byroot", "byroot"]},
{"title": "MySQL 8.0 VARBINARY default value is hexadecimal", "link": "https://github.com/rails/rails/issues/45832", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                MySQL\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2307393550872803, "creation_date": "2022-08-15T20:42:09Z", "issue_submitter": "HParker", "body": "Default values on VARBINARY columns changed behavior between MySQL 5.7 and 8.0\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"mysql2\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"mysql2\", database: \"adam_test\", prepared_statements: false, host: '127.0.0.1', port: 3307, user: \"root\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.binary :some_binary, null: false, limit: 1024, default: \"hello-world\"\n  end\nend\n\nclass Post < ActiveRecord::Base\nend\n\nclass BugTest < Minitest::Test\n  def test_mysql_defaults\n    post = Post.create!\n\n    mysql_vars = ActiveRecord::Base.connection.select_rows(\"SHOW VARIABLES LIKE '%version%'\")\n    puts mysql_vars.inspect\n    puts Post.column_defaults\n\n    # assert_equal \"0x68656C6C6F2D776F726C64\", post.some_binary # This passes\n    assert_equal \"hello-world\", post.some_binary # This fails\n\n    reloaded_post = Post.first\n    assert_equal \"hello-world\", reloaded_post.some_binary # this passes\n  end\nend\nOn MySQL 5.7:\nPost.column_defaults # => {\"id\"=>nil, \"some_binary\"=>\"hello-world\"}\nOn MySQL 8.0:\nPost.column_defaults # => {\"id\"=>nil, \"some_binary\"=>\"0x68656C6C6F2D776F726C64\"}\nExpected behavior\nThe default value on binary columns should be Ruby strings, not ruby strings of hexadecimal.\nActual behavior\nThe column default in MySQL 8.0 is a hexadecimal string representing the binary data.\nSystem configuration\nRails version: main\nRuby version: 3.1.0\nSome interesting MySQL forum posts about this behavior change:\n\nhttps://forums.mysql.com/read.php?24,685577,685577\nhttps://forums.mysql.com/read.php?20,698061,698061#msg-698061", "number_of_comments": 6, "comment_authors": ["HParker", "latentflip", "yahonda", "fatkodima", "rails-bot", "HParker"]},
{"title": "Value of attribute default proc is shared between instances after dup + dirty tracking", "link": "https://github.com/rails/rails/issues/45817", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2901360988616943, "creation_date": "2022-08-12T06:16:00Z", "issue_submitter": "quadule", "body": "Steps to reproduce\nWhen an attribute without a database column defines a default proc, duping a model in which the default wasn't accessed passes the unevaluated UserProvidedDefault attribute to the new instance as the attribute's original value. Checking the new attribute for changes will then memoize the value in the original attribute definition, making it the default value in every new model instance afterward.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n  gem \"rails\", github: \"rails/rails\", ref: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\n\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Schema.define do\n  create_table :cats do |t|\n    t.string :name\n  end\nend\n\nclass Cat < ActiveRecord::Base\n  attribute :sounds, default: -> { [] }\nend\n\nclass VirtualAttributeTest < Minitest::Test\n  def test_virtual_attribute_defaults_are_independent\n    Cat.new.dup.save!\n    Cat.new.sounds << \"meow\"\n    refute_same Cat.new.sounds, Cat.new.sounds\n  end\nend\nExpected behavior\nEach new instance should get a new default value from the proc.\nActual behavior\nAfter using dirty tracking on a duplicated instance with an uncalled proc default, all new instances of a model receive the same default value and share any changes made to it.\nAffected versions\nThis seems to date back quite a while; the test fails on the main branch back to 5-1-stable.\nCredits\nThanks to @GBH for originally discovering this bug.", "number_of_comments": 1, "comment_authors": ["quadule"]},
{"title": "ActiveStorage attachments are lost when casting using Becomes", "link": "https://github.com/rails/rails/issues/45778", "labels": ["\n                activestorage\n", "\n                With reproduction steps\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.335749864578247, "creation_date": "2022-08-05T20:19:16Z", "issue_submitter": "markedmondson", "body": "Steps to reproduce\nCreate an ActiveRecord model with an ActiveStorage relation. Initialize and add the associated attachment. Cast the object to another subclassed model, the associated attachment is lost.\nunless File.exist?('Gemfile')\n    File.write('Gemfile', <<-GEMFILE)\n    source 'https://rubygems.org'\n    gem 'rails', '~> 6.1'\n    gem 'sqlite3'\n    GEMFILE\n\n    system 'bundle'\nend\n\nrequire 'bundler'\nBundler.setup(:default)\n\nrequire 'active_record'\nrequire 'active_storage/engine'\nrequire 'minitest/autorun'\nrequire 'logger'\n\nclass TestApp < Rails::Application\n  config.root = __dir__\n  config.hosts << 'example.org'\n  config.eager_load = false\n  config.session_store :cookie_store, key: 'cookie_store_key'\n  secrets.secret_key_base = 'secret_key_base'\n\n  config.logger = Logger.new($stdout)\n  Rails.logger  = config.logger\n\n  config.active_storage.service = :local\n  config.active_storage.service_configurations = {\n    local: {\n      root: Dir.tmpdir,\n      service: 'Disk'\n    }\n  }\nend\n\nENV['DATABASE_URL'] = 'sqlite3::memory:'\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')\nActiveRecord::Base.logger = Logger.new(STDOUT)\nRails.application.initialize!\n\nrequire ActiveStorage::Engine.root.join('db/migrate/20170806125915_create_active_storage_tables.rb').to_s\n\nActiveRecord::Schema.define do\n  CreateActiveStorageTables.new.change\n\n  create_table :posts do |t|\n    t.string :title\n    t.string :text\n  end\n\n  create_table :comments do |t|\n    t.belongs_to :post\n    t.string :text\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\n  has_one_attached :image\nend\n\nclass ModeratedComment < Comment; end\n\nclass BugTest < Minitest::Test\n  def setup\n    @post = Post.create(title: 'Post', text: 'Welcome')\n  end\n\n  def test_association\n    comment = @post.comments.new(text: 'I do not like this')\n\n    moderated_comment = comment.becomes(ModeratedComment)\n\n    assert_equal @post, moderated_comment.post # Pass\n  end\n\n  def test_attachment\n    file = ActiveStorage::Blob.create_and_upload!(\n      content_type: \"image/png\",\n      filename: \"image.png\",\n      io: ::StringIO.new(\"png\"),\n    )\n    comment = @post.comments.new(text: 'I do not like this', image: file)\n\n    moderated_comment = comment.becomes(ModeratedComment)\n\n    assert moderated_comment.image.attached? # Fail\n  end\nend\nExpected behavior\nWhen casting an ActiveRecord to another model, I expect the associations to be copied thus I expect attached ActiveStorage association assets to be copied.\nActual behavior\nPreviously attached ActiveStorage associated objects are lost on the original object.\nSystem configuration\nRails version: 6.1.6.1\nRuby version: 3.0.4", "number_of_comments": 4, "comment_authors": ["markedmondson", "fatkodima", "markedmondson", "rails-bot"]},
{"title": "_read_attribute method should also check whether an attribute is aliased or not", "link": "https://github.com/rails/rails/issues/45632", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3907556533813477, "creation_date": "2022-07-21T03:14:22Z", "issue_submitter": "khiav223577", "body": "Steps to reproduce\nbegin\n  require \"bundler/inline\"\nrescue LoadError => e\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\n  raise e\nend\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n  gem \"activerecord\", '7.0.3'\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table \"users\", force: :cascade do |t|\n    t.string :name\n  end\n\n  create_table \"posts\", force: :cascade do |t|\n    t.string :title\n    t.integer :userId\n  end\nend\n\nclass User < ActiveRecord::Base\n  has_many :posts\nend\n\nclass Post < ActiveRecord::Base\n  belongs_to :user\n\n  alias_attribute :user_id, :userId\nend\n\nclass BugTest < Minitest::Test\n  def setup\n    user = User.create!(name: 'Tester')\n    post = Post.create!(user_id: user.id, title: 'Post A')\n  end\n\n  def test_has_many\n    assert_equal ['Post A'], User.first.posts.map(&:title)\n  end\n\n  def test_belongs_to\n    assert_equal 'Tester', Post.first.user&.name\n  end\nend\nResult:\nFinished in 0.059414s, 33.6619 runs/s, 33.6619 assertions/s.\n\n  1) Failure:\nBugTest#test_belongs_to [test.rb:53]:\nExpected: \"Tester\"\n  Actual: nil\n\n2 runs, 2 assertions, 1 failures, 0 errors, 0 skips\n\nExpected behavior\nI run into this issue when I tried to add an association on an aliased attribute.\nThen I found belongs_to_association will use _read_attribute method to check if this foreign_key exists on this model or not.\nIt doesn't pass the condition, therefore find_target will not be triggered.\n\n\n\nrails/activerecord/lib/active_record/associations/association.rb\n\n\n        Lines 172 to 173\n      in\n      3272335\n\n\n\n\n\n\n def load_target \n\n\n\n @target = find_target if (@stale_state && stale_target?) || find_target? \n\n\n\n\n\n\n\n\nrails/activerecord/lib/active_record/associations/association.rb\n\n\n        Lines 274 to 276\n      in\n      3272335\n\n\n\n\n\n\n def find_target? \n\n\n\n   !loaded? && (!owner.new_record? || foreign_key_present?) && klass \n\n\n\n end \n\n\n\n\n\n\n\n\nrails/activerecord/lib/active_record/associations/belongs_to_association.rb\n\n\n        Lines 133 to 135\n      in\n      2ea5ff9\n\n\n\n\n\n\n def foreign_key_present? \n\n\n\n owner._read_attribute(reflection.foreign_key) \n\n\n\n end \n\n\n\n\n\n\n\n\nrails/activerecord/lib/active_record/attribute_methods/read.rb\n\n\n        Lines 37 to 39\n      in\n      4ae0390\n\n\n\n\n\n\n def _read_attribute(attr_name, &block) # :nodoc: \n\n\n\n @attributes.fetch_value(attr_name, &block) \n\n\n\n end \n\n\n\n\n\nThe read_attribute method takes attribute_alias into consideration since #26529, while _read_attribute doesn't. I think it should, too.\nActual behavior\nSee the test script below.\nSystem configuration\nRails version:\n7.0.3.1\nRuby version:\nruby 3.0.0p0 (2020-12-25 revision 95aff21468) [x86_64-linux]", "number_of_comments": 3, "comment_authors": ["khiav223577", "tracyloisel", "fatkodima"]},
{"title": "ActionMailer fails to create correct multipart message with rfc822 attachment", "link": "https://github.com/rails/rails/issues/45691", "labels": ["\n                actionmailer\n", "\n                pinned\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3091177940368652, "creation_date": "2022-07-29T11:19:00Z", "issue_submitter": "der-flo", "body": "I cannot re-open #42849 so I create a new issue…\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire 'bundler/inline'\n\ngemfile(true) do\n  source 'https://rubygems.org'\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n  gem 'rails', github: 'rails/rails', branch: 'main'\nend\n\nrequire 'minitest/autorun'\nrequire 'action_mailer/railtie'\n\nclass TestMailer < ActionMailer::Base\n  def main\n    message_to_attach =  <<~MAIL.gsub(/\\n/, \"\\r\\n\")\n      Message-ID: <12345@foo.example>\n      Subject: Test\n      From: test1@foo.example\n      To: test2@foo.example\n      \n      hello world\n    MAIL\n    attachments['test.eml'] = {\n      mime_type: params[:mime_type],\n      content: message_to_attach\n    }\n\n    mail(from: 'test3@foo.example', to: 'test4@foo.example', subject: 'Test outer') do |format|\n      format.text { \"outer text - #{params[:mime_type]} attachment\" }\n    end\n  end\nend\n\nclass BugTest < Minitest::Test\n  def test_with_plain_mime_type\n    message = TestMailer.with(mime_type: 'text/plain').main\n    assert_equal message.mime_type, 'multipart/mixed'\n  end\n\n  def test_with_rfc822_mime_type\n    message = TestMailer.with(mime_type: 'message/rfc822').main\n    assert_equal message.mime_type, 'multipart/mixed'\n  end\nend\nThe second test fails, the message object is rendered as follows:\nDate: Fri, 23 Jul 2021 13:59:19 +0200\nFrom: test3@foo.example\nTo: test4@foo.example\nMessage-ID: <60faaf1738a02_14fbd98-3fb@flo.adigi.ai.mail>\nSubject: Test outer\nMime-Version: 1.0\nContent-Type: text/plain;\n boundary=\"--==_mimepart_60faaf1738008_14fbd98-484\";\n charset=UTF-8\nContent-Transfer-Encoding: 7bit\n\n\n----==_mimepart_60faaf1738008_14fbd98-484\nContent-Type: text/plain;\n charset=UTF-8\nContent-Transfer-Encoding: 7bit\n\nouter text - message/rfc822 attachment\n----==_mimepart_60faaf1738008_14fbd98-484\nContent-Type: message/rfc822\nContent-Transfer-Encoding: \nContent-Disposition: attachment;\n filename=test.eml\nContent-ID: <60faaf1739102_14fbd98-2b@flo.adigi.ai.mail>\n\nMessage-ID: <12345@foo.example>\nSubject: Test\nFrom: test1@foo.example\nTo: test2@foo.example\n\nhello world\n\n----==_mimepart_60faaf1738008_14fbd98-484--\n\n\nExpected behavior\nThe message.mime_type is multipart/mixed in both test cases. ActionMailer handles attachments in the way it is described in https://guides.rubyonrails.org/action_mailer_basics.html#adding-attachments describes.\nActual behavior\nWhen attaching a message/rfc822 - an email message - the generated mail parts are not nested correctly, the outer multipart/mixed is missing.\nPerhaps this behaviour is caused by the special handling of such attachments in the mail gem.\nSystem configuration\nRails version: main\nRuby version: 3.0.2", "number_of_comments": 7, "comment_authors": ["der-flo", "ghiculescu", "rails-bot", "der-flo", "rails-bot", "zzak", "rails-bot"]},
{"title": "Add strict table mode (by default) to sqlite adapter", "link": "https://github.com/rails/rails/issues/45937", "labels": ["\n                activerecord\n", "\n                good first issue\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3367633819580078, "creation_date": "2022-09-03T07:01:02Z", "issue_submitter": "jrz", "body": "SQLite supports 'strict tables' since 3.37.1 https://sqlite.org/stricttables.html\nThis forces a datatype to be specified when creating a table. This is the preferred method in any application created by developers.\nUnspecified/ANY datatypes are useful for quick tryouts as an enduser, similar to excel. But it's counterproductive when creating an application.\nIf this will become a configurable setting, the default should be set to strict.", "number_of_comments": 10, "comment_authors": ["jrz", "rails-bot", "thearpist123", "ghiculescu", "matthewd", "ghiculescu", "matthewd", "thearpist123", "matthewd", "thearpist123"]},
{"title": "Inconsistent update of timestamps while updating associations with *_ids=", "link": "https://github.com/rails/rails/issues/45967", "labels": ["\n                activerecord\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2867512702941895, "creation_date": "2022-09-08T10:51:09Z", "issue_submitter": "matthee", "body": "ActiveRecord inconsistently updates the updated_at column when changing has_many through: associations.\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"~> 7.0.0\"\n  gem \"activesupport\", \"~> 7.0.0\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"active_support/testing/time_helpers\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.timestamps\n  end\n  \n  create_table :tags, force: true do |t|\n  end\n\n  create_table :taggings, force: true do |t|\n    t.integer :post_id\n    t.integer :tag_id\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :taggings, dependent: :destroy\n  \n  has_many :tags, through: :taggings\nend\n\nclass Tagging < ActiveRecord::Base\n  belongs_to :post, touch: true\n  belongs_to :tag\nend\n\nclass Tag < ActiveRecord::Base\n  has_many :taggings\n  has_many :posts, through: :taggings\nend\n\nclass BugTest < Minitest::Test\n  include ActiveSupport::Testing::TimeHelpers\n  \n  def test_updated_at_is_updated_when_setting_has_many_through_association\n    freeze_time\n        \n    tag_1 = Tag.create!\n    tag_2 = Tag.create!\n      \n    post = Post.create!\n    \n    travel_to(now = 1.hour.from_now)\n    \n    # Adding tags updates post.updated_at\n    post.update(tag_ids: [tag_1.id, tag_2.id])\n    assert_in_delta now, post.updated_at, 1.second, \"post#updated_at was not updated when adding tags\"\n    \n    # Removing tags does not update post.updated_at :(\n    travel_to(now = 2.hours.from_now)\n    post.update(tag_ids: [tag_1.id])\n    assert_in_delta now, post.updated_at, 1.second, \"post#updated_at was not updated when removing tags\"\n  end\n  \nend\nExpected behavior\nIn the example above, both .update calls should update the updated_at column of the post record. (when adding and removing records)\nActual behavior\nWhen deleting a record, the updated_at timestamp is not updated.\nSystem configuration\nRails version:\n7.0.3.1\nRuby version:\n3.0.2", "number_of_comments": 7, "comment_authors": ["matthee", "tiegz", "ghiculescu", "tiegz", "rails-bot", "jayithiel", "tiegz"]},
{"title": "Invalid template types should raise an exception", "link": "https://github.com/rails/rails/issues/45636", "labels": ["\n                actionview\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3887476921081543, "creation_date": "2022-07-22T07:40:54Z", "issue_submitter": "axos88", "body": "Steps to reproduce\n\nCreate a template in views/foo/bar.txt.erb # Note .txt, and not .text\n\ndetails = { locale: [:en], formats: [:txt], handlers: [:erb], variants: []}\nActionController::Base.view_paths.find(\"bar\", 'foo', false, details, nil, [])\nExpected behavior\nShould throw an exception that :txt is not a registered type in Template::Types\nActual behavior\nSilently fails to find the otherwise existing template, specifying the correct directory it the file resides in.\nConfustion intensifies.\nSystem configuration\nRails version: 7.0.3\nRuby version: 2.7.6", "number_of_comments": 8, "comment_authors": ["axos88", "rails-bot", "axos88", "rails-bot", "rails-bot", "axos88", "rails-bot", "axos88"]},
{"title": "Tags leak across broadcasted loggers", "link": "https://github.com/rails/rails/issues/46084", "labels": ["\n                activesupport\n", "\n                pinned\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.335972785949707, "creation_date": "2022-09-20T15:13:04Z", "issue_submitter": "thomasgt", "body": "I'm trying to create a tagged logger (final_logger) from another tagged logger (tagged_logger2) that is receiving broadcasts from yet another tagged logger (tagged_logger1). This situation triggers an odd behaviour: tags applied to final_logger leak upstream to the original tagged_logger1.\nSteps to reproduce\nTo reproduce, run this test case (it can be found on my fork here):\n  test \"tags do not leak across loggers\" do\n    sink1 = StringIO.new\n    sink2 = StringIO.new\n\n    tagged_logger1 = ActiveSupport::TaggedLogging.new(ActiveSupport::Logger.new(sink1))\n    tagged_logger2 = ActiveSupport::TaggedLogging.new(ActiveSupport::Logger.new(sink2))\n    tagged_logger2.extend(ActiveSupport::Logger.broadcast(tagged_logger1))\n\n    final_logger = ActiveSupport::TaggedLogging.new(tagged_logger2).tagged(\"test\")\n\n    tagged_logger1.info(\"foo\") # should write \"foo\" to sink1\n    tagged_logger2.info(\"bar\") # should write \"bar\" to sink1 (via broadcast) and \"bar\" to sink2\n    final_logger.info(\"baz\")   # should write \"baz\" to sink1 (via broadcast) and \"[test] baz\" to sink2\n\n    sink1_lines = sink1.string.each_line.to_a\n    sink2_lines = sink2.string.each_line.to_a\n\n    assert_equal 3, sink1_lines.length\n    assert_equal 2, sink2_lines.length\n\n    assert_equal \"foo\\n\", sink1_lines[0]\n    assert_equal \"bar\\n\", sink1_lines[1]\n    assert_equal \"baz\\n\", sink1_lines[2]\n\n    assert_equal \"bar\\n\", sink2_lines[0]\n    assert_equal \"[test] baz\\n\", sink2_lines[1]\n  end\nExpected behavior\nI would expect this test to pass.\nActual behavior\nThe assertions on the logs in sink1 fail; they are prefixed with \"[test]\":\nFailure:\nTaggedLoggingWithoutBlockTest#test_tags_do_not_leak_across_loggers [/Users/thomasgt/src/github.com/thomasgt/rails/activesupport/test/tagged_logging_test.rb:250]:\n--- expected\n+++ actual\n@@ -1,2 +1,2 @@\n-\"foo\n+\"[test] foo\n \"\n\nSystem configuration\nWe originally thought this bug was related to this PR. It was reverted, but the problem persists. Our thinking now is that the PR re-implemented the bug in a different way, so reverting had no effect.\nRails version:\n\nAfter revert: https://github.com/thomasgt/rails/tree/logger-leak-1\nBefore revert: https://github.com/thomasgt/rails/tree/logger-leak-2\n\nRuby version:\n3.1.2", "number_of_comments": 7, "comment_authors": ["thomasgt", "tiegz", "khall", "rails-bot", "oggy", "rails-bot", "Edouard-chin"]},
{"title": "The response for ActionDispatch::RemoteIp::IpSpoofAttackError is not 4xx, but 500", "link": "https://github.com/rails/rails/issues/46003", "labels": ["\n                actionpack\n", "\n                With reproduction steps\n"], "depth": 6, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3645987510681152, "creation_date": "2022-09-12T09:23:19Z", "issue_submitter": "willnet", "body": "On IpSpoofAttackError raising, I want rails to return 4xx since it is a client-side problem.\nSince the ActionDispatch::RemoteIp middleware is located before ActionDispatch::ShowExceptions, We cannot define the behavior when the exception raises with config.action_dispatch.rescue_responses.\nActionDispatch::HostAuthorization is also located before ActionDispatch::ShowExceptions, but it has its own Rack application to return 403 on exceptions. Maybe ActionDispatch::RemoteIp should have its own Rack appilcation as well.\nSteps to reproduce\nrails new sampleapp\ncd sampleapp\nrails s -d\ncurl localhost:3000 -H \"X-Forwarded-For: 1.2.3.4\" -H \"Client-Ip: 5.6.7.8\" -I\nExpected behavior\nresponse 4xx\nActual behavior\nHTTP/1.1 500 Internal Server Error\nContent-Length: 4602\n\nSystem configuration\nRails version: 7.0.4\nRuby version: 3.1.2", "number_of_comments": 14, "comment_authors": ["willnet", "casperisfine", "casperisfine", "matthewd", "casperisfine", "rafaelfranca", "casperisfine", "matthewd", "rafaelfranca", "rafaelfranca", "casperisfine", "willnet", "rails-bot", "Auralcat"]},
{"title": "Cannot add ActiveModel::Attribute::FromDatabase to permitted YAML safe load classes", "link": "https://github.com/rails/rails/issues/45609", "labels": ["\n                activemodel\n", "\n                regression\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5619783401489258, "creation_date": "2022-07-16T15:51:30Z", "issue_submitter": "stanhu", "body": "Steps to reproduce\nWe have some database entries serialized to YAML. For example:\n---\n:custom_message: Repository Download Started\n:author_name: !ruby/object:DeployToken\n  concise_attributes:\n  - !ruby/object:ActiveModel::Attribute::FromDatabase\n    name: deploy_token_type\n    value_before_type_cast: 1\n  - !ruby/object:ActiveModel::Attribute::FromDatabase\n    name: id\n    value_before_type_cast: 2\n  - !ruby/object:ActiveModel::Attribute::FromDatabase\n    name: revoked\n    value_before_type_cast: false\n  - !ruby/object:ActiveModel::Attribute::FromDatabase\n    name: read_repository\n    value_before_type_cast: true\n\nHowever, since the security release announced in https://rubyonrails.org/2022/7/12/Rails-Versions-7-0-3-1-6-1-6-1-6-0-5-1-and-5-2-8-1-have-been-released to address CVE-2022-32224, we cannot simply add ActiveModel::Attribute::FromDatabase to the permitted class list:\n(byebug) YAML.safe_load(payload, permitted_classes: [ActiveModel::Attribute::FromDatabase, Symbol, DeployToken], aliases: true)\n*** NameError Exception: private constant ActiveModel::Attribute::FromDatabase referenced\nExpected behavior\nYAML loading should work. Should this constant no longer be private since it's been serialized to YAML?\nActual behavior\nYAML loading fails with:\n*** NameError Exception: private constant ActiveModel::Attribute::FromDatabase referenced\n\nSystem configuration\nRails version:\nv6.1.6.1\nRuby version:\nv2.7.5", "number_of_comments": 9, "comment_authors": ["stanhu", "stanhu", "julienchabanon", "stanhu", "julienchabanon", "masterkain", "gnumarcelo", "stanhu", "etiennebarrie"]},
{"title": "[Bug] ActiveRecord: Association's validations are ran only on create when assigning with *_ids=", "link": "https://github.com/rails/rails/issues/45320", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5956556797027588, "creation_date": "2022-06-10T13:21:30Z", "issue_submitter": "james-em", "body": "Steps to reproduce\nModels:\nclass User < ApplicationRecord\n  has_many :project_users, dependent: :destroy, inverse_of: :user\n  has_many :projects, through: :project_users\n  \n  validates :name, presence: true\nend\n\nclass Project < ApplicationRecord\n  has_many :project_users, dependent: :destroy\n  has_many :users, through: :project_users\nend\n\nclass ProjectUser < ApplicationRecord\n  belongs_to :project\n  belongs_to :user\nend\n\nu = User.new(\"email: \"test@example.com\", name: nil)\nu.valid? => false (name is nil)\nu.save(validate: false) => true\n\nGenerates an error:\nProject.create!(name: \"Test\", user_ids: [u.id])\n=> Exception because user is invalid\n\nThis doesn't generate an error\np = Project.create!(name: \"test\")\np.update!(user_ids: [u.id])\n=> true\n\nExpected behavior\nOne of these 2:\n\nRun validation in every case\nNever run validation\n\nActual behavior\nValidations are executed on create but not on update.\nSystem configuration\nRails version: 7.0.3\nRuby version: 3.1.0", "number_of_comments": 6, "comment_authors": ["james-em", "muZk", "rails-bot", "james-em", "rails-bot", "muZk"]},
{"title": "TimeWithZone#time returns incorrect time", "link": "https://github.com/rails/rails/issues/45548", "labels": ["\n                activesupport\n", "\n                attached PR\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.4944014549255371, "creation_date": "2022-07-08T11:09:34Z", "issue_submitter": "shouichi", "body": "Steps to reproduce\n> jst = Time.find_zone!(\"Asia/Tokyo\").parse(\"2022-03-30T23:59:59Z\")\n> jst.utc\n=> 2022-03-30 23:59:59 UTC # correct\n> jst.time\n=> 2022-03-31 08:59:59 UTC # wrong\nExpected behavior\nReturns the time in the local time zone? Or if it returns UTC, it should at least match with the TimeWithZone#utc.\nActual behavior\nReturns UTC where the time zone offset is added/subtracted.\nSystem configuration\nRails version: ruby 3.1.1p18 (2022-02-18 revision 53f5fc4236) [x86_64-linux]\nRuby version: Rails 7.0.3", "number_of_comments": 4, "comment_authors": ["shouichi", "matthewd", "shouichi", "shouichi"]},
{"title": "Move test:prepare task to the main rails tasks from test_unit railtie", "link": "https://github.com/rails/rails/issues/45431", "labels": ["\n                attached PR\n", "\n                railties\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6480638980865479, "creation_date": "2022-06-22T19:57:29Z", "issue_submitter": "simmerz", "body": "Presently, test:prepare is only defined in the test_unit railtie rake task as a placeholder to be hooked on to.\nThe tailwindcss-rails, cssbundling-rails and jsbundling-rails all enhance the task to allow tests to pre-compile to app/assets/build.\nHowever, for those of us using RSpec, there is no way without additional configuration to pre-compile those assets (we don't want to run assets:precompile either because that's utterly confusing for the developer when changes made to app/assets/* subsequently don't appear to work).\nBecause the Rakefile in a Rails app loads all the application rake tasks by default, then those from gems and then those in lib/tasks last of all, not including test_unit means there's no sensible way to ensure that a placeholder task exists before tailwindcss-rails etc enhance it, short of specifically putting the gems higher in the gemfile - that's not clear to the developer, and doesn't follow the convention that Rails should be easy to work with.\nrspec-rails already invokes test:prepare if it is defined, so it seems to me to make a great deal of sense to move this placeholder into the main rails tasks and then document it as a placeholder to be enhanced by other tasks.\nIf you're amenable to that, I'd be happy to raise a PR for it.", "number_of_comments": 4, "comment_authors": ["simmerz", "rails-bot", "simmerz", "rafaelfranca"]},
{"title": "url_options are wrong after accessing engine route in integration tests", "link": "https://github.com/rails/rails/issues/45500", "labels": ["\n                actionpack\n", "\n                routing\n", "\n                With reproduction steps\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.550046443939209, "creation_date": "2022-06-30T17:56:44Z", "issue_submitter": "brandoncc", "body": "Steps to reproduce\n\nIn an ActionDispatch::IntegrationTest, access (get/post/etc) a route that is provided by an engine.\nTry using a route helper that is part of the core Rails application.\n\n@gmcgibbon and I paired on this and believe that the issue lies in this method.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\nend\n\nrequire \"action_controller/railtie\"\n\nmodule Hemi\n  class Engine < ::Rails::Engine\n    def self.find_root(_)\n      __dir__\n    end\n\n    isolate_namespace Hemi\n\n    routes.draw do\n      post \"/example\" => \"repro#example\", as: :repro_example\n    end\n  end\n\n  class ReproController < ActionController::Base\n    include Engine.routes.url_helpers\n\n    def example\n      head 201\n    end\n  end\nend\n\nclass TestApp < Rails::Application\n  config.root = __dir__\n  config.hosts << \"www.example.com\"\n\n  config.logger = Logger.new($stdout)\n  Rails.logger  = config.logger\n\n  routes.draw do\n    get \"/\" => \"test#index\", as: \"slash\"\n    mount Hemi::Engine, at: \"/hemi\"\n  end\nend\n\nclass TestController < ActionController::Base\n  include Rails.application.routes.url_helpers\n\n  def index\n    render plain: \"Home\"\n  end\nend\n\nrequire \"minitest/autorun\"\nrequire \"rack/test\"\n\nclass BugTest < ActionDispatch::IntegrationTest\n  def test_url_is_correct_after_accessing_engine_path\n    post hemi.repro_example_path\n    assert_equal \"/\", slash_path\n  end\n\n  def test_url_is_correct_after_accessing_application_path\n    post hemi.repro_example_path\n\n    # resets `controller.url_options`\n    get \"/\"\n    assert_equal \"/\", slash_path\n  end\n\n  private\n\n  def app\n    Rails.application\n  end\nend\nExpected behavior\nI expect slash_path to always return \"/\", and not be dependent on the last route accessed.\nActual behavior\nAfter accessing an engine route, controller.url_options represents the engine, so the engine's mount point (\"script_name\" header) is prepended to the output of route helpers from the core Rails application.\nAccessing a route from the core Rails application again resets controller.url_options and the output of the route helpers will once again be what you expect.\nSystem configuration\nRails version: 7.1.0.alpha from https://github.com/rails/rails.git (at main@c704da6)\nRuby version: 3.1.2", "number_of_comments": 3, "comment_authors": ["brandoncc", "rails-bot", "Auralcat"]},
{"title": "1.years.hours, 1.year.days, and other duration methods called on 1.year all return the number of seconds in a year.", "link": "https://github.com/rails/rails/issues/45433", "labels": ["\n                activesupport\n", "\n                attached PR\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5620584487915039, "creation_date": "2022-06-22T20:19:24Z", "issue_submitter": "db00m", "body": "This issue is small and relatively unimportant, but it's still a bug that could cause problems in the future.  I use 1.year.seconds to get the number of seconds and was about to use 1.year.days to get the number of days in a year until I noticed the bug.\nSteps to reproduce\nWhen running the rails console (assuming that doing so will load ActiveSupport) run the following lines of code:\n1.year.seconds\n\n1.year.hours\n\n1.year.days\nEvery line returns the same number—31556952—which is the number of seconds in a year.\nExpected behavior\nI expect that 1.year.days should return the number of days in a year.  The same should be the case for all other duration related methods that could be called on Integer.year\nActual behavior\nEach duration method returns the number of seconds in a year rather than the number of Days, Hours, or other duration types called on Integer.year.\nSystem configuration\nRails Version: 6.1.5\nRuby Version: 3.0.3\nAnother note on system config: After discovering this bug in the project I was working on, I created an empty project to make sure the issue didn't come from conflicting gems.  The result was the same.", "number_of_comments": 4, "comment_authors": ["db00m", "skipkayhil", "db00m", "skipkayhil"]},
{"title": "Allow configuration of embeddables storage service for ActionText via has_rich_text", "link": "https://github.com/rails/rails/issues/45405", "labels": ["\n                actiontext\n", "\n                attached PR\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8691277503967285, "creation_date": "2022-06-20T08:03:07Z", "issue_submitter": "simmerz", "body": "Currently, ActionText attachments use the default storage service.\nIf we want one ActionText has_rich_text on a model to use a public service, the whole app needs to be public first, rather than private first, the latter of which would be my preference.\nAllowing a per case configuration as is possible with native-to-model attachables would allow the developer to choose their preference, and importantly allow that data-privacy-first approach.\nI guess it should fall back to the default configured service if none is specified.\nI would propose to use the same service parameter as is used on has_x_attached and pass it through to has_many_attached :embeds at rails/rich_text.rb\nNot sure of the best way to go about passing that through though, so it’s configurable per rich text, rather than globally.\nPreviously posted as a discussion here but posting as an issue here so that if it's worthwhile it can be PR'd.", "number_of_comments": 7, "comment_authors": ["simmerz", "mihaic195", "simmerz", "sedubois", "mihaic195", "skipkayhil", "rails-bot"]},
{"title": "app:update (selecting All) results in NoMethodError on config/initializers/assets.rb:4", "link": "https://github.com/rails/rails/issues/45295", "labels": ["\n                attached PR\n", "\n                railties\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8792080879211426, "creation_date": "2022-06-08T01:21:54Z", "issue_submitter": "josh-m-sharpe", "body": "Steps to reproduce\n\nrails 6.1 app\nbundle update to rails 7.0.3\nrake app:update\nselect 'a' for all\n\nSo, app:update replaces config/initializers/assets.rb, and then it looks like rails  active_storage:update fails on line 4 of that file:\nNoMethodError: undefined method assets'`\n√ (9:14:15 PM) ~/fin {3.0.4p208} (master) 😜 be rake app:update\nTop level ::CompositeIO is deprecated, require 'multipart/post' and use `Multipart::Post::CompositeReadIO` instead!\nTop level ::Parts is deprecated, require 'multipart/post' and use `Multipart::Post::Parts` instead!\n    conflict  config/boot.rb\nOverwrite /Users/jsharpe/fin/config/boot.rb? (enter \"h\" for help) [Ynaqdhm] a\n       force  config/boot.rb\n       exist  config\n    conflict  config/application.rb\n       force  config/application.rb\n   identical  config/environment.rb\n       exist  config/environments\n    conflict  config/environments/development.rb\n       force  config/environments/development.rb\n    conflict  config/environments/production.rb\n       force  config/environments/production.rb\n    conflict  config/environments/test.rb\n       force  config/environments/test.rb\n       exist  config/initializers\n    conflict  config/initializers/assets.rb\n       force  config/initializers/assets.rb\n    conflict  config/initializers/content_security_policy.rb\n       force  config/initializers/content_security_policy.rb\n      create  config/initializers/cors.rb\n    conflict  config/initializers/filter_parameter_logging.rb\n       force  config/initializers/filter_parameter_logging.rb\n    conflict  config/initializers/inflections.rb\n       force  config/initializers/inflections.rb\n      create  config/initializers/new_framework_defaults_7_0.rb\n   identical  config/initializers/permissions_policy.rb\n      remove  app/assets/stylesheets/application.css\n      remove  config/initializers/cors.rb\n       exist  bin\n    conflict  bin/rails\n       force  bin/rails\n   identical  bin/rake\n    conflict  bin/setup\n       force  bin/setup\n        gsub  db/schema.rb\n       rails  active_storage:update\nrails aborted!\nNoMethodError: undefined method `assets' for #<Rails::Application::Configuration:0x000000010f3869a8 @root=#<Pathname:/Users/jsharpe/fin>, @generators=#<Rails::Configuration::Generators:0x000000010922b7d0 @aliases={}, @options={:rails=>{:orm=>:active_record, :test_framework=>:test_unit, :integration_tool=>:test_unit, :system_tests=>:test_unit}, :active_record=>{:migration=>true, :timestamps=>true}, :test_unit=>{:fixture=>false, :fixture_replacement=>:factory_bot}}, @fallbacks={}, @templates=[], @colorize_logging=true, @api_only=false, @hidden_namespaces=[], @after_generate_callbacks=[]>, @middleware=#<Rails::Configuration::MiddlewareStackProxy:0x000000010f386700 @operations=[#<Proc:0x000000010f801a78 /Users/jsharpe/.rvm/gems/ruby-3.0.4@fin/gems/railties-7.0.3/lib/rails/configuration.rb:53 (lambda)>, #<Proc:0x0000000110657078 /Users/jsh\narpe/.rvm/gems/ruby-3.0.4@fin/gems/railties-7.0.3/lib/rails/configuration.rb:59 (lambda)>], @delete_operations=[]>, @javascript_path=\"javascript\", @encoding=#<Encoding:UTF-8>, @allow_concurrency=nil, @consider_all_requests_local=true, @filter_parameters=[], @filter_redirect=[], @helpers_paths=[\"/Users/jsharpe/fin/app/helpers\"], @hosts=[\".localhost\", #<IPAddr: IPv4:0.0.0.0/0.0.0.0>, #<IPAddr: IPv6:0000:0000:0000:0000:0000:0000:0000:0000/0000:0000:0000:0000:0000:0000:0000:0000>], @host_authorization={}, @public_file_server=#<ActiveSupport::OrderedOptions {:enabled=>true, :index_name=>\"index\"}>, @force_ssl=false, @ssl_options={:hsts=>{:subdomains=>true}}, @session_store=nil, @time_zone=\"UTC\", @beginning_of_week=:monday, @log_level=:debug, @cache_store=:null_store, @railties_order=[:all], @relative_url_root=nil, @reload_classes_only_on_ch\nange=true, @file_watcher=ActiveSupport::FileUpdateChecker, @exceptions_app=nil, @autoflush_log=true, @log_formatter=#<ActiveSupport::Logger::SimpleFormatter:0x000000010f39c848 @datetime_format=nil>, @eager_load=false, @secret_key_base=nil, @api_only=false, @debug_exception_response_format=nil, @x=#<Rails::Application::Configuration::Custom:0x000000010f39c7a8 @configurations={}>, @enable_dependency_loading=false, @read_encrypted_secrets=false, @content_security_policy=nil, @content_security_policy_report_only=false, @content_security_policy_nonce_generator=nil, @content_security_policy_nonce_directives=nil, @require_master_key=false, @loaded_config_version=6.0, @credentials=#<ActiveSupport::OrderedOptions {:content_path=>#<Pathname:/Users/jsharpe/fin/config/credentials.yml.enc>, :key_path=>#<Pathname:/Users/jsharpe/fin/config/mast\ner.key>}>, @disable_sandbox=false, @add_autoload_paths_to_load_path=true, @permissions_policy=nil, @rake_eager_load=false, @server_timing=true, @paths=#<Rails::Paths::Root:0x000000010f4d5098 @path=#<Pathname:/Users/jsharpe/fin>, @root={\"app\"=>#<Rails::Paths::Path:0x000000010f4d4eb8 @paths=[\"app\"], @current=\"app\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=\"{*,*/concerns}\", @exclude=[\"assets\", \"javascript\"], @autoload_once=false, @eager_load=true, @autoload=false, @load_path=false>, \"app/assets\"=>#<Rails::Paths::Path:0x000000010f4d4d50 @paths=[\"app/assets\"], @current=\"app/assets\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=\"*\", @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"app/controllers\"=>#<Rails::Paths::Path:0x000000010f4d4c88 @paths=[\"app/controllers\"], @curren\nt=\"app/controllers\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=true, @autoload=false, @load_path=false>, \"app/channels\"=>#<Rails::Paths::Path:0x000000010f4d4be8 @paths=[\"app/channels\"], @current=\"app/channels\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=true, @autoload=false, @load_path=false>, \"app/helpers\"=>#<Rails::Paths::Path:0x000000010f4d4b48 @paths=[\"app/helpers\"], @current=\"app/helpers\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=true, @autoload=false, @load_path=false>, \"app/models\"=>#<Rails::Paths::Path:0x000000010f4d4aa8 @paths=[\"app/models\"], @current=\"app/models\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclud\ne=nil, @autoload_once=false, @eager_load=true, @autoload=false, @load_path=false>, \"app/mailers\"=>#<Rails::Paths::Path:0x000000010f4d4a08 @paths=[\"app/mailers\"], @current=\"app/mailers\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=true, @autoload=false, @load_path=false>, \"app/views\"=>#<Rails::Paths::Path:0x000000010f4d4968 @paths=[\"app/views\"], @current=\"app/views\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"lib\"=>#<Rails::Paths::Path:0x000000010f4d48c8 @paths=[\"lib\"], @current=\"lib\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=true>, \"lib/assets\"=>#<Rails::Paths::Path:0x\n000000010f4d4800 @paths=[\"lib/assets\"], @current=\"lib/assets\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=\"*\", @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"lib/tasks\"=>#<Rails::Paths::Path:0x000000010f4d4760 @paths=[\"lib/tasks\"], @current=\"lib/tasks\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=\"**/*.rake\", @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config\"=>#<Rails::Paths::Path:0x000000010f4d46e8 @paths=[\"config\"], @current=\"config\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config/environments\"=>#<Rails::Paths::Path:0x000000010f4d45a8 @paths=[\"config/environments\"], @current=\"config/environments\", @root=#<Rails:\n:Paths::Root:0x000000010f4d5098 ...>, @glob=\"development.rb\", @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config/initializers\"=>#<Rails::Paths::Path:0x000000010f4d4508 @paths=[\"config/initializers\"], @current=\"config/initializers\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=\"**/*.rb\", @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config/locales\"=>#<Rails::Paths::Path:0x000000010f4d4468 @paths=[\"config/locales\"], @current=\"config/locales\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=\"**/*.{rb,yml}\", @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config/routes.rb\"=>#<Rails::Paths::Path:0x000000010f4d43f0 @paths=[\"config/routes.rb\"], @current=\"config/routes.rb\", @root=#<Rails::Paths::R\noot:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config/routes\"=>#<Rails::Paths::Path:0x000000010f4d4350 @paths=[\"config/routes\"], @current=\"config/routes\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=\"**/*.rb\", @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"db\"=>#<Rails::Paths::Path:0x000000010f4d42d8 @paths=[\"db\"], @current=\"db\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"db/migrate\"=>#<Rails::Paths::Path:0x000000010f4d4260 @paths=[\"db/migrate\"], @current=\"db/migrate\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=f\nalse, @load_path=false>, \"db/seeds.rb\"=>#<Rails::Paths::Path:0x000000010f4d41e8 @paths=[\"db/seeds.rb\"], @current=\"db/seeds.rb\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"vendor\"=>#<Rails::Paths::Path:0x000000010f4d4148 @paths=[\"vendor\"], @current=\"vendor\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=true>, \"vendor/assets\"=>#<Rails::Paths::Path:0x000000010f4d40a8 @paths=[\"vendor/assets\"], @current=\"vendor/assets\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=\"*\", @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config/database\"=>#<Rails::Paths::Path:0x000000010f4d4008 @paths=[\"confi\ng/database.yml\"], @current=\"config/database\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config/secrets\"=>#<Rails::Paths::Path:0x000000010f4ebf50 @paths=[\"config\"], @current=\"config/secrets\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=\"secrets.yml{,.enc}\", @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"config/environment\"=>#<Rails::Paths::Path:0x000000010f4ebeb0 @paths=[\"config/environment.rb\"], @current=\"config/environment\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"lib/templates\"=>#<Rails::Paths::Path:0x000000010f4ebe38 @paths=[\"lib/templates\"], @current=\"lib/templa\ntes\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"log\"=>#<Rails::Paths::Path:0x000000010f4ebd48 @paths=[\"log/development.log\"], @current=\"log\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"public\"=>#<Rails::Paths::Path:0x000000010f4ebcd0 @paths=[\"public\"], @current=\"public\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"public/javascripts\"=>#<Rails::Paths::Path:0x000000010f4ebc58 @paths=[\"public/javascripts\"], @current=\"public/javascripts\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autolo\nad_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"public/stylesheets\"=>#<Rails::Paths::Path:0x000000010f4ebbe0 @paths=[\"public/stylesheets\"], @current=\"public/stylesheets\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>, \"tmp\"=>#<Rails::Paths::Path:0x000000010f4ebb68 @paths=[\"tmp\"], @current=\"tmp\", @root=#<Rails::Paths::Root:0x000000010f4d5098 ...>, @glob=nil, @exclude=nil, @autoload_once=false, @eager_load=false, @autoload=false, @load_path=false>}>, @cache_classes=false, @autoload_paths=[], @eager_load_paths=[\"/Users/jsharpe/fin/app/channels\", \"/Users/jsharpe/fin/app/classes\", \"/Users/jsharpe/fin/app/controllers\", \"/Users/jsharpe/fin/app/controllers/concerns\", \"/Users/jsharpe/fin/app/helpers\", \"/Users/jsharpe/fin/app/jobs\", \"/Users/jsharpe/fin/app/mailers\", \"/Users/jsharpe/fin/app/models\", \"/Users/jsharpe/fin/app/models/concerns\", \"/Users/jsharpe/fin/app/sidekiq\"], @autoload_once_paths=[]>\nDid you mean?  asset_host\n/Users/jsharpe/fin/config/initializers/assets.rb:4:in `<top (required)>'\n/Users/jsharpe/fin/config/environment.rb:5:in `<top (required)>'\nTasks: TOP => active_storage:update => environment\n(See full trace by running task with --trace)\n\nSystem configuration\nRails version:\nbe rails --version\nRails 7.0.3\n\nRuby version:\nruby --version\nruby 3.0.4p208 (2022-04-12 revision 3fa771dded) [arm64-darwin21]", "number_of_comments": 7, "comment_authors": ["josh-m-sharpe", "josh-m-sharpe", "skipkayhil", "josh-m-sharpe", "skipkayhil", "skipkayhil", "rails-bot"]},
{"title": "Setting schema_dump in database.yml does not change dump format", "link": "https://github.com/rails/rails/issues/45596", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7556674480438232, "creation_date": "2022-07-14T04:44:37Z", "issue_submitter": "leboshi", "body": "Originally brought up in #43173.  I opened PR #43240 to address it, but that was closed when it was decided #43530 did the same thing.  Unfortunately, I don't think any of us were really reading what the other was doing, because the two PRs actually each only addressed half the opened issue.\nPR incoming to fully address this and the second half of #43173!\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true\nend\n\nclass BugTest < Minitest::Test\n  def test_schema_format_corresponds_with_schema_dump\n    Dir.mktmpdir do |dir|\n      ActiveRecord::Tasks::DatabaseTasks.stub(:db_dir, dir) do\n        old_configurations = ActiveRecord::Base.configurations\n        ActiveRecord::Base.configurations = {\n          \"development\" => {\n            \"primary\" => {\n              \"database\" => \"dev-db\",\n              \"schema_dump\" => \"primary_structure.sql\"\n            }\n          }\n        }\n\n        db_config = ActiveRecord::Base.configurations.configs_for(env_name: \"development\", name: \"primary\")\n        ActiveRecord::Tasks::DatabaseTasks.dump_schema(db_config)\n\n        dump_contents = File.read(File.join(dir, \"primary_structure.sql\"))\n        refute_match /ActiveRecord::Schema/, dump_contents\n        assert_match /CREATE TABLE/, dump_contents\n      ensure\n        ActiveRecord::Base.configurations = old_configurations\n        ActiveRecord::Base.clear_cache!\n      end\n    end\n  end\nend\nExpected behavior\nIf schema_dump is set to something like primary_structure.sql, I'd expect it to do a SQL structure dump rather than a Ruby schema dump.\nActual behavior\nThe filename in schema_dump has no bearing on the format of the dump Rails writes or expects to read.\nSystem configuration\nRails version: (main)\nRuby version: 3.1.2", "number_of_comments": 2, "comment_authors": ["leboshi", "leboshi"]},
{"title": "Rails 7.0.3 Db migration with multiple Databases disturbing tasks name change when using database_tasks: in database.yml", "link": "https://github.com/rails/rails/issues/45552", "labels": ["\n                activerecord\n", "\n                pinned\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8671579360961914, "creation_date": "2022-07-08T22:00:48Z", "issue_submitter": "net1957", "body": "Steps to reproduce\nwith the following databse.yml\ndefault: &default\n  adapter: sqlite3\n  pool: <%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %>\n  timeout: 5000\n\ndevelopment:\n  primary:\n    <<: *default\n    database: db/development.sqlite3\n  comdev_fr:\n    <<: *default\n    migrations_paths: db/migrate_comdev_fr\n    database: db/development_comdev_fr.sqlite3\nthe bin/rails -T return (filterer on db:migrate):\nrails db:migrate                         # Migrate the database (options: V...\nrails db:migrate:comdev_fr               # Migrate comdev_fr database for c...\nrails db:migrate:down                    # Runs the \"down\" for a given migr...\nrails db:migrate:primary                 # Migrate primary database for cur...\nrails db:migrate:redo                    # Rolls back the database one migr...\nrails db:migrate:redo:comdev_fr          # Rolls back comdev_fr database on...\nrails db:migrate:redo:primary            # Rolls back primary database one ...\nrails db:migrate:status                  # Display status of migrations\nrails db:migrate:status:comdev_fr        # Display status of migrations for...\nrails db:migrate:status:primary          # Display status of migrations for...\nrails db:migrate:up                      # Runs the \"up\" for a given migrat...\nin most update/install script we use only the tasks related to the primary db:\nrails db:migrate:primary                 # example\nWith the following databse.yml\ndefault: &default\n  adapter: sqlite3\n  pool: <%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %>\n  timeout: 5000\n\ndevelopment:\n  primary:\n    <<: *default\n    database: db/development.sqlite3\n  comdev_fr:\n    <<: *default\n    database_tasks: false\n    migrations_paths: db/migrate_comdev_fr\n    database: db/development_comdev_fr.sqlite3\nthe bin/rails -T return (filterer on db:migrate):\nrails db:migrate                         # Migrate the database (options: V...\nrails db:migrate:down                    # Runs the \"down\" for a given migr...\nrails db:migrate:redo                    # Rolls back the database one migr...\nrails db:migrate:status                  # Display status of migrations\nrails db:migrate:up                      # Runs the \"up\" for a given migrat...\nand\nrails db:migrate:primary command is not found and so our script fail.\nI have tried with more DB and as soon only 1DB has database_tasks: true (the default),\nthe tasks related to multi-db don't exist any more\nI would be nice that in this case\nthe task related to the primary db don't disappear.\nrails db:migrate:primary  # should be here\n*** Why?\nIn the future if we add a new DB that support migrations, the commands for migrating the primary DB\nchange from\nrails db:migrate\nto\nrails db:migrate:primary\nand most time migration are done DB by DB in separate scripts, that we need to change.\nSo it would be nice  to allow the  task rails db:migrate:xxxx to exist even if it's the only DB with database_tasks: true (the default)\nSystem configuration\nRails version: 7.0.3\nRuby version: 3.0.4", "number_of_comments": 6, "comment_authors": ["net1957", "eileencodes", "net1957", "eileencodes", "net1957", "rails-bot"]},
{"title": "Multiple joins on the same table are broken in 6.1 and above", "link": "https://github.com/rails/rails/issues/44922", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7565248012542725, "creation_date": "2022-04-19T17:28:32Z", "issue_submitter": "mikdiet", "body": "I'm upgrading my Rails 6.0 application, and got an error (that is reproducible in 7.0 as well).\nI'm not sure what exactly causes this issue, because as you could see below I have a very edge case, containing:\n\npolymorphic association;\nhas_one associations;\nSTI;\nleft joins.\n\nSo, the test first\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"~> 6.0.0\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :locations, force: true do |t|\n    t.string :type\n  end\n\n  create_table :libraries, force: true do |t|\n    t.integer :storing_location_id\n  end\n\n  create_table :settings, force: true do |t|\n    t.string :value\n  end\n\n  create_table :setting_associations, force: true do |t|\n    t.integer :setting_id\n    t.integer :target_id\n    t.string :target_type\n  end\n\n  create_table :books, force: true do |t|\n    t.integer :library_id\n    t.integer :current_location_id\n  end\nend\n\nclass Book < ActiveRecord::Base\n  belongs_to :library\n  belongs_to :current_location\nend\n\nclass Setting < ActiveRecord::Base\nend\n\nclass SettingAssociation < ActiveRecord::Base\n  belongs_to :target, polymorphic: true\n  belongs_to :setting\nend\n\nclass Library < ActiveRecord::Base\n  has_many :books\n  belongs_to :storing_location\nend\n\nclass Location < ActiveRecord::Base\n  has_one :setting_association, as: :target\n  has_one :setting, through: :setting_association\nend\n\nclass CurrentLocation < Location\n  has_many :books\nend\n\nclass StoringLocation < Location\n  has_many :libraries\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    join_query = Book.left_joins(current_location: :setting, library: { storing_location: :setting })\n    puts join_query.to_sql\n\n    current_location = CurrentLocation.create\n    storing_location = StoringLocation.create\n    library = Library.create storing_location: storing_location\n    book = Book.create current_location: current_location, library: library\n    setting1 = Setting.create value: '1'\n    setting2 = Setting.create value: '2'\n    current_location.create_setting_association setting: setting1\n    storing_location.create_setting_association setting: setting2\n\n    assert_equal ['1', '2'], join_query.pluck('settings.value', 'settings_locations.value').first\n  end\nend\nExpected behavior\nIn Rails 6.0 it passes, and SQL generated is\nSELECT \"books\".* FROM \"books\" \nLEFT OUTER JOIN \"locations\" ON \"locations\".\"id\" = \"books\".\"current_location_id\" AND \"locations\".\"type\" = 'CurrentLocation' \nLEFT OUTER JOIN \"setting_associations\" ON \"setting_associations\".\"location_id\" = \"locations\".\"id\" \nLEFT OUTER JOIN \"settings\" ON \"settings\".\"id\" = \"setting_associations\".\"setting_id\" \nLEFT OUTER JOIN \"libraries\" ON \"libraries\".\"id\" = \"books\".\"library_id\" \nLEFT OUTER JOIN \"locations\" \"storing_locations_libraries\" ON \"storing_locations_libraries\".\"id\" = \"libraries\".\"storing_location_id\" AND \"storing_locations_libraries\".\"type\" = 'StoringLocation' \nLEFT OUTER JOIN \"setting_associations\" \"setting_associations_locations_join\" ON \"setting_associations_locations_join\".\"location_id\" = \"storing_locations_libraries\".\"id\" \nLEFT OUTER JOIN \"settings\" \"settings_locations\" ON \"settings_locations\".\"id\" = \"setting_associations_locations_join\".\"setting_id\"\nActual behavior\nIn Rails 6.1 and 7.0 the test fails with a message\nExpected: [\"1\", \"2\"]\nActual: [\"1\", \"1\"]\n\nand SQL generated is\nSELECT \"books\".* FROM \"books\" \nLEFT OUTER JOIN \"locations\" ON \"locations\".\"id\" = \"books\".\"current_location_id\" AND \"locations\".\"type\" = 'CurrentLocation' \nLEFT OUTER JOIN \"setting_associations\" ON \"setting_associations\".\"location_id\" = \"locations\".\"id\" \nLEFT OUTER JOIN \"settings\" ON \"settings\".\"id\" = \"setting_associations\".\"setting_id\" \nLEFT OUTER JOIN \"libraries\" ON \"libraries\".\"id\" = \"books\".\"library_id\" \nLEFT OUTER JOIN \"locations\" \"storing_locations_libraries\" ON \"storing_locations_libraries\".\"id\" = \"libraries\".\"storing_location_id\" AND \"storing_locations_libraries\".\"type\" = 'StoringLocation' \nLEFT OUTER JOIN \"settings\" \"settings_locations\" ON \"settings_locations\".\"id\" = \"setting_associations\".\"setting_id\"\nNotice this missing part:\nLEFT OUTER JOIN \"setting_associations\" \"setting_associations_locations_join\" ON \"setting_associations_locations_join\".\"location_id\" = \"storing_locations_libraries\".\"id\"\nso then it joins with wrong table  ON \"settings_locations\".\"id\" = \"setting_associations\".\"setting_id\" instead of ON \"settings_locations\".\"id\" = \"setting_associations_locations_join\".\"setting_id\" originally.\nSystem configuration\nRails version:\n\ncurrent 6.0.4.7\ntested on 6.1.5 and 7.0.2.3\n\nRuby version: 2.7.6p219 (2022-04-12 revision c9c2245c0a) [x86_64-darwin21]", "number_of_comments": 13, "comment_authors": ["mikdiet", "philip-maina", "philip-maina", "rails-bot", "mikdiet", "rails-bot", "mikdiet", "rails-bot", "mikdiet", "rails-bot", "mikdiet", "rails-bot", "mikdiet"]},
{"title": "Active record association not attached (or detached) with config.load_defaults 7.0", "link": "https://github.com/rails/rails/issues/44790", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7419934272766113, "creation_date": "2022-03-29T06:37:22Z", "issue_submitter": "aglushkov", "body": "Steps to reproduce\nThis works with load_defaults 6.0 and raises error with load_defaults 7.0\n\nBuild some User\nBuild some Order with buyer User\nBuild some OrderItem with Order and owner User\nSave OrderItem\n\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", \"~> 7.0.0\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record/railtie\"\n\nclass Application < Rails::Application\n  config.load_defaults 7.0 #------------ WORKS with 6.0 ------------\nend\n\nENV[\"DATABASE_URL\"] = \"sqlite3::memory:\"\nRails.application.initialize!\n\nActiveRecord::Schema.define do\n  create_table :users, force: true do |t|\n  end\n\n  create_table :orders, force: true do |t|\n    t.belongs_to :buyer, null: false\n  end\n\n  create_table :order_items, force: true do |t|\n    t.belongs_to :user, null: false\n    t.belongs_to :order, null: false\n  end\nend\n\nclass User < ActiveRecord::Base\n  has_many :owned_order_items, class_name: 'OrderItem'\n  has_many :buyer_orders, class_name: 'Order', foreign_key: :buyer_id, inverse_of: :buyer\nend\n\nclass Order < ActiveRecord::Base\n  has_many :order_items\n  belongs_to :buyer, class_name: 'User', inverse_of: :buyer_orders\nend\n\nclass OrderItem < ActiveRecord::Base\n  belongs_to :order\n\n  belongs_to :owner,\n    class_name: 'User',\n    foreign_key: :user_id,\n    inverse_of: :owned_order_items\nend\n\nbuyer = User.new\norder = Order.new(buyer: buyer)\norder_item = OrderItem.new(owner: buyer, order: order)\n\norder_item.save!\nExpected behavior\nNo errors, order_item successfully saved\nActual behavior\nError order_item.order_id in nil\nSQLite3::ConstraintException: NOT NULL constraint failed: order_items.order_id (ActiveRecord::NotNullViolation)\n\nSystem configuration\nRails 7.0.2.3\nruby 3.0.2p107 (2021-07-07 revision 0db68f0233) [x86_64-linux]", "number_of_comments": 3, "comment_authors": ["aglushkov", "fatkodima", "alexadia"]},
{"title": "Associated records are validated when passing context", "link": "https://github.com/rails/rails/issues/45209", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.222472906112671, "creation_date": "2022-05-30T04:45:47Z", "issue_submitter": "shouichi", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"~> 7.0.0\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n    t.string :body\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\n\n  after_create :create_invalid_comment!\n\n  def create_invalid_comment!\n    c = comments.new\n    c.save!(validate: false)\n  end\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\n\n  validates :body, presence: true\nend\n\nclass BugTest < Minitest::Test\n  def test_save\n    post = Post.create\n    assert post.save\n  end\n\n  def test_save_with_context\n    post = Post.create\n    assert post.save(context: :whatever)\n  end\n\n  def test_save_with_context_reloaded\n    post = Post.create.reload\n    assert post.save(context: :whatever)\n  end\nend\nExpected behavior\nAssociated records are not validated.\nActual behavior\nAssociated records are validated.\nSystem configuration\nRails version: Rails 7.0.3\nRuby version: ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) [x86_64-linux]", "number_of_comments": 5, "comment_authors": ["shouichi", "martinjaimem", "shouichi", "rails-bot", "shouichi"]},
{"title": "Action Cable: Client-initiated heartbeats", "link": "https://github.com/rails/rails/issues/45112", "labels": ["\n                actioncable\n", "\n                pinned\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5254793167114258, "creation_date": "2022-05-16T20:17:44Z", "issue_submitter": "jeremy", "body": "Tracking issue for a new feature we're extracting from Basecamp: Relying on clients to send heartbeats.\nMotivation: Preventing defunct session cruft from building up on WebSockets load balancers / proxies (e.g. Nginx or F5 BIG-IP) during network failovers and anycast IP changes.\n\nBasecamp runs in multiple datacenters for high availability. During failover events and network changes, existing Action Cable sessions are severed. Hence they stop receiving server-sent heartbeats and attempt a reconnect, now landing on the new network destination. All good, as expected.\nOn the server side, however, a proxy or load balancer sitting in front of the app can accumulate all these indeterminate maybe-dead NATted connections, eating a ton of memory and sockets. The proxy needs to ceremoniously tear down the suddenly-absent client TCP connection, but in the meantime it's getting heartbeat pings from the server side, suggesting the connection is alive and well, so it hangs onto all the connections until the client side is surely closed.\n\nShifting the heartbeat responsibility from the server → client to client → server neatly resolves this. When network routing changes, the client reconnects to the new destination and ceases heartbeats to the old one. The proxy at the old destination no longer sees client or server traffic on the connection, so it gracefully & expeditiously closes it out.\nThis feels like a strong default behavior as well, considering the client is already responsible for all other aspects of connection management.\nNeeds some care with backward and forward compatibility, anticipating that one, both, or neither heartbeating mechanisms could be in play during initial deployments or rollback therefrom.\nImplementation:\n\nIntroduce native heartbeating to the connection monitor\nIntroduce a native ping/heartbeat message\nSkip ActionCable::Server::Base#setup_heartbeat_timer when client-initiated heartbeats are enabled\n\nExample from Basecamp, implemented using a Cable channel to \"drive\" the connection monitor:\nBC.cableReady(function() {\n  const pingInterval = (ActionCable.ConnectionMonitor.staleThreshold * 1000) / 2 // 3 seconds\n\n  BC.cableMonitor = BC.cable.subscriptions.create(\"MonitoringChannel\", {\n    initialized() {\n      ({monitor: this.monitor} = this.consumer.connection)\n      this.ping = this.ping.bind(this)\n    },\n\n    connected() {\n      this.monitor.recordConnect()\n      return this.ping()\n    },\n\n    received(data) {\n      switch (data.action) {\n        case \"pong\":\n          return this.pong()\n        case \"pubsub_pong\":\n          return this.pong()\n      }\n    },\n\n    ping() {\n      this.perform(\"ping\")\n      return this.schedulePing()\n    },\n\n    pong() {\n      this.monitor.recordPing()\n      return this.schedulePing()\n    },\n\n    schedulePing() {\n      clearTimeout(this.scheduledPing)\n      this.scheduledPing = setTimeout(this.ping, pingInterval)\n    }\n  }\n  )\n})\nrequire \"securerandom\"\nrequire \"benchmark\"\n\n# Send our own pings and answer monitoring questions.\n#\n# This gives us forward compat with Action Cable protocol changes,\n# like pings changing from subscriptions to message types.\nclass MonitoringChannel < ApplicationCable::Channel\n  def subscribed\n    @subscription_uuid = SecureRandom.uuid\n    @last_received_at = Time.now.to_f\n\n    stream_for @subscription_uuid, ->(json) {\n      instrument_pubsub_latency ActiveSupport::JSON.decode(json) do |message|\n        transmit message\n      end\n    }\n  end\n\n  def ping\n    transmit({ action: \"pong\" })\n  end\n\n  def pubsub_ping\n    self.class.broadcast_to @subscription_uuid, action: \"pubsub_pong\", sent_at: Time.now.to_f\n  end\n\n  private\n    def instrument_pubsub_latency(message)\n      received_at = Time.now.to_f\n\n      if sent_at = message.delete(\"sent_at\")\n        latency = received_at - sent_at.to_f\n        message[\"latency_ms\"] = ms(latency)\n      end\n\n      message[\"period_ms\"] = ms(received_at - @last_received_at)\n      @last_received_at = received_at\n\n      ActiveSupport::Notifications.instrument :performance, measurement: \"Chat.pubsub_delay\", value: latency, action: :timing\n\n      yield message if block_given?\n      message\n    end\n\n    def ms(seconds)\n      (1000 * seconds).round(2)\n    end\nend", "number_of_comments": 3, "comment_authors": ["jeremy", "palkan", "rails-bot"]},
{"title": "Preload doesn't work properly for has_many through associations with STI model", "link": "https://github.com/rails/rails/issues/45056", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                With reproduction steps\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.29148530960083, "creation_date": "2022-05-10T12:41:05Z", "issue_submitter": "vitalinfo", "body": "Steps to reproduce\nIt does work for Rails versions less than 7, but doesn't for 7+.\n# frozen_string_literal: true\n\nrequire 'bundler/inline'\n\ngemfile(true) do\n  source 'https://rubygems.org'\n\n  gem 'rails', '7.0.3'\n  gem 'sqlite3'\nend\n\nrequire 'active_record'\nrequire 'minitest/autorun'\nrequire 'logger'\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')\nActiveRecord::Base.logger = Logger.new($stdout)\n\nActiveRecord::Schema.define do\n  create_table 'companies', force: :cascade, &:timestamps\n\n  create_table 'memberships', force: :cascade do |t|\n    t.integer 'company_id'\n    t.integer 'user_id'\n    t.timestamps\n  end\n\n  create_table 'profiles', force: :cascade do |t|\n    t.integer 'user_id'\n    t.timestamps\n  end\n\n  create_table 'user_settings', force: :cascade do |t|\n    t.integer 'user_id'\n    t.timestamps\n  end\n\n  create_table 'users', force: :cascade do |t|\n    t.string 'type', null: false\n    t.timestamps\n  end\nend\n\nclass Company < ActiveRecord::Base\n  has_many :memberships, inverse_of: :company, dependent: :destroy\n  has_many :users, through: :memberships\n\n  has_many :profiles, through: :users\n  has_many :user_settings, through: :users\nend\n\nclass Membership < ActiveRecord::Base\n  belongs_to :company, inverse_of: :memberships\n  belongs_to :user, inverse_of: :memberships, class_name: 'User::Simple'\nend\n\nclass Profile < ActiveRecord::Base\n  belongs_to :user, inverse_of: :profile, class_name: 'User::Simple'\nend\n\nclass UserSetting < ActiveRecord::Base\n  belongs_to :user, inverse_of: :user_setting, class_name: 'User::Simple'\nend\n\nclass User < ActiveRecord::Base\n  has_one :profile, inverse_of: :user, dependent: :destroy\n  has_one :user_setting, inverse_of: :user, dependent: :destroy\n\n  has_many :memberships, inverse_of: :user, dependent: :destroy\n\n  after_create do\n    create_profile(user: self)\n    create_user_setting(user: self)\n  end\nend\n\nclass User\n  class Simple < User\n  end\nend\n\nclass BugTest < Minitest::Test\n  def test_preload\n    count = rand(1..10)\n    company = Company.create!\n    count.times { Membership.create!(company: company, user: User::Simple.create!) }\n\n    list = Company.all.preload(:profiles, :user_settings)\n\n    assert_equal count, list.map(&:profiles).flatten.size\n    assert_equal count, list.map(&:user_settings).flatten.size\n  end\nend\nExpected behavior\nthrough (memberships in example) association loads once and preload associations present in the parent object.\nActual behavior\nthrough (memberships in example) association loads as many times as preload associations provided. Second and further associations always are empty. If remove class_name: 'User::Simple' from the Membership model, everything works fine (through association loads once and preload associations as well), but this isn't an option, this's just shows that problem in the STI approach and associate_records_to_owner? behaviour.\nSystem configuration\nRails version: 7.0.3\nRuby version: 3.0.3", "number_of_comments": 4, "comment_authors": ["vitalinfo", "cgunther", "rails-bot", "cgunther"]},
{"title": "simple_format with blank wrapper_tag option returns nonsence HTML tag", "link": "https://github.com/rails/rails/issues/44948", "labels": ["\n                actionview\n", "\n                attached PR\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.312493085861206, "creation_date": "2022-04-24T08:44:14Z", "issue_submitter": "JunichiIto", "body": "Steps to reproduce\nUse simple_format method with blank wrapper_tag option.\nsimple_format(nil, {}, { wrapper_tag: \"\" })\nSome people try to remove wrapper tag from the result of simple_format method, so they give an empty string to wrapper_tag option.\nExpected behavior\nIt should fallback to p tag:\n\"<p></p>\"\nOr return no wrapper tags:\n\"\"\nOr raise ArgumentError.\nActual behavior\nIt returns the following HTML:\n\"<></>\"\nBut it is nonsense.\nSystem configuration\nRails version: 7.0.2.3\nRuby version: 3.1.1", "number_of_comments": 1, "comment_authors": ["JunichiIto"]},
{"title": "Active Record class method scope leak", "link": "https://github.com/rails/rails/issues/44792", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7769856452941895, "creation_date": "2022-03-29T15:34:35Z", "issue_submitter": "abaldwin88", "body": "Active Record leaks scope on class methods directly defined on the model. This behavior is different than queries constructed within a scope definition. This issue is an extension of #32380\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :topics, force: true do |t|\n    t.references :topics, :parent\n  end\nend\n\nclass Topic < ActiveRecord::Base\n  # NOTE: Removing the class methods below and replacing with these\n  # scope calls will cause the assert to pass\n  #\n  # scope :toplevel, -> { where(parent_id: nil) }\n  # scope :children, -> { where.not(parent_id: nil) }\n  # scope :has_children, -> { where(id: Topic.children.select(:parent_id)) }\n\n  def self.toplevel\n    where(parent_id: nil)\n  end\n\n  def self.children\n    where.not(parent_id: nil)\n  end\n\n  def self.has_children\n    where(id: Topic.children.select(:parent_id))\n  end\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    parent_topic = Topic.create!\n    Topic.create!(parent_id: parent_topic.id)\n\n    assert_equal 1, Topic.toplevel.has_children.count\n  end\nend\nExpected behavior\nChained class methods do not leak scope\nActual behavior\nFailure:\nBugTest#test_association_stuff [bug_report.rb:54]:\nExpected: 1\nActual: 0\n\nSystem configuration\nRails version: 7.0.2.3 and main\nRuby version: 2.7.0", "number_of_comments": 9, "comment_authors": ["abaldwin88", "ghiculescu", "ghiculescu", "rails-bot", "abaldwin88", "rails-bot", "abaldwin88", "matthewd", "rafaelfranca"]},
{"title": "Through associations ignore the joins option of the through association if merge is used", "link": "https://github.com/rails/rails/issues/44806", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6709198951721191, "creation_date": "2022-03-30T21:38:12Z", "issue_submitter": "jguecaimburu", "body": "The example provided fails in a has_many ... through: ... association but has_one ... through: ... associations have the same behaviour.\nSteps to reproduce\nbegin\n  require \"bundler/inline\"\nrescue LoadError => e\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\n  raise e\nend\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true\n\n  create_table :users, force: true\n\n  create_table :sources, force: true do |t|\n    t.boolean :online, null: false, default: true\n  end\n\n  create_table :comments, force: true do |t|\n    t.references :post\n    t.references :user\n    t.references :source\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\n  has_many :online_comments, ->{ joins(:source).merge(Source.where(online: true)) }, class_name: \"Comment\"\n  has_many :online_users, through: :online_comments, source: :user\nend\n\nclass User < ActiveRecord::Base\nend\n\nclass Source < ActiveRecord::Base\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :source\n  belongs_to :post\n  belongs_to :user\nend\n\nclass BugTest < Minitest::Test\n  def test_association\n    Comment.create!(post: Post.create!, source: Source.create!(online: true), user: User.create!)\n    post = Post.first!\n    assert_equal post.online_comments, [Comment.first!]\n    assert_equal post.online_users, [User.first!] # Fails with `ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: sources.online: SELECT \"users\".* FROM \"users\" INNER JOIN \"comments\" ON \"users\".\"id\" = \"comments\".\"user_id\" WHERE \"comments\".\"post_id\" = ? AND \"sources\".\"online\" = ?`\n  end\nend\nExpected behavior\nWhen using the has_many :online_users association on Post in the example above, the joins(:source) from the online_comments association is expected to be part of the query.\nActual behavior\nThe joins(:source) option gets removed from the final query causing it to fail.\nIf :online_comments is changed to has_many :online_comments, ->{ joins(:source).where(sources: {online: true}) }, class_name: \"Comment\", the test pass. That was reported and and fixed in #39390.\nA similar issue was fixed in #41029.\nSystem configuration\nTested on:\n6.1.3.1, ruby 2.6.6\nmain branch, ruby 2.7.3", "number_of_comments": 4, "comment_authors": ["jguecaimburu", "rails-bot", "jguecaimburu", "jguecaimburu"]},
{"title": "All Queries Default Scopes can lead to \"ignored\" updates", "link": "https://github.com/rails/rails/issues/44823", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6329271793365479, "creation_date": "2022-04-01T15:59:17Z", "issue_submitter": "pjambet", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n    t.integer :sharding_key\n    t.timestamps(null: false)\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\nend\n\nclass Comment < ActiveRecord::Base\n\n  default_scope -> {\n    if Current.sharding_key.present?\n      where(sharding_key: Current.sharding_key)\n    end\n  }, all_queries: true\n\n  belongs_to :post\nend\n\nclass Current < ActiveSupport::CurrentAttributes\n  attribute :sharding_key\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    post = Post.create!\n    post.comments << Comment.create!(sharding_key: 1)\n    comment = post.comments.first\n    comment.reload\n    assert comment\n\n    Current.sharding_key = 2\n\n    # a few checks to confirm things work as expected\n    assert_equal 0, post.comments.count # 0 because the sharding key filter ignores the existing comment\n    assert_equal 0, Comment.count # ditto\n    assert_nil Comment.first # ditto\n    assert_raises { comment.reload } # raises an exception, makes sense, no records match the conditions\n\n    original_updated_at = comment.updated_at\n\n    comment.update!(updated_at: Time.current) # silently does nothing\n\n    # \"Lies\" to you, making it look like the record was updated, the in-memory value was changed on the instance but not in the DB\n    refute comment.updated_at == original_updated_at\n\n    # Check with the record from the DB, and fails, since nothing was updated\n    refute Comment.unscoped { comment.reload.updated_at } == original_updated_at\n  end\nend\nExpected behavior\nEither an exception when calling .update! if the actual query ends up updating nothing and/or the values of the attributes that were expected to be changed to not be changed on the instance.\nActual behavior\nThe call to update! does not fail, the generated query looks like:\nUPDATE \"comments\" SET \"updated_at\" = ? WHERE \"comments\".\"id\" = ? AND \"comments\".\"sharding_key\" = ?  [[\"updated_at\", \"2022-04-01 15:45:13.927742\"], [\"id\", 1], [\"sharding_key\", 2]]\nWhich matches nothing. (Interestingly, using .touch calls a rollback, whereas update sends a commit, not sure why it's different: begin transaction;  UPDATE ... ;  commit transaction with .update! and begin transaction; UPDATE ...;  rollback transaction with .touch\nSystem configuration\nRails version: 7.1.0.alpha from https://github.com/rails/rails.git (at main@3b9be03)\nRuby version: ruby 3.1.1p18 (2022-02-18 revision 53f5fc4236) [arm64-darwin21]\nFinal note\nA related potential issue — which I'd be happy to create a separate ticket for if useful — is that .unscoped does not seem to work with updates, which feels unexpected, in the example above, I would have expected\nComment.unscoped do\n  comment.update!(updated_at: Time.current)\nend\nto issue the following SQL query:\nUPDATE \"comments\" SET \"updated_at\" = ? WHERE \"comments\".\"id\" = ?  [[\"updated_at\", \"2022-04-01 15:55:43.523284\"], [\"id\", 1]]\nBut it seems like unscoped does not change the behavior of update\ncc @eileencodes @kaiyannameighu", "number_of_comments": 6, "comment_authors": ["pjambet", "eileencodes", "Erol", "Erol", "pjambet", "rails-bot"]},
{"title": "Actions named #alert and #notice are not available from Rails 7", "link": "https://github.com/rails/rails/issues/44867", "labels": ["\n                actionpack\n", "\n                attached PR\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6639213562011719, "creation_date": "2022-04-10T23:56:57Z", "issue_submitter": "r7kamura", "body": "Steps to reproduce\nRun this test:\n# frozen_string_literal: true\n\nrequire 'bundler/inline'\n\ngemfile do\n  source 'https://rubygems.org'\n\n  gem 'rails', '~> 7.0.0'\nend\n\nrequire 'rack/test'\nrequire 'action_controller/railtie'\n\nclass TestApp < Rails::Application\n  config.root = __dir__\n  config.hosts << 'example.org'\n  config.session_store :cookie_store, key: 'cookie_store_key'\n  secrets.secret_key_base = 'secret_key_base'\n\n  config.logger = ::Logger.new($stdout)\n  ::Rails.logger  = config.logger\n\n  routes.draw do\n    get '/notice' => 'test#notice'\n  end\nend\n\nclass TestController < ActionController::Base\n  include ::Rails.application.routes.url_helpers\n\n  def notice\n    head :ok\n  end\nend\n\nrequire 'minitest/autorun'\n\nclass BugTest < Minitest::Test\n  include ::Rack::Test::Methods\n\n  def test_notice_action\n    get '/notice'\n    assert last_response.ok?\n  end\n\n  private\n\n  def app\n    ::Rails.application\n  end\nend\nExpected behavior\nWhen I define an action named #alert or #notice, I expect it to work normally.\nActual behavior\nThis test succeeds on Rails 6.1, but fails on Rails 7.0.\n$ ruby test.rb \nFetching gem metadata from https://rubygems.org/...........\nResolving dependencies...\nUsing rake 13.0.6\nUsing concurrent-ruby 1.1.10\nUsing minitest 5.15.0\nUsing builder 3.2.4\nUsing erubi 1.10.0\nUsing racc 1.6.0\nUsing crass 1.0.6\nUsing rack 2.2.3\nUsing nio4r 2.5.8\nUsing websocket-extensions 0.1.5\nUsing marcel 1.0.2\nUsing mini_mime 1.1.2\nUsing digest 3.1.0\nUsing timeout 0.2.0\nUsing strscan 3.0.1\nUsing bundler 2.3.6\nUsing method_source 1.0.0\nUsing thor 1.2.1\nUsing zeitwerk 2.5.4\nUsing i18n 1.10.0\nUsing tzinfo 2.0.4\nUsing rack-test 1.1.0\nUsing activesupport 7.0.2.3\nUsing globalid 1.0.0\nUsing websocket-driver 0.7.5\nUsing activemodel 7.0.2.3\nUsing activejob 7.0.2.3\nUsing mail 2.7.1\nUsing nokogiri 1.13.3 (x86_64-linux)\nUsing net-protocol 0.1.3\nUsing rails-dom-testing 2.0.3\nUsing loofah 2.16.0\nUsing net-imap 0.2.3\nUsing net-pop 0.1.1\nUsing activerecord 7.0.2.3\nUsing net-smtp 0.3.1\nUsing rails-html-sanitizer 1.4.2\nUsing actionview 7.0.2.3\nUsing actionpack 7.0.2.3\nUsing actioncable 7.0.2.3\nUsing activestorage 7.0.2.3\nUsing actionmailer 7.0.2.3\nUsing railties 7.0.2.3\nUsing actionmailbox 7.0.2.3\nUsing actiontext 7.0.2.3\nUsing rails 7.0.2.3\nRun options: --seed 2353\n\n# Running:\n\nI, [2022-04-11T08:51:49.764647 #23370]  INFO -- : Started GET \"/notice\" for 127.0.0.1 at 2022-04-11 08:51:49 +0900\nF, [2022-04-11T08:51:49.834118 #23370] FATAL -- :   \nAbstractController::ActionNotFound (The action 'notice' could not be found for TestController):\n  \ntest.rb:42:in `test_notice_action'\nF\n\nFailure:\nBugTest#test_notice_action [test.rb:43]:\nExpected false to be truthy.\n\nrails test test.rb:41\n\n\n\nFinished in 0.085620s, 11.6795 runs/s, 11.6795 assertions/s.\n1 runs, 1 assertions, 1 failures, 0 errors, 0 skips\nSystem configuration\nRails version: 7.0.2.3\nRuby version: 2.7.2\n$ ruby -v\nruby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-linux]", "number_of_comments": 3, "comment_authors": ["r7kamura", "r7kamura", "p8"]},
{"title": "Enumerable::index_with will share the memory of the default value between keys", "link": "https://github.com/rails/rails/issues/45286", "labels": ["\n                attached PR\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7999961376190186, "creation_date": "2022-06-07T15:30:09Z", "issue_submitter": "dsusviela", "body": "Steps to reproduce\nApologies if I'm misunderstanding the method, but AFAIK each default value should be independent.\nSo far as I've tested, arrays and hashes. Those are being shared. However if the value is a string, this one will not be shared.\nThis will fail:\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\nend\n\nrequire \"active_support\"\nrequire \"active_support/core_ext/enumerable\"\nrequire \"minitest/autorun\"\n\nclass BugTest < Minitest::Test\n  def test_index_with_shared_memory\n    keys = [:only_i_should_change, :i_should_stay_empty]\n    subject = keys.index_with({})\n\n    subject[:only_i_should_change][:a_key] = \"value\"\n\n    assert subject[:only_i_should_change][:a_key] == \"value\"\n    assert subject[:i_should_stay_empty] == {}\n  end\nend\nThis will succeed however.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\nend\n\nrequire \"active_support\"\nrequire \"active_support/core_ext/enumerable\"\nrequire \"minitest/autorun\"\n\nclass BugTest < Minitest::Test\n  def test_index_with_shared_memory\n    keys = [:only_i_should_change, :i_should_stay_empty]\n    subject = keys.index_with(\"a_string\")\n\n    subject[:only_i_should_change] = \"value\"\n\n    assert subject[:only_i_should_change] == \"value\"\n    assert subject[:i_should_stay_empty] == \"a_string\"\n  end\nend\nExpected behavior\nWhen using arrays or hashes, the values should be independent. In the failed example that means that the hash under the key :is_should_stay_empty should be empty\nActual behavior\nWhen using arrays or hashes, the values are not independent. In the failed example the hash under the key :is_should_stay_empty is the same as :only_i_should_change.\nSystem configuration\nRails version:\nv7.0.3\nRuby version:\nRuby version 2.7.5", "number_of_comments": 5, "comment_authors": ["dsusviela", "nvasilevski", "nvasilevski", "dsusviela", "nvasilevski"]},
{"title": "Record#dup adds this additional new record to associations this record belongs to when inverse_of specified", "link": "https://github.com/rails/rails/issues/44819", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                With reproduction steps\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4439189434051514, "creation_date": "2022-04-01T09:33:38Z", "issue_submitter": "aglushkov", "body": "Steps to reproduce\nRecord#dup adds this additional new record to associations this record belongs to when inverse_of specified.\nSo when parent association is saved, it saves this duplicated record.\n\nIt does not saves new records  with config.load_defaults 6.0\nIt does not saves new records when inverse_of option not specified\n\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", \"~> 7.0.0\"\n  gem \"sqlite3\"\n  gem \"debug\"\nend\n\nrequire \"active_record/railtie\"\nrequire \"debug\"\n\nclass Application < Rails::Application\n  config.load_defaults 6.1 #------------ WORKS with 6.0 ------------\nend\n\nENV[\"DATABASE_URL\"] = \"sqlite3::memory:\"\nRails.application.initialize!\n\n\nActiveRecord::Schema.define do\n  create_table :categories, force: true do |t|\n    t.string :name, default: 'default'\n  end\n\n  create_table :topics, force: true do |t|\n    t.belongs_to :category, null: false\n  end\nend\n\nclass Category < ActiveRecord::Base\n  has_many :topics, inverse_of: :category # WORKS without inverse_of even with load_defaults 6.1\nend\n\nclass Topic < ActiveRecord::Base\n  belongs_to :category, inverse_of: :topics # WORKS without inverse_of even with load_defaults 6.1\nend\n\ncategory = Category.create!\ntopic = Topic.create!(category: category)\n\n# Add topic duplicate\ntopic_dup = topic.dup\ncategory_from_dup = topic.dup.category\n\n# We have extra topic with id = nil\nputs category_from_dup.topics.size\nputs category_from_dup.topics.inspect\n\n# Save category\ncategory_from_dup.update!(name: 'name')\n\n# It creates additional topic\nputs category_from_dup.reload.topics.size\nputs category_from_dup.topics.inspect\nExpected behavior\nNo additional records should be created. Same as it works with load_defaults 6.0. Or same as it works without inverse_of option\nActual behavior\nWe've got additional record.dup assigned to parent association\nSystem configuration\nRails version: Rails 7.0.2.3\nRuby version: ruby 3.0.2p107 (2021-07-07 revision 0db68f0233) [x86_64-linux]", "number_of_comments": 9, "comment_authors": ["aglushkov", "ghiculescu", "aglushkov", "ghiculescu", "koshigoe", "clouvet", "clouvet", "lst4rksugarwork", "clouvet"]},
{"title": "Too much magic in Rails.logger and logging to STDERR causes duplicate output.", "link": "https://github.com/rails/rails/issues/44800", "labels": ["\n                activesupport\n", "\n                pinned\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4669153690338135, "creation_date": "2022-03-30T01:35:55Z", "issue_submitter": "ioquatix", "body": "With the following code in a Rails configuration file:\nRails.logger = Logger.new(STDERR)\nCauses duplicate log statements when running the app with rails s. It's caused by the following:\n\n\n\nrails/railties/lib/rails/commands/server/server_command.rb\n\n\n        Lines 75 to 85\n      in\n      346ae79\n\n\n\n\n\n\n def log_to_stdout \n\n\n\n wrapped_app # touch the app so the logger is set up \n\n\n\n \n\n\n\n console = ActiveSupport::Logger.new(STDOUT) \n\n\n\n console.formatter = Rails.logger.formatter \n\n\n\n console.level = Rails.logger.level \n\n\n\n \n\n\n\n unless ActiveSupport::Logger.logger_outputs_to?(Rails.logger, STDOUT) \n\n\n\n Rails.logger.extend(ActiveSupport::Logger.broadcast(console)) \n\n\n\n end \n\n\n\n end \n\n\n\n\n\nThe implementation of logger_outputs_to? uses private details of the logger instance to determine whether it's logging to STDOUT. In this specific case, adding STDERR as part of the check might also work. However, not all logger objects have the same private details causing this check to fail in those cases too.\n\n\n\nrails/activesupport/lib/active_support/logger.rb\n\n\n        Lines 16 to 20\n      in\n      346ae79\n\n\n\n\n\n\n def self.logger_outputs_to?(logger, *sources) \n\n\n\n logdev = logger.instance_variable_get(:@logdev) \n\n\n\n logger_source = logdev.dev if logdev.respond_to?(:dev) \n\n\n\n sources.any? { |source| source == logger_source } \n\n\n\n end \n\n\n\n\n\nI don't think we should be inspecting private object details and I believe that the implementation creates too many edge cases which are better handled by explicit configuration.\nMy advice would be:\n\nDefault to Rails.logger = Logger.new(STDERR) (& don't log to log files).\nDon't use instance_variable_get and consider removing logger_outputs_to?.\nRemove monkey patching (and private implementation introspection) of Rails.logger.\nEducate users on how to get previous behaviour if it's desired.\n\nIf we want to support output to multiple targets, this should be a feature of the log library not the interface for logging. I suggest some kind of tee logger should be appropriate, but I think it's better if we keep this simple in Rails and let logger gem solve this problem.", "number_of_comments": 30, "comment_authors": ["ioquatix", "ioquatix", "ioquatix", "ioquatix", "rails-bot", "ioquatix", "ioquatix", "tenderlove", "ioquatix", "ioquatix", "schneems", "ioquatix", "skipkayhil", "ioquatix", "ioquatix", "rafaelfranca", "ioquatix", "rafaelfranca", "ioquatix", "ioquatix", "schneems", "ioquatix", "schneems", "ioquatix", "schneems", "ioquatix", "schneems", "ioquatix", "schneems", "ioquatix"]},
{"title": "Missing association filter query in sql", "link": "https://github.com/rails/rails/issues/44828", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.440918207168579, "creation_date": "2022-04-02T08:54:18Z", "issue_submitter": "MeterSoft", "body": "Steps to reproduce\nclass Account < ApplicationRecord\n  has_many :orders\nend\n\nclass Order < ApplicationRecord\n  belongs_to :account\n\n  def self.search(name: name)\n    Order.where(name: name)\n  end\nend\n  \naccount.orders.search(name: 'hello')\nExpected behavior\nRails 5.2 it generate sql with WHERE \"orders\".\"account_id\" = $1\nActual behavior\nRails 6.0.3 missing sql filter by account\nSystem configuration\nRails version: 6.0.3\nRuby version: 2.7.0", "number_of_comments": 6, "comment_authors": ["MeterSoft", "skipkayhil", "MeterSoft", "skipkayhil", "MeterSoft", "skipkayhil"]},
{"title": "Cannot create model with attached activestorage file with strict_loading set to true", "link": "https://github.com/rails/rails/issues/44946", "labels": ["\n                activerecord\n", "\n                activestorage\n", "\n                With reproduction steps\n"], "depth": 7, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 3.878694772720337, "creation_date": "2022-04-23T20:46:46Z", "issue_submitter": "javinto", "body": "Steps to reproduce\nCreate a simple model with\nhas_one_attached :profile, strict_loading: true\nThen create the model with a such a profile (file).\nAn ActiveRecord::StrictLoadingViolationError is raised while the model is being created.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"rails\", \"~> 7.0.0\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record/railtie\"\nrequire \"active_storage/engine\"\nrequire \"tmpdir\"\n\nclass TestApp < Rails::Application\n  config.root = __dir__\n  config.hosts << \"example.org\"\n  config.eager_load = false\n  config.session_store :cookie_store, key: \"cookie_store_key\"\n  secrets.secret_key_base = \"secret_key_base\"\n\n  config.logger = Logger.new($stdout)\n  Rails.logger  = config.logger\n\n  config.active_storage.service = :local\n  config.active_storage.service_configurations = {\n    local: {\n      root: Dir.tmpdir,\n      service: \"Disk\"\n    }\n  }\nend\n\nENV[\"DATABASE_URL\"] = \"sqlite3::memory:\"\n\nRails.application.initialize!\n\nrequire ActiveStorage::Engine.root.join(\"db/migrate/20170806125915_create_active_storage_tables.rb\").to_s\n\nActiveRecord::Schema.define do\n  CreateActiveStorageTables.new.change\n\n  create_table :users, force: true\nend\n\nclass User < ActiveRecord::Base\n  has_one_attached :profile, strict_loading: true\nend\n\nrequire \"minitest/autorun\"\n\nclass BugTest < Minitest::Test\n  def test_upload_and_download\n    user = User.create!(\n      profile: {\n        content_type: \"text/plain\",\n        filename: \"dummy.txt\",\n        io: ::StringIO.new(\"dummy\"),\n      }\n    )\n\n    assert_equal \"dummy\", user.profile.download\n  end\nend\nExpected behavior\nThe strict_loading validation should not occur on creating the record, only on reading it.\nActual behavior\nAn ActiveRecord::StrictLoadingViolationError is raised.\nSystem configuration\nRails 7.0.2.3:\nRuby 3.1.2:", "number_of_comments": 5, "comment_authors": ["javinto", "neriojnavea", "adrianna-chang-shopify", "rails-bot", "javinto"]},
{"title": "TaggedLogging not broadcasting tags", "link": "https://github.com/rails/rails/issues/44668", "labels": ["\n                activesupport\n", "\n                attached PR\n", "\n                With reproduction steps\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8962295055389404, "creation_date": "2022-03-12T01:12:12Z", "issue_submitter": "mtomiyoshi", "body": "This is similar to #43291, but I am calling the method with a block.\nWhen not using a block it works fine, demonstrated by the test mentioned in the issue: \n\n\nrails/activesupport/test/tagged_logging_test.rb\n\n\n         Line 221\n      in\n      f95c0b7\n\n\n\n\n\n\n @logger.extend(ActiveSupport::Logger.broadcast(broadcast_logger)) \n\n\n\n\n\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire 'bundler/inline'\n\ngemfile(true) do\n  source 'https://rubygems.org'\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem 'rails', github: 'rails/rails', branch: 'main'\nend\n\nrequire 'active_support'\nrequire 'active_support/core_ext/object/blank'\nrequire 'minitest/autorun'\n\nclass BugTest < Minitest::Test\n  class MyLogger < ::ActiveSupport::Logger\n    def flush(*)\n      info '[FLUSHED]'\n    end\n  end\n\n  def test_keep_broadcast_with_block\n    @output = StringIO.new\n    @logger = ActiveSupport::TaggedLogging.new(MyLogger.new(@output))\n\n    broadcast_output = StringIO.new\n    broadcast_logger = ActiveSupport::TaggedLogging.new(Logger.new(broadcast_output))\n    @logger.extend(ActiveSupport::Logger.broadcast(broadcast_logger))\n\n    @logger.tagged('OMG') { |logger| logger.info 'Broadcasting...' }\n\n    assert_equal \"[OMG] Broadcasting...\\n\", @output.string\n    assert_equal \"[OMG] Broadcasting...\\n\", broadcast_output.string\n  end\nend\nExpected behavior\nBoth loggers should log \"[OMG] Broadcasting...\\n\"\nActual behavior\nOne of them logs \"[OMG] Broadcasting...\\n\", the other logs Broadcasting...\\n instead.\nResult of the test script:\nF\n\nFailure:\nBugTest#test_keep_broadcast_with_block [tagged_logger_bug.rb:50]:\n--- expected\n+++ actual\n@@ -1,2 +1,2 @@\n-\"[OMG] Broadcasting...\n+\"Broadcasting...\n \"\n\nSystem configuration\nRails version: main\nRuby version: 3.1.1", "number_of_comments": 2, "comment_authors": ["mtomiyoshi", "Edouard-chin"]},
{"title": "STI foreign key auto detection regression", "link": "https://github.com/rails/rails/issues/44594", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9162259101867676, "creation_date": "2022-03-02T09:03:58Z", "issue_submitter": "yskkin", "body": "Steps to reproduce\nbegin\n  require \"bundler/inline\"\nrescue LoadError => e\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\n  raise e\nend\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n  gem \"sqlite3\", \"~> 1.3.0\"\n  # Activate the gem you are reporting the issue against.\n  gem \"rails\", \"5.1.6\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# Ensure backward compatibility with Minitest 4\nMinitest::Test = MiniTest::Unit::TestCase unless defined?(Minitest::Test)\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n  end\nend\n\nclass Post < ActiveRecord::Base\nend\n\nclass ChildPost < Post\n  has_one :foo, class_name: 'Comment', inverse_of: :bar, foreign_key: :post_id\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :bar, class_name: 'ChildPost', inverse_of: :foo\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    post = ChildPost.create!\n\n    post.build_foo\n  end\nend\nExpected behavior\nexit without error in Rails 5.1.6, 5.2.0 and 6.1.0\nActual behavior\nexit without error in Rails 5.1.6\nexit with following error in Rails 5.2.0 and 6.1.0\nError:\nBugTest#test_association_stuff:\nActiveModel::MissingAttributeError: can't write unknown attribute `bar_id`\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activemodel-5.2.0/lib/active_model/attribute.rb:207:in `with_value_from_database'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activemodel-5.2.0/lib/active_model/attribute_set.rb:57:in `write_from_user'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activerecord-5.2.0/lib/active_record/attribute_methods/write.rb:51:in `_write_attribute'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activerecord-5.2.0/lib/active_record/attribute_methods/write.rb:45:in `write_attribute'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activerecord-5.2.0/lib/active_record/attribute_methods.rb:410:in `[]='\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activerecord-5.2.0/lib/active_record/associations/belongs_to_association.rb:92:in `replace_keys'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activerecord-5.2.0/lib/active_record/associations/belongs_to_association.rb:33:in `target='\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activerecord-5.2.0/lib/active_record/associations/association.rb:103:in `set_inverse_instance'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activerecord-5.2.0/lib/active_record/associations/association.rb:178:in `initialize_attributes'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activerecord-5.2.0/lib/active_record/associations/association.rb:271:in `block in build_record'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activerecord-5.2.0/lib/active_record/core.rb:316:in `initialize'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activerecord-5.2.0/lib/active_record/inheritance.rb:66:in `new'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activerecord-5.2.0/lib/active_record/inheritance.rb:66:in `new'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activerecord-5.2.0/lib/active_record/reflection.rb:154:in `build_association'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activerecord-5.2.0/lib/active_record/associations/association.rb:270:in `build_record'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activerecord-5.2.0/lib/active_record/associations/singular_association.rb:21:in `build'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/activerecord-5.2.0/lib/active_record/associations/builder/singular_association.rb:29:in `build_foo'\n    active_record_gem.rb:50:in `test_association_stuff'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest/test.rb:98:in `block (3 levels) in run'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest/test.rb:195:in `capture_exceptions'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest/test.rb:95:in `block (2 levels) in run'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest.rb:281:in `time_it'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest/test.rb:94:in `block in run'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest.rb:376:in `on_signal'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest/test.rb:221:in `with_info_handler'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest/test.rb:93:in `run'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest.rb:1042:in `run_one_method'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest.rb:350:in `run_one_method'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest.rb:337:in `block (2 levels) in run'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest.rb:336:in `each'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest.rb:336:in `block in run'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest.rb:376:in `on_signal'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest.rb:363:in `with_info_handler'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest.rb:335:in `run'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest.rb:169:in `block in __run'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest.rb:169:in `map'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest.rb:169:in `__run'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest.rb:146:in `run'\n    /Users/xxxx/.rbenv/versions/2.7.3/lib/ruby/gems/2.7.0/gems/minitest-5.15.0/lib/minitest.rb:73:in `block in autorun'\n\nSystem configuration\nRails version:\nRuby version: 2.7.3", "number_of_comments": 5, "comment_authors": ["yskkin", "fatkodima", "yskkin", "caseyprovost", "lazaronixon"]},
{"title": "When using both touch and counter_cache on a belongs_to association, updated_at on the associated object instance is not updated", "link": "https://github.com/rails/rails/issues/44479", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8742377758026123, "creation_date": "2022-02-18T16:17:36Z", "issue_submitter": "yan-hoose", "body": "Hi everyone!\nI ran into an issue with a counter cached belongs_to association.\nIn short, when I have an association with only touch: true, it works as expected:\nclass Comment < ActiveRecord::Base\n  belongs_to :post, touch: true\nend\n# updated_at is updated on the Post instance after doing this\npost.comments.create!\nBut when I add counter_cache: true to the same association, it stops working as expected:\nclass Comment < ActiveRecord::Base\n  belongs_to :post, touch: true, counter_cache: true\nend\n# updated_at is NOT updated on the Post instance after doing this (it has been updated in the DB however)\npost.comments.create!\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  #gem \"rails\", \"6.0.4.6\"\n  #gem \"rails\", \"6.1.4.6\"\n  #gem \"rails\", \"7.0.2.2\"\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.integer :comments_count, null: false, default: 0\n    t.timestamps\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\nend\n\nclass Comment < ActiveRecord::Base\n  # works as expected\n  #belongs_to :post, touch: true\n\n  # does not work as expected\n  belongs_to :post, touch: true, counter_cache: true\nend\n\nclass BugTest < Minitest::Test\n  def test_post_instance_updated\n    post = Post.create!\n    previous_updated_at = post.updated_at.to_f.to_s\n\n    post.comments.create!\n\n    # expecting post.updated_at to be different from the previous value\n    # after creating a new comment on this post\n    assert previous_updated_at != post.updated_at.to_f.to_s\n  end\nend\nExpected behavior\nUpdated updated_at should be reflected on the Post instance in addition to being updated in the database.\nActual behavior\nUpdated updated_at is not reflected on the Post instance. It is however correctly updated in the database.\nSystem configuration\nRails version:\n\n6.0.4.6\n6.1.4.6\n7.0.2.2\nmain\n\nRuby version: 2.7.5", "number_of_comments": 14, "comment_authors": ["yan-hoose", "mansakondo", "mansakondo", "nvasilevski", "mansakondo", "mansakondo", "nickborromeo", "mansakondo", "nickborromeo", "mansakondo", "nickborromeo", "mansakondo", "nickborromeo", "mansakondo"]},
{"title": "ActionCable: Repeated subscription attempts", "link": "https://github.com/rails/rails/issues/44652", "labels": ["\n                actioncable\n", "\n                attached PR\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8722493648529053, "creation_date": "2022-03-10T04:12:53Z", "issue_submitter": "sj26", "body": "Steps to reproduce\n\nCreate an actioncable subscription.\nAwait subscription confirmation.\nCreate another subscription with the same identifier.\nObserve websocket showing subscription attempts every second.\n\nI tried creating a small reproduction script, but involving views and action cable got too complicated. Instead, here's an app which replicates it:\nhttps://github.com/sj26/action_cable_test\nIt creates two subscriptions with the same identifier, with a timeout to be sure that the first subscription has already been confirmed:\n<div id=\"count\"></div>\n<%= javascript_tag do %>\n  window.App.consumer.subscriptions.create({channel: \"TestChannel\"}, {\n    received({ count }) {\n      document.getElementById(\"count\").innerText = count;\n    }\n  });\n<% end %>\n\n<div id=\"contents\"></div>\n<%= javascript_tag do %>\n  setTimeout(function() {\n    window.App.consumer.subscriptions.create({channel: \"TestChannel\"}, {\n      received({ contents }) {\n        document.getElementById(\"contents\").innerText = contents;\n      }\n    });\n  }, 1000)\n<% end %>\nThen a stream of subscription messages can be seen in the websocket traffic:\n\nbecause the guarantor considers the second subscription pending:\n\nbecause actioncable short circuits existing subscriptions, and so doesn't submit multiple confirmations:\nhttps://github.com/rails/rails/blob/v7.0.2/actioncable/lib/action_cable/connection/subscriptions.rb#L32\nUse case\nWe have a react frontend, and we want to subscribe to channels in each of the leaf components which require dynamic updates directly. Sometimes this means multiple components will be interested in the same updates, and subscribe to the same identifiers. Trying to deduplicate these subscriptions somehow requires a lot more state management which seems more fragile and uneccessary. Previous versions of actioncable before the guarantor seem to work great for this use case, and the actioncable implemenation seems to consider subscription duplication in all operations. It's the addition of the subscription guarantor in #41581 to fix #38668 which seems to have created this issue. I think it would continue to work great with some gentle adjustment.\nExpected behavior\nSubscribing to the same channel identifier multiple times should not constantly send subscription messages.\nActual behavior\nA continuous stream of subscription messages are sent from the browser and arrive and are squashed at the server without any confirmation message returning. This taxes both the browser client and the action cable server unnecessarily.\nSystem configuration\nRails version: 7.0.2\nRuby version: 3.1.0\nPotential solution\nThe simplest solution seems to be to follow the pattern established in the rest of Subscriptions and avoid re-subscribing subscriptions which already exist:\n#44653\nIt's also a little confusing. The \"subscription\" in the javascript environment does not necessarily have a 1:1 relationship with the \"subscription\" on the server. This is a good thing! But it'd be nice if they had different names.", "number_of_comments": 10, "comment_authors": ["sj26", "sj26", "salex", "sj26", "sj26", "rails-bot", "sj26", "kevinhq", "kevinhq", "lirimkrosa"]},
{"title": "Using update inside a transaction behaves differently when used in tests", "link": "https://github.com/rails/rails/issues/44713", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8502342700958252, "creation_date": "2022-03-17T09:59:09Z", "issue_submitter": "richardboehme", "body": "Steps to reproduce\n\nClone webit-de/rails-dirty-transaction-update\nBundle\nUpdate database.yml to your needs (only tested with postgresql)\nRun rails test test/models/test_object_test.rb\nRun rails runner test_transactions.rb\n\nNote: I tried using the ActiveRecord bug report template but I could not get the test case to behave like a 'normal' Rails test case (that uses transactional tests).\nExpected behavior\nThe test and the script should print the same values for the updated database field (test2). It should not matter whether we use update or assign the attribute and use save.\nActual behavior\nThe test will print test for the version that uses the update method and test2 for the version that uses an assign and a save.\nI'm not sure if this is an actual bug or expected behavior, but it took me a lot of time to figure out why my test case was not failing (but fails on prod/dev).\nI'm not into the internals of ActiveRecord but looking into the source of update I saw that there will be an additional transaction state remembered for the model (using with_transaction_returning_status which calls remember_transaction_record_state) when using update. Maybe this results in some invalid state if the update-transaction is shared with a business logic transaction above?\nSystem configuration\nRails version: 7.0.2.3\nRuby version: 2.7.0", "number_of_comments": 10, "comment_authors": ["richardboehme", "ghiculescu", "richardboehme", "ghiculescu", "richardboehme", "ghiculescu", "richardboehme", "ghiculescu", "richardboehme", "rails-bot"]},
{"title": "connection.sanitize_limit is no longer needed when building limit clause", "link": "https://github.com/rails/rails/issues/44489", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8862183094024658, "creation_date": "2022-02-19T22:05:30Z", "issue_submitter": "harrycis", "body": "connection.sanitize_limit is currently called when building limit clause in Arel.\nIt doesn't seem necessary any more for the following reasons:\n\nbuild_cast_value results in  ActiveModel::Attribute type, which binds the value, and thus prevents SQLi\nthere is little reason to pass in an argument of Arel::Nodes::SqlLiteral type to +limit+ API\n\nCurrent:\narel.take(build_cast_value(\"LIMIT\", connection.sanitize_limit(limit_value))) if limit_value\nExpected:\narel.take(build_cast_value(\"LIMIT\", limit_value.to_i)) if limit_value", "number_of_comments": 8, "comment_authors": ["harrycis", "rafaelfranca", "harrycis", "rafaelfranca", "kamipo", "harrycis", "harrycis", "harrycis"]},
{"title": "ActiveRecord::QueryMethods#in_order_of error when passing an out-of-range Integer", "link": "https://github.com/rails/rails/issues/44745", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.8542354106903076, "creation_date": "2022-03-22T16:03:53Z", "issue_submitter": "tejanium", "body": "Steps to reproduce\nWhen we pass an out-of-range integer to in_order_of, it will raise an ActiveModel::RangeError error.\n[1] pry(main)> Post.in_order_of(:id, [1, 9999999999999])\nActiveModel::RangeError: 9999999999999 is out of range for ActiveModel::Type::Integer with limit 4 bytes\n\n[2] pry(main)> Post.in_order_of(:id, [\"1\", \"9999999999999\"])\nActiveModel::RangeError: 9999999999999 is out of range for ActiveModel::Type::Integer with limit 4 bytes\nBelow is the runnable script\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\nend\n\nclass Post < ActiveRecord::Base\nend\n\nclass BugTest < Minitest::Test\n  # Fail\n  def test_out_of_range\n    post = Post.create!\n    out_of_range_id = Post.type_for_attribute(:id).send(:max_value)\n\n    assert_equal Post.in_order_of(:id, [post.id, out_of_range_id]).map(&:id), [post.id]\n  end\n\n  # Success\n  def test_where_with_out_of_range\n    post = Post.create!\n    out_of_range_id = Post.type_for_attribute(:id).send(:max_value)\n\n    assert_equal Post.where(id: [post.id, out_of_range_id]).map(&:id), [post.id]\n  end\n\n  def test_with_invalid_ids\n    post = Post.create!\n\n    assert_equal Post.where(id: [post.id, -1, :foo, \"bar\"]).map(&:id), [post.id]\n  end\nend\nExpected behavior\nThe Enumerable version will ignore it\n[3] pry(main)> [ Post.find(5), Post.find(3), Post.find(1) ].in_order_of(:id, [ 1, 5, 9999999999999 ]).map(&:id)\n=> [1, 5]\nso does where\n[4] pry(main)> Post.where(id: [1, 9999999999999]).map(&:id)\n=> [1]\nand in_order_of with non-existent value\n[5] pry(main)> Post.in_order_of(:id, [1, -1, :foo, \"bar\"]).map(&:id)\n=> [1]\ntherefore, in_order_of should ignore out-of-range value\nActual behavior\nRaise an ActiveModel::RangeError error\nSystem configuration\nRails version: 7.0.2.3\nRuby version: 2.7.5p203", "number_of_comments": 2, "comment_authors": ["tejanium", "rails-bot"]},
{"title": "field_error_proc does not trigger on belongs_to association without explicit validation on <association>_id", "link": "https://github.com/rails/rails/issues/44160", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9640212059020996, "creation_date": "2022-01-12T20:03:36Z", "issue_submitter": "guaguasi", "body": "Steps to reproduce\n\nadd belongs_to :association to model\nadd form element with :association_id property\nsubmit form without assignment\n\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", '~> 7.0.0'\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post, optional: false\nend\n\nclass BugTest < Minitest::Test\n  def test_error_on_field\n    comment = Comment.new\n\n    assert_equal false, comment.valid?\n    assert_equal true, comment.errors[:post_id].present?\n  end\nend\nExpected behavior\n#field_error_proc should trigger and wrap form element in .field_with_errors element.\nActual behavior\n#field_error_proc does not trigger and wrap form element in .field_with_errors element because #object_has_errors? returns false.\nSystem configuration\nRails version: Rails 7.0.1\nRuby version: Ruby 3.1", "number_of_comments": 4, "comment_authors": ["guaguasi", "hahmed", "guaguasi", "psantos10"]},
{"title": "rich_text_area field with model validation error doesn't get wrapped in div.field_with_errors", "link": "https://github.com/rails/rails/issues/44762", "labels": ["\n                actiontext\n", "\n                attached PR\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0460155010223389, "creation_date": "2022-03-24T12:40:30Z", "issue_submitter": "scottdavis", "body": "I'm happy to make a PR to address this if it's something the community deems is a bug. It just seemed inconsistent with the rest of the form helpers.\nSteps to reproduce\nRender an action text field that has model validation errors\nview <%= f.rich_text_area :my_text %>\nin model\nvalidates_presence_of :my_text\nExpected behavior\nWhen the field has errors it should be wrapped in a div with the class div.field_with_errors like the other form helpers\nActual behavior\nThe fields are not wrapped in div.field_with_errors\nSystem configuration\nRails version:\nRails 7.0.2.3", "number_of_comments": 2, "comment_authors": ["scottdavis", "rails-bot"]},
{"title": "Request tests and ApplicationController use different default hostnames", "link": "https://github.com/rails/rails/issues/44071", "labels": ["\n                actionpack\n", "\n                attached PR\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0289859771728516, "creation_date": "2022-01-04T19:38:14Z", "issue_submitter": "dmolesUC", "body": "Summary\nWhen making GET requests in request tests, Rails uses the hostname www.example.com (possibly set in ActionDispatch::Integration::Session::DEFAULT_HOST).\nHowever, ApplicationController.render uses the hostname example.org (possibly set in ActionController::Renderer::DEFAULTS).\nThis causes spurious test failures when comparing the output of ApplicationController.render to request bodies -- the sample test below is somewhat silly, but it's more useful when, e.g. checking that a complex render is using the correct partial.\nSteps to reproduce\n\n\nEither:\n\nClone the repository dmolesUC/rs-hostnames\n\nor:\n\nCreate a new Rails application\nUse rails g scaffold Item name:string to create an Item model, controller, views, tests, etc.\nAdd the test code below to test/controllers/items_controller_test.rb\n\n\n\nEnsure the database is set up and migrated, test assets are precompiled, etc.\n\n\nRun items_controller_test\n\n\nTest code:\n  test 'should show item as JSON' do\n    get item_url(@item), as: :json\n    assert_response :success\n\n    json_actual = JSON.parse(response.body)\n    json_expected = JSON.parse(\n      ApplicationController.render(\n        template: 'items/show',\n        formats: :json,\n        assigns: { :item => @item }\n      )\n    )\n\n    json_expected.each do |k, v_expected|\n      v_actual = json_actual[k]\n      assert_equal(v_expected, v_actual)\n    end\n  end\nExpected behavior\nTest passes.\nActual behavior\nTest fails with:\nMinitest::Assertion: --- expected\n+++ actual\n@@ -1 +1 @@\n-\"http://example.org/items/980190962.json\"\n+\"http://www.example.com/items/980190962.json\"\n\nSystem configuration\nRails version: 6.1.4.4\nRuby version: 3.0.2", "number_of_comments": 4, "comment_authors": ["dmolesUC", "dmolesUC", "ghiculescu", "dmolesUC"]},
{"title": "Associated new records are validated even if :autosave and :validate are false", "link": "https://github.com/rails/rails/issues/44084", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0190184116363525, "creation_date": "2022-01-05T18:01:31Z", "issue_submitter": "niklas-hasselmeyer", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\n  gem 'byebug'\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\nrequire 'byebug'\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n    t.string :text\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\n\n  validates :text, presence: true\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    post = Post.create!\n\n    comment = post.comments.build\n    \n    assert_equal post.valid?, true # The post should be valid, even if there is an invalid comment\n  end\nend\nExpected behavior\nI'd expect the post to be valid, even if there is an invalid comment attached.\nActual behavior\nThe post is invalid and post.errors.messages[:comments] is  [\"is invalid\"]. Therefore, post.save fails. (Related, even post.save(validate: false) fails, but I think this is #43400)\nIf the post and the comment are saved in the database and I set comment.text = '', the post is valid and I can save the post.\nThis issue also appears when I set validates_association :post in the comment class and then try to save a new comment without text - comment.errors.messages[:text] will be [\"can't be blank\", \"can't be blank\"].", "number_of_comments": 3, "comment_authors": ["niklas-hasselmeyer", "nick-symon", "nickborromeo"]},
{"title": "Less records returned from a query with eager loading and ordering on a column from has_many association", "link": "https://github.com/rails/rails/issues/44776", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.072983741760254, "creation_date": "2022-03-27T10:34:13Z", "issue_submitter": "bli", "body": "Steps to reproduce\nNote: This happens only on postgres (and likely mysql as well), not on sqllite.\n\nLet Post have a has_many association comments\nCreate 5 posts, each with 3 comments.\nRun a query to get 3 posts with eager loading on comments and ordering on created_at of comments.\nPost.includes(:comments).references(:comments).order(\"comments.created_at\").limit(3)\n\nThe test to show the issue:\nhttps://gist.github.com/bli/cb5136e46a59c19293710ac345281dd7\nExpected behavior\nReturn 3 posts\nActual behavior\nOnly 1 record is returned\nSystem configuration\nAt least in versions 7, 6, 5\nCause\nDatabases like postgres requires the ORDER BY columns in the select list for distinct queries. So when ordering by comments.created_at, that column is included in the distinct select list of the query to fetch the Post ids:\nSELECT DISTINCT comments.created_at AS alias_0, \"posts\".\"id\" FROM \"posts\" \nLEFT OUTER JOIN \"comments\" ON \"comments\".\"post_id\" = \"posts\".\"id\" \nORDER BY comments.created_at \nLIMIT $1  \n[[\"LIMIT\", 3]]\n\nThis would result in 3 rows with the same Post id when that post happens to have the 3 earliest comments.\nHence the main query would return only 1 post:\nSELECT \"posts\".\"id\" AS t0_r0, \"comments\".\"id\" AS t1_r0, \"comments\".\"post_id\" AS t1_r1, \n       \"comments\".\"created_at\" AS t1_r2, \"comments\".\"updated_at\" AS t1_r3 \nFROM \"posts\" \nLEFT OUTER JOIN \"comments\" ON \"comments\".\"post_id\" = \"posts\".\"id\" \nWHERE \"posts\".\"id\" IN ($1, $2, $3) \nORDER BY comments.created_at  \n[[\"id\", 1], [\"id\", 1], [\"id\", 1]]\n\nCode related to the issue:\nRails 7:\n\n\n\nrails/activerecord/lib/active_record/connection_adapters/abstract/schema_statements.rb\n\n\n         Line 1294\n      in\n      af0733a\n\n\n\n\n\n\n def distinct_relation_for_primary_key(relation) # :nodoc: \n\n\n\n\n\nRails 6:\n\n\n\nrails/activerecord/lib/active_record/relation/finder_methods.rb\n\n\n         Line 427\n      in\n      5341053\n\n\n\n\n\n\n def limited_ids_for(relation)", "number_of_comments": 2, "comment_authors": ["bli", "kaiquekandykoga"]},
{"title": "Configured email interceptors not accessible from the config hash", "link": "https://github.com/rails/rails/issues/44134", "labels": ["\n                actionmailer\n", "\n                attached PR\n", "\n                With reproduction steps\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0169920921325684, "creation_date": "2022-01-10T10:56:06Z", "issue_submitter": "matteo-rossi-wise", "body": "Steps to reproduce\n\nRegister the interceptor through the action_mailer.interceptors config\nbundle exec rails c\nTry to print the registered interceptor using Rails.application.config.action_mailer.interceptors\n\n# config/environments/staging.rb\nRails.application.configure do\n  config.action_mailer.interceptors = %w[SandboxEmailInterceptor]\nend\n\n# From the console\nirb(main):001:0> Rails.env\n=> \"staging\"\nirb(main):002:0> Rails.application.config.action_mailer.interceptors\n=> nil\nExpected behavior\nI'd expect the interceptors config option to be populated with the given %w[SandboxEmailInterceptor] array\nActual behavior\nIt outputs the nil value\nSystem configuration\nRails version: 6.1.4.4\nRuby version: 3.0.2", "number_of_comments": 7, "comment_authors": ["matteo-rossi-wise", "Yuji-Kuroko", "matteo-rossi-wise", "Yuji-Kuroko", "matteo-rossi-wise", "andrehjr", "matteo-rossi-wise"]},
{"title": "Rails reload! (both in console and using the reloader.reload!) hangs with multi-threaded applications", "link": "https://github.com/rails/rails/issues/44183", "labels": ["\n                activesupport\n", "\n                With reproduction steps\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0039753913879395, "creation_date": "2022-01-16T20:19:00Z", "issue_submitter": "mensfeld", "body": "Steps to reproduce\nrails new testme\ncd testme\nbundle exec rails generate scaffold User\nbundle exec rake db:create\nbundle exec rake db:migrate\nbundle exec rails console\n# in the console:\nrequire 'benchmark'\nThread.new { User.create!; sleep(100) }\n# wait for 1 second and run reload - it will hang for around 10 seconds\nputs Benchmark.measure { reload! }\n# 0.019528   0.000312   0.019840 ( 10.028938)\nExpected behavior\nSince the thread is sleeping after user creation and does nothing, I would expect not to hang for such a long time.\nActual behavior\nIt hangs for 10 seconds. Same happens when reloading from within a process that includes Rails. It hangs for 10 seconds despite the fact that the thread is sleeping more. Even if thread is sleeping shorted period of time (lets say 5s), the reload takes 10.\nThis is in particular problematic for processes running with Rails in a dev mode, where threads are long living (worker polls for example) and blocked on a Queue#pop.\nI confirmed this problem affects sqlite as well as pg.\nSystem configuration\nRails & Ruby version:\nAbout your application's environment\nRails version             7.0.1\nRuby version              ruby 3.0.3p157 (2021-11-24 revision 3fb7d2cadc) [x86_64-linux]\nRubyGems version          3.2.32\nRack version              2.2.3\nMiddleware                ActionDispatch::HostAuthorization, Rack::Sendfile, ActionDispatch::Static, ActionDispatch::Executor, ActionDispatch::ServerTiming, ActiveSupport::Cache::Strategy::LocalCache::Middleware, Rack::Runtime, Rack::MethodOverride, ActionDispatch::RequestId, ActionDispatch::RemoteIp, Sprockets::Rails::QuietAssets, Rails::Rack::Logger, ActionDispatch::ShowExceptions, WebConsole::Middleware, ActionDispatch::DebugExceptions, ActionDispatch::ActionableExceptions, ActionDispatch::Reloader, ActionDispatch::Callbacks, ActiveRecord::Migration::CheckPending, ActionDispatch::Cookies, ActionDispatch::Session::CookieStore, ActionDispatch::Flash, ActionDispatch::ContentSecurityPolicy::Middleware, ActionDispatch::PermissionsPolicy::Middleware, Rack::Head, Rack::ConditionalGet, Rack::ETag, Rack::TempfileReaper\nApplication root          /home/mencio/Software/testme\nEnvironment               development\nDatabase adapter          sqlite3\nDatabase schema version   20220116201051", "number_of_comments": 16, "comment_authors": ["mensfeld", "rails-bot", "mensfeld", "rails-bot", "mensfeld", "fxn", "jonathanhefner", "fxn", "mensfeld", "mensfeld", "mensfeld", "rails-bot", "kaspergrubbe", "mensfeld", "rails-bot", "kaspergrubbe"]},
{"title": "An incorrect query is generated for has_many associations through has_many associations with nonstandard table names and foreign keys", "link": "https://github.com/rails/rails/issues/43653", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                With reproduction steps\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3395891189575195, "creation_date": "2021-11-16T06:31:49Z", "issue_submitter": "jamesbvaughan", "body": "I'd be happy to learn that I'm just doing something incorrectly here. If I'm not, then I'd enjoy trying to work on a fix and would appreciate some pointers on where to start.\nI ran into this when trying to write ActiveRecord models for the MusicBrainz database, which uses table names and foreign keys that are nonstandard for ActiveRecord.\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\n\nActiveRecord::Schema.define do\n  create_table :songs, force: true do |t|\n    t.integer :album\n  end\n\n  create_table :album, force: true do |t|\n    t.integer :artist_id\n  end\n\n  create_table :artists, force: true do |t|\n  end\nend\n\n\nclass Song < ActiveRecord::Base\nend\n\nclass Album < ActiveRecord::Base\n  has_many :songs, foreign_key: :album\n  self.table_name = \"album\"\nend\n\nclass Artist < ActiveRecord::Base\n  has_many :albums\n  has_many :songs, through: :albums\nend\n\n\nclass BugTest < Minitest::Test\n  def test_has_many_association_through_a_has_many_association_with_a_nonstandard_table_name_and_nonstandard_foreign_key\n    artist = Artist.create!\n    artist.albums << Album.create!\n    artist.albums.first.songs << Song.create!\n\n    # passes\n    assert_equal 1, artist.albums.count\n    assert_equal 1, artist.albums.first.songs.count\n\n    # fails\n    assert_equal 1, artist.songs.count\n  end\nend\nThis behaves as expected and does not fail if either a standard table name is used or a standard foreign key is used for albums, or both.\nExpected behavior\nI would expect a query like the following to be run:\nSELECT COUNT(*) FROM \"songs\" INNER JOIN \"album\" ON \"songs\".\"album\" = \"album\".\"id\" WHERE \"album\".\"artist_id\" = ?  [[\"artist_id\", 1]]\n\nActual behavior\nInstead, this is being run:\nSELECT COUNT(*) FROM \"songs\" INNER JOIN \"album\" ON \"songs\".\"album\" = \"album\".\"id\" WHERE \"songs\".\"album\" = ?  [[\"album\", nil]]\n\nSystem configuration\nRails version: 7.0.0.alpha2 (also tested with 6.1.4.1)\nRuby version: ruby 2.7.4p191 (2021-07-07 revision a21a3b7d23) [arm64-darwin20]", "number_of_comments": 2, "comment_authors": ["jamesbvaughan", "mattalat"]},
{"title": "Rails renders unexpected format with request MIME-Type */*", "link": "https://github.com/rails/rails/issues/43654", "labels": ["\n                actionpack\n", "\n                With reproduction steps\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3366279602050781, "creation_date": "2021-11-16T09:06:08Z", "issue_submitter": "sudoremo", "body": "Steps to reproduce\n\nCheck out this repository\nRun ruby rails.rb\nRun wget http://localhost:3000\n\nExpected behavior\nThe HTML template should be rendered and the response Mime-Type should be text/html:\nLength: unspecified [text/html]\n\nActual behavior\nThe PDF template is rendered and the Mime-Type is application/pdf:\nLength: unspecified [application/pdf]\n\nSystem configuration\nRails version: 6.0.0\nRuby version: 3.0.2p107\nSummary\nTools like wget typically send the Header Accept: */*, accepting all response types (although it can be configured to send a specific one of course). However, in case of */*, Rails just takes the first best template, regardless of the format / MIME type. In this example, the file myview.pdf.erb takes precedence over myview.html.erb, simply because it comes first.\nA possible solution would be adding a new config option, such as config.default_mime_type or config.default_request_format. This would circumvent arbitrarily choosing templates.", "number_of_comments": 3, "comment_authors": ["sudoremo", "lfalcao", "sudoremo"]},
{"title": "Preloading has_one through fails to load the associated record", "link": "https://github.com/rails/rails/issues/43657", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3376317024230957, "creation_date": "2021-11-16T16:09:42Z", "issue_submitter": "francois", "body": "Found an error when preloading a has_one through association. A quick search revealed that ActiveRecord was patched a long time ago in #14046, where the generated SQL was invalid.\nThe error seems to originate from this preload SQL:\nD, [2021-11-16T10:47:30.184608 #93831] DEBUG -- :   BranchRoute Load (0.1ms)  SELECT \"routes\".* FROM \"routes\" WHERE \"routes\".\"type\" = ? AND \"routes\".\"id\" = ?  [[\"type\", \"CustomerRoute\"], [\"id\", 2]]\n\nID 2 is the branch route, while the SQL query searches for customer routes.\nOur current fix is to accept an N+1, by reloading offers, but this bug obviously has a performance impact.\nSteps to reproduce\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n  gem \"rails\", github: \"rails/rails\" # \"= 6.1.4.1\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"logger\"\n\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :routes, force: true do |t|\n    t.integer :customer_route_id\n    t.string :type\n  end\n\n  create_table :products, force: true do |t|\n    t.integer :branch_route_id\n    t.string :type\n  end\nend\n\nclass Route < ActiveRecord::Base; end\n\nclass BranchRoute < Route\n  belongs_to :customer_route\nend\n\nclass CustomerRoute < Route; end\n\nclass Product < ActiveRecord::Base; end\n\nclass Offer < Product\n  belongs_to :branch_route\n  has_one :customer_route, through: :branch_route\nend\n\ncr = CustomerRoute.create!\nbr = BranchRoute.create!(customer_route: cr)\noffer = Offer.create!(branch_route: br)\n\nif Offer.includes(:customer_route).find(offer.id).customer_route.nil?\n  warn \"FAILED\"\nelse\n  puts \"OK!\"\nend\nExpected behavior\nhas_one through should preload records, where they exist.\nActual behavior\nD, [2021-11-16T10:47:30.133376 #93831] DEBUG -- :    (0.0ms)  DROP TABLE IF EXISTS \"routes\"\nD, [2021-11-16T10:47:30.133685 #93831] DEBUG -- :    (0.2ms)  CREATE TABLE \"routes\" (\"id\" integer PRIMARY KEY AUTOINCREMENT NOT NULL, \"customer_route_id\" integer, \"type\" varchar)\n   -> 0.0052s\n-- create_table(:offers, {:force=>true})\nD, [2021-11-16T10:47:30.133862 #93831] DEBUG -- :    (0.0ms)  DROP TABLE IF EXISTS \"offers\"\nD, [2021-11-16T10:47:30.134048 #93831] DEBUG -- :    (0.1ms)  CREATE TABLE \"offers\" (\"id\" integer PRIMARY KEY AUTOINCREMENT NOT NULL, \"branch_route_id\" integer, \"type\" varchar)\n   -> 0.0003s\nD, [2021-11-16T10:47:30.156291 #93831] DEBUG -- :    (0.1ms)  CREATE TABLE \"ar_internal_metadata\" (\"key\" varchar NOT NULL PRIMARY KEY, \"value\" varchar, \"created_at\" datetime(6) NOT NULL, \"updated_at\" datetime(6) NOT NULL)\nD, [2021-11-16T10:47:30.163374 #93831] DEBUG -- :   ActiveRecord::InternalMetadata Load (0.9ms)  SELECT \"ar_internal_metadata\".* FROM \"ar_internal_metadata\" WHERE \"ar_internal_metadata\".\"key\" = ? LIMIT ?  [[\"key\", \"environment\"], [\"LIMIT\", 1]]\nD, [2021-11-16T10:47:30.166758 #93831] DEBUG -- :   ActiveRecord::InternalMetadata Create (0.1ms)  INSERT INTO \"ar_internal_metadata\" (\"key\", \"value\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"key\", \"environment\"], [\"value\", \"development\"], [\"created_at\", \"2021-11-16 15:47:30.166360\"], [\"updated_at\", \"2021-11-16 15:47:30.166360\"]]\nD, [2021-11-16T10:47:30.172323 #93831] DEBUG -- :   CustomerRoute Create (0.0ms)  INSERT INTO \"routes\" (\"type\") VALUES (?)  [[\"type\", \"CustomerRoute\"]]\nD, [2021-11-16T10:47:30.175582 #93831] DEBUG -- :   BranchRoute Create (0.0ms)  INSERT INTO \"routes\" (\"customer_route_id\", \"type\") VALUES (?, ?)  [[\"customer_route_id\", 1], [\"type\", \"BranchRoute\"]]\nD, [2021-11-16T10:47:30.177439 #93831] DEBUG -- :   Offer Create (0.0ms)  INSERT INTO \"offers\" (\"branch_route_id\") VALUES (?)  [[\"branch_route_id\", 2]]\nD, [2021-11-16T10:47:30.177964 #93831] DEBUG -- :   Offer Load (0.0ms)  SELECT \"offers\".* FROM \"offers\" ORDER BY \"offers\".\"id\" ASC LIMIT ?  [[\"LIMIT\", 1]]\nD, [2021-11-16T10:47:30.184608 #93831] DEBUG -- :   BranchRoute Load (0.1ms)  SELECT \"routes\".* FROM \"routes\" WHERE \"routes\".\"type\" = ? AND \"routes\".\"id\" = ?  [[\"type\", \"CustomerRoute\"], [\"id\", 2]]\nFAILED\n\nNOTE: Removed begin/commit statements to improve readability.\nSystem configuration\nRails version: 6.1.4.1, 7.0 alpha 2 dea5603\nRuby version: ruby 2.7.3p183 (2021-04-05 revision 6847ee089d) [x86_64-darwin20]\nWhat else can I provide to help diagnose the issue? Thanks all for your work!", "number_of_comments": 3, "comment_authors": ["francois", "vy0b0x", "mansakondo"]},
{"title": "ActiveRecord not validating relationship on update if :inverse_of is specified and relationship is accessed before update", "link": "https://github.com/rails/rails/issues/43676", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3355870246887207, "creation_date": "2021-11-20T00:55:57Z", "issue_submitter": "morphine00", "body": "Steps to reproduce\n\nCreate a new empty Rails application with all the default settings and the following sample structure with an Item and its associated Category, not optional, enforcing validation.\n\nRunning this on the bug reporting template script with in-memory SQLite does not reveal the bug, for whichever reason.\nmodels/category.rb\nclass Category < ApplicationRecord\n        has_many :items, inverse_of: :category\nend\n\nmodels/item.rb\nclass Item < ApplicationRecord\n  belongs_to :category, validate: true, optional: false, inverse_of: :items\nend\n\n\nOpen the Rails console with bin/rails c\nCreate a new Category and a new Item attached to that Category. Make ActiveRecord read that item back (test_item = Item.find( item.id ), and make it read the association (test_item.category). Then update test_item and set its category_id to an invalid value.\n\ncategory = Category.create!\nitem = Item.create!( category: category )\n\ntest_item = Item.find( item.id )\n\ntest_item.category\n\ntest_item.update( category: 99999)\n\nExpected behavior\nThe record's validation would fail and the call to update would return false, or throw an exception.\nActual behavior\nThe validation will let the bad association through to the database layer, where it will update the item and set category_id to the invalid value, breaking the association. If there's a foreign key enforced at the database level, the call to update will bomb with an exception.\nImportant: if you don't make ActiveRecord the association back (test_item.category) or don't ask it to fetch test_item from the database in the first place, the bug won't be triggered.\n2.7.2 :001 > category = Category.create!\n   (0.4ms)  SELECT sqlite_version(*)\n  TRANSACTION (0.0ms)  begin transaction\n  Category Create (1.0ms)  INSERT INTO \"categories\" (\"created_at\", \"updated_at\") VALUES (?, ?)  [[\"created_at\", \"2021-11-20 00:29:14.201493\"], [\"updated_at\", \"2021-11-20 00:29:14.201493\"]]\n  TRANSACTION (3.8ms)  commit transaction\n => #<Category id: 4, name: nil, created_at: \"2021-11-20 00:29:14.201493000 +0000\", updated_at: \"2021-11-20 00:29:14.201493000 +0000\">\n\n2.7.2 :002 > item = Item.create!( category: category )\n  TRANSACTION (0.0ms)  begin transaction\n  Item Create (0.7ms)  INSERT INTO \"items\" (\"created_at\", \"updated_at\", \"category_id\") VALUES (?, ?, ?)  [[\"created_at\", \"2021-11-20 00:29:18.292957\"], [\"updated_at\", \"2021-11-20 00:29:18.292957\"], [\"category_id\", 4]]\n  TRANSACTION (2.9ms)  commit transaction\n => #<Item id: 4, name: nil, created_at: \"2021-11-20 00:29:18.292957000 +0000\", updated_at: \"2021-11-20 00:29:18.292957000 +0000\", category_id: 4>\n\n2.7.2 :003 > test = Item.find( item.id )\n  Item Load (0.1ms)  SELECT \"items\".* FROM \"items\" WHERE \"items\".\"id\" = ? LIMIT ?  [[\"id\", 4], [\"LIMIT\", 1]]\n => #<Item id: 4, name: nil, created_at: \"2021-11-20 00:29:18.292957000 +0000\", updated_at: \"2021-11-20 00:29:18.292957000 +0000\", category_id: 4>\n\n2.7.2 :004 > test.category\n  Category Load (0.1ms)  SELECT \"categories\".* FROM \"categories\" WHERE \"categories\".\"id\" = ? LIMIT ?  [[\"id\", 4], [\"LIMIT\", 1]]\n => #<Category id: 4, name: nil, created_at: \"2021-11-20 00:29:14.201493000 +0000\", updated_at: \"2021-11-20 00:29:14.201493000 +0000\">\n\n2.7.2 :005 > test.update( category_id: 99999 )\n  TRANSACTION (0.1ms)  begin transaction\n  Item Update (0.9ms)  UPDATE \"items\" SET \"updated_at\" = ?, \"category_id\" = ? WHERE \"items\".\"id\" = ?  [[\"updated_at\", \"2021-11-20 00:29:41.342328\"], [\"category_id\", 99999], [\"id\", 4]]\n  TRANSACTION (3.1ms)  commit transaction\n => true\n\nSystem configuration\nRails version: Rails 6.1.4.1\nRuby version: ruby 2.7.2p137", "number_of_comments": 3, "comment_authors": ["morphine00", "lfalcao", "morphine00"]},
{"title": "Rails 7 Schema Load ignores primary abstract class connection", "link": "https://github.com/rails/rails/issues/43978", "labels": ["\n                activerecord\n", "\n                pinned\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3035826683044434, "creation_date": "2021-12-23T00:51:00Z", "issue_submitter": "codeodor", "body": "Steps to reproduce\nSee https://github.com/codeodor/rails-7-schema-load-test/blob/main/README.md for a test application I made that exhibits the behavior.\nI wasn't sure how to do the multi-db setup in the provided scripts, so I hope that repository I made helps.\nExpected behavior\nI expect that when running within Model.connected_to(shard: shard_2) that loading the Schema file would operate on the database specified in the shard_2 config.\nActual behavior\nIt operates on the default shard database instead.\nSystem configuration\nRails version: 7.0.0\nRuby version: ruby 2.7.1p83", "number_of_comments": 6, "comment_authors": ["codeodor", "codeodor", "codeodor", "eileencodes", "codeodor", "rails-bot"]},
{"title": "Extra stuff after charset in Content-Type disappears", "link": "https://github.com/rails/rails/issues/43728", "labels": ["\n                actionpack\n", "\n                attached PR\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3366193771362305, "creation_date": "2021-11-26T00:52:59Z", "issue_submitter": "r7kamura", "body": "In my Rails 6 app, I tried to return CSV data with header as a response like this:\nclass MyController < ApplicationController\n  def show\n    send_data(\n      csv_with_header,\n      type: \"text/csv; charset=utf-16; header=present\"\n    )\n  end\nend\nbut header=present has disappeared from its Content-Type.\nThis is because #content_type= seems to remove the extra stuff after charset=....\ne.g.:\nresponse = ActionDispatch::Response.new\nresponse.content_type = \"text/csv; charset=utf-16; header=present\"\nresponse.headers[\"Content-Type\"] #=> \"text/csv; charset=utf-16\"\nAs a workaround, I need to change the above code like this:\n@@ -2,7 +2,7 @@\n   def show\n     send_data(\n       csv_with_header,\n-      type: \"text/csv; charset=utf-16; header=present\"\n+      type: \"text/csv; header=present; charset=utf-16\"\n     )\n   end\n end\nAt least in Rails (6.0?), we decided to treat extra stuff as part of mime_type at #37017. Isn't it strange that what comes before charset is preseved, but what comes after the charset is removed?\nresponse = ActionDispatch::Response.new\nresponse.content_type = \"text/csv; a; b; charset=utf-16; c; d\"\nresponse.headers[\"Content-Type\"] #=> \"text/csv; a; b; charset=utf-16\"\nOther information about text/csv:\n\nhttps://datatracker.ietf.org/doc/html/rfc4180#section-3\n\nabout MIME Type Registration of text/csv\n\n\n\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"rails\", \"~> 6.1.0\"\nend\n\nrequire \"rack/test\"\nrequire \"action_controller/railtie\"\n\nclass TestApp < Rails::Application\n  config.root = __dir__\n  config.hosts << \"example.org\"\n  config.session_store :cookie_store, key: \"cookie_store_key\"\n  secrets.secret_key_base = \"secret_key_base\"\n\n  config.logger = Logger.new($stdout)\n  Rails.logger  = config.logger\n\n  routes.draw do\n    get \"/\" => \"test#index\"\n  end\nend\n\nclass TestController < ActionController::Base\n  include Rails.application.routes.url_helpers\n\n  def index\n    send_data(\n      \"dummy\",\n      type: \"text/csv; charset=utf-16; header=present\"\n    )\n  end\nend\n\nrequire \"minitest/autorun\"\n\nclass BugTest < Minitest::Test\n  include Rack::Test::Methods\n\n  def test_content_type_includes_extra_stuff\n    get \"/\"\n    assert_includes(last_response.headers[\"Content-Type\"], 'header=present')\n  end\n\n  private\n    def app\n      Rails.application\n    end\nend\nExpected behavior\nI expect the above test passes.\nActual behavior\nBut it fails.\n# Running:\n\nI, [2021-11-26T09:22:15.126890 #13131]  INFO -- : Started GET \"/\" for 127.0.0.1 at 2021-11-26 09:22:15 +0900\nF\n\nFailure:\nBugTest#test_content_type [test.rb:49]:\nExpected \"text/csv; charset=utf-16\" to include \"header=present\".\n\n\nrails test test.rb:47\n\n\n\nFinished in 0.069187s, 14.4537 runs/s, 28.9073 assertions/s.\n1 runs, 2 assertions, 1 failures, 0 errors, 0 skips\n\nSystem configuration\nRails version:\n6.1.4.1\nRuby version:\n$ ruby -v\nruby 3.0.1p64 (2021-04-05 revision 0fb782ee38) [x86_64-linux]", "number_of_comments": 3, "comment_authors": ["r7kamura", "r7kamura", "skipkayhil"]},
{"title": "ActiveRecord::Sanitization::ClassMethods#sanitize_sql surrounds Numerics with quotes", "link": "https://github.com/rails/rails/issues/44312", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3036079406738281, "creation_date": "2022-02-02T14:09:51Z", "issue_submitter": "rbgrouleff", "body": "Steps to reproduce\nIn a rails app that uses the mysql2 connection adapter run the following snippet.\nActiveRecord::Base.sanitize_sql([\"LIMIT :offset, :per_page\", { offset: 12, per_page: 32 }])\nExpected behavior\nIt should generate the following:\n\"LIMIT 12, 32\"\nWhich is a valid MySQL LIMIT clause.\nActual behavior\nIt generates the following:\n\"LIMIT '12', '32'\"\nWhich is not a valid MySQL LIMIT clause.\nSystem configuration\nRails version: 7.0.1\nRuby version: MRI 3.0.3", "number_of_comments": 28, "comment_authors": ["rbgrouleff", "fatkodima", "casperisfine", "rbgrouleff", "byroot", "matthewd", "rbgrouleff", "casperisfine", "jdelStrother", "byroot", "byroot", "casperisfine", "rails-bot", "jasonbosco", "byroot", "jasonbosco", "byroot", "byroot", "jasonbosco", "byroot", "jasonbosco", "viraptor", "casperisfine", "viraptor", "claasz", "byroot", "aliaksandrb", "bfad"]},
{"title": "Postgres adapter does not cast ActiveSupport::Duration to interval in array condition", "link": "https://github.com/rails/rails/issues/44341", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                PostgreSQL\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.322098970413208, "creation_date": "2022-02-05T23:06:22Z", "issue_submitter": "aramgre", "body": "When passing an ActiveSupport::Duration to an Active Record where query on Postgres, it will be converted to an ISO 8601 string in a hash condition on an interval column, but not in an array condition.\nFor interval columns, it would be convenient to be able to pass ActiveSupport::Duration in either hash or array conditions. However, some applications probably depend on the existing behavior to pass ActiveSupport::Duration as a numeric type so any change might have to be opt-in.\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"pg\"\n  gem \"byebug\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# docker run --rm -e POSTGRES_PASSWORD=postgres -p 9999:5432 postgres\nActiveRecord::Base.establish_connection(\"postgres://postgres:postgres@localhost:9999/postgres\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :movies, force: true do |t|\n    t.interval :runtime\n  end\nend\n\nclass Movie < ActiveRecord::Base\nend\n\nclass BugTest < Minitest::Test\n  def test_duration\n    Movie.create!(runtime: 2.hours)\n    Movie.create!(runtime: 90.minutes)\n    Movie.create!(runtime: 3.hours + 30.minutes)\n\n    # SELECT COUNT(*) FROM \"movies\" WHERE \"movies\".\"runtime\" < $1  [[\"runtime\", \"PT3H\"]]\n    assert_equal 2, Movie.where(runtime: ...3.hours).count\n\n    # SELECT COUNT(*) FROM \"movies\" WHERE (runtime < 10800)\n    # ActiveRecord::StatementInvalid: PG::UndefinedFunction: ERROR:  operator does not exist: interval < integer\n    assert_equal 2, Movie.where('runtime < ?', 3.hours).count\n  end\nend\nExpected behavior\nWhen passing a duration in an array condition, it should be converted to a valid interval input (e.g., ISO 8601)\nhttps://www.postgresql.org/docs/current/datatype-datetime.html#DATATYPE-INTERVAL-INPUT\nActual behavior\nThe duration get converted to an integer seconds which Postgres can't cast to an interval.\nSystem configuration\nRails version:\nUsing rails 7.1.0.alpha from https://github.com/rails/rails.git (at main@6a55aff)\nRuby version:\nruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c) [x86_64-darwin19]", "number_of_comments": 3, "comment_authors": ["aramgre", "ghiculescu", "aramgre"]},
{"title": "[activerecord] numericality: {in: ...} should accept an Array or Set of explicit values", "link": "https://github.com/rails/rails/issues/44465", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2980871200561523, "creation_date": "2022-02-17T18:38:38Z", "issue_submitter": "postmodern", "body": "In order to be consistent with inclusion: {in: ...}, it should be possible to pass an Array or Set of literal Integer values to numericality: {in: ...}, instead of only a Range.\nSteps to reproduce\nGemfile\nsource 'https://rubygems.org/'\n\ngem 'activerecord', '~> 7.0'\ngem 'sqlite3'\ntest.rb\nrequire 'bundler/setup'\nrequire 'active_record'\n\nclass CreateTestModelTable < ActiveRecord::Migration[7.0]\n\n  def change\n    create_table :test_models do |t|\n      t.integer :ip_version\n    end\n  end\n\nend\n\nActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')\n\nCreateTestModelTable.migrate(:up)\n\nclass TestModel < ActiveRecord::Base\n\n  attribute :ip_version, :integer\n  validates :ip_version, numericality: {in: [4,6]}\n\nend\nTestModel.connection\n\nrecord = TestModel.new(ip_version: 4)\np record.valid?\np record.errors\nExpected behavior\nnumericality: {in: ...} accepts an Array of literal Integer values and validates against them.\nActual behavior\n==  CreateTestModelTable: migrating ===========================================\n-- create_table(:test_models)\n   -> 0.0007s\n==  CreateTestModelTable: migrated (0.0008s) ==================================\n\n/home/postmodern/test/ruby/active_record/vendor/bundle/ruby/3.0.0/gems/activemodel-7.0.2.2/lib/active_model/validations/numericality.rb:29:in `block in check_validity!': :in must be a range (ArgumentError)\n\tfrom /home/postmodern/test/ruby/active_record/vendor/bundle/ruby/3.0.0/gems/activemodel-7.0.2.2/lib/active_model/validations/numericality.rb:27:in `each'\n\tfrom /home/postmodern/test/ruby/active_record/vendor/bundle/ruby/3.0.0/gems/activemodel-7.0.2.2/lib/active_model/validations/numericality.rb:27:in `check_validity!'\n\tfrom /home/postmodern/test/ruby/active_record/vendor/bundle/ruby/3.0.0/gems/activemodel-7.0.2.2/lib/active_model/validator.rb:142:in `initialize'\n\tfrom /home/postmodern/test/ruby/active_record/vendor/bundle/ruby/3.0.0/gems/activemodel-7.0.2.2/lib/active_model/validations/with.rb:86:in `new'\n\tfrom /home/postmodern/test/ruby/active_record/vendor/bundle/ruby/3.0.0/gems/activemodel-7.0.2.2/lib/active_model/validations/with.rb:86:in `block in validates_with'\n\tfrom /home/postmodern/test/ruby/active_record/vendor/bundle/ruby/3.0.0/gems/activemodel-7.0.2.2/lib/active_model/validations/with.rb:85:in `each'\n\tfrom /home/postmodern/test/ruby/active_record/vendor/bundle/ruby/3.0.0/gems/activemodel-7.0.2.2/lib/active_model/validations/with.rb:85:in `validates_with'\n\tfrom /home/postmodern/test/ruby/active_record/vendor/bundle/ruby/3.0.0/gems/activemodel-7.0.2.2/lib/active_model/validations/validates.rb:126:in `block in validates'\n\tfrom /home/postmodern/test/ruby/active_record/vendor/bundle/ruby/3.0.0/gems/activemodel-7.0.2.2/lib/active_model/validations/validates.rb:115:in `each'\n\tfrom /home/postmodern/test/ruby/active_record/vendor/bundle/ruby/3.0.0/gems/activemodel-7.0.2.2/lib/active_model/validations/validates.rb:115:in `validates'\n\tfrom test.rb:21:in `<class:TestModel>'\n\tfrom test.rb:18:in `<main>'\n\nSystem configuration\n\nactiverecord 7.0.2.2\nruby 3.0.2p107 (2021-07-07 revision 0db68f0233) [x86_64-linux]", "number_of_comments": 5, "comment_authors": ["postmodern", "fatkodima", "skipkayhil", "rafaelfranca", "rails-bot"]},
{"title": "Arel::UpdateManager with join statement on a sqlite and postgres database are invalid", "link": "https://github.com/rails/rails/issues/44401", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3270771503448486, "creation_date": "2022-02-11T14:00:28Z", "issue_submitter": "gagalago", "body": "Steps to reproduce\ncomplex update with joins produce invalid sql syntax with sqlite and postgres.\nthe following test it \"generates an update statement with joins\" is checking an sql query that is invalid in sqlite and postgres.\nthis is how postgres update syntax can be and how sqlite update syntax\n is defined. To join table during an update we should use the FROM.\nit seems that it's a syntax only valid in mysql.\n# frozen_string_literal: true\n\nrequire 'bundler/inline'\n\ngemfile(true) do\n  source 'https://rubygems.org'\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem 'rails', github: 'rails/rails', branch: 'main'\n  gem 'sqlite3'\nend\n\nrequire 'active_record'\nrequire 'minitest/autorun'\nrequire 'logger'\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :users, force: true do |t|\n    t.integer :posts_count\n  end\n\n  create_table :posts, force: true do |t|\n    t.integer :user_id\n  end\nend\n\nclass BugTest < ActiveSupport::TestCase\n  def test_update_with_joins\n    um = Arel::UpdateManager.new\n\n    table = Arel::Table.new(:users)\n    join_table = Arel::Table.new(:posts)\n    join_source = Arel::Nodes::JoinSource.new(\n      table,\n      [table.create_join(join_table)]\n    )\n\n    um.table join_source\n    um.set [[table[:posts_count], join_table[:id].count]]\n    assert_nothing_raised { ActiveRecord::Base.connection.update(um) }\n  end\nend\nExpected behavior\nit should be possible to set the FROM to join other tables. and at the end generate the following sql UPDATE \"users\" SET  \"posts_count\" = COUNT(\"posts\".\"id\") FROM \"posts\" WHERE \"users\".\"id\" = \"posts\".\"user_id\".\nfor example with the following syntax:\ntable = Arel::Table.new(:users)\njoin_table = Arel::Table.new(:posts)\n\num.table table\num.from join_table\num.set [[table[:posts_count], join_table[:id].count]]\num.where table[:id].eq(join_table[:user_id])\nActiveRecord::Base.connection.update(um)\nActual behavior\nfor now, it generate the following sql UPDATE \"users\" INNER JOIN \"posts\" SET \"posts_count\" = COUNT(\"posts\".\"id\") that is an invalid syntax\nSystem configuration\nRails version: 7.0.1\nRuby version: 3.1", "number_of_comments": 3, "comment_authors": ["gagalago", "nimmolo", "jonsgreen"]},
{"title": "Handle dependent: nil on ActiveStorage attachments", "link": "https://github.com/rails/rails/issues/44362", "labels": ["\n                activestorage\n", "\n                attached PR\n"], "depth": 8, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3341186046600342, "creation_date": "2022-02-08T17:13:44Z", "issue_submitter": "ryanseys", "body": "Steps to reproduce\nSetting has_one_attached :content, dependent: nil on an ActiveRecord model does not work as expected.\nExpected behavior\nWhen calling destroy on the record which has has_one_attached :content, dependent: nil set, I would expect the attachment and blob to not be destroyed.\nActual behavior\nThe attachment does get destroyed.\nSystem configuration\nRails version: 6.1\nRuby version: 2.7.5", "number_of_comments": 9, "comment_authors": ["ryanseys", "fatkodima", "rafaelfranca", "fatkodima", "rafaelfranca", "rails-bot", "fatkodima", "rails-bot", "fatkodima"]},
{"title": "Association target with duplicate records", "link": "https://github.com/rails/rails/issues/43647", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.7155494689941406, "creation_date": "2021-11-15T16:35:58Z", "issue_submitter": "composerinteralia", "body": "Steps to reproduce\nThis is an edge case where loading an association in an after commit hook when the tables involved span multiple databases can result in the association having duplicate records.\nThis doesn't seem super common, and I don't have any immediate plans to fix it, but I wanted to document it anyway. We worked around it in our application by adding inverse_of: false to one association.\nIt has to do with when the after commit hook runs vs. when a new record gets added to the association target. Having multiple databases can change the order in which those happen, since each database will commit its own transaction separately.\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\" \n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\ndb1 = Tempfile.new(['db1', '.db'])\ndb2 = Tempfile.new(['db2', '.db'])\nActiveRecord::Base.configurations = { issues: { adapter: \"sqlite3\", database: db2 } }\nActiveRecord::Base.legacy_connection_handling = false\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: db1)\nActiveRecord::Base.establish_connection(:issues)\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nclass IssuesBase < ActiveRecord::Base\n  self.abstract_class = true\n\n  # The test passes if we comment this out so everything is in one database\n  connects_to database: { writing: :issues, reading: :issues }\nend\n\nActiveRecord::Base.connection.execute('CREATE TABLE \"assignees\" (\"id\" integer PRIMARY KEY AUTOINCREMENT NOT NULL)')\nIssuesBase.connection.execute('CREATE TABLE \"issues\" (\"id\" integer PRIMARY KEY AUTOINCREMENT NOT NULL)')\nIssuesBase.connection.execute(<<~SQL)\n  CREATE TABLE \"assignments\" (\n    \"id\" integer PRIMARY KEY AUTOINCREMENT NOT NULL,\n    \"issue_id\" integer,\n    \"assignee_id\" integer\n  )\nSQL\n\nclass Issue < IssuesBase\n  # The test also passes if we set `inverse_of: false` here since we'll end up with a new issue object and load the assignees on that instead\n  has_many :assignments\n  has_many :assignees, through: :assignments, disable_joins: true\nend\n\nclass Assignment < IssuesBase\n  belongs_to :issue\n  belongs_to :assignee\n\n  after_commit :load_issue_assignees\n\n  def load_issue_assignees\n    issue.assignees.to_a\n  end\nend\n\nclass Assignee < ActiveRecord::Base\n  has_many :assignments\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    issue = Issue.create!\n    user = Assignee.create\n\n    # When the models are in different databases, the after commit runs earlier\n    # (presumably because a transaction from one database won't be joinable from\n    # another) and so the `assignees` association gets loaded, but then we add\n    # this new assignee to the association target even though it's already there\n    # at https://github.com/rails/rails/blob/ced387ee58e9fd980217dd1f472f2c5afa241e9a/activerecord/lib/active_record/associations/collection_association.rb#L467-L470\n    #\n    # When the models are in the same database, this happens in the opposite\n    # order because the after_commit runs later. We add the new assignee to\n    # the association target, then later the after_commit runs and loads the\n    # whole association.\n    issue.assignees << user\n\n    assert_equal [user], issue.assignees.to_a\n    # expected: [#<Assignee id: 1>]\n    # actual: [#<Assignee id: 1>, #<Assignee id: 1>]\n  end\nend\nExpected behavior\nissue.assignees should not include duplicate records\nActual behavior\nissue.assignees includes a duplicate record\nSystem configuration\nRails version: main@5292486\nRuby version: 3.0.2", "number_of_comments": 1, "comment_authors": ["composerinteralia"]},
{"title": "default_url_options is ignored in console", "link": "https://github.com/rails/rails/issues/43357", "labels": ["\n                actionpack\n", "\n                attached PR\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6620559692382812, "creation_date": "2021-10-01T15:58:23Z", "issue_submitter": "grosser", "body": "What Ruby, Rails and RSpec versions are you using?\nRuby version: 2.7.2\nRails version: 6.1.4.1\nObserved behaviour\nroutes.default_url_options.merge!(host: 'localhost:3000', protocol: 'http') # development.rb\n\nrails c\napp.get '/'\n-> 403\napp.response\n\"Blocked host: www.example.com\"\n\nExpected behaviour\nusing localhost:3000\nCan you provide an example app?\nsimple rails new reproduces it\nRoot cause\nhttps://github.com/rails/rails/blob/main/railties/lib/rails/console/app.rb#L13 which should be using default_url_options", "number_of_comments": 2, "comment_authors": ["grosser", "DerekCrosson"]},
{"title": "path_for escapes anchor/fragment twice", "link": "https://github.com/rails/rails/issues/43289", "labels": ["\n                actionpack\n", "\n                attached PR\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6330461502075195, "creation_date": "2021-09-22T16:20:04Z", "issue_submitter": "Peleg", "body": "Not sure if this is a bug, but it looks like path_for escapes anchors twice. The issue seems to be in add_anchor, which escapes the return value of to_param (aka to_query) which seems to already escape the string here.\nSteps to reproduce\nActionDispatch::Http::URL.path_for(anchor: { foo: '%' }) # => \"#foo=%2525\"\nExpected behavior\nThe above code should return \"#foo=%25\" (percent sign encoded once)\nActual behavior\nThe above code returns #foo=%2525 (percent sign encoded twice)\nSystem configuration\nRails version: 6.1.4.1\nRuby version: 2.6.5", "number_of_comments": 7, "comment_authors": ["Peleg", "p8", "p8", "intrip", "rails-bot", "intrip", "saiqulhaq"]},
{"title": "Child controller's before action is overridden by parent", "link": "https://github.com/rails/rails/issues/43332", "labels": ["\n                actionpack\n", "\n                attached PR\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6454429626464844, "creation_date": "2021-09-29T12:59:42Z", "issue_submitter": "samzhao2008", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\nend\n\nrequire \"action_controller/railtie\"\nrequire 'rails/test_help'\nclass TestApp < Rails::Application\n  config.root = __dir__\n  config.hosts << \"www.example.com\"\n  secrets.secret_key_base = \"secret_key_base\"\n\n  config.logger = Logger.new($stdout)\n  Rails.logger  = config.logger\n\n  routes.draw do\n    get \"/child_index\" => \"child#index\"\n    get \"/child_show\" => \"child#show\"\n    get \"/base_index\" => \"base#index\"\n    get \"/base_show\" => \"base#show\"\n  end\nend\n\nclass BaseController < ActionController::Base\n  def index\n    render plain: \"BaseController#index\"\n  end\n\n  def show\n    render plain: \"BaseController#show\"\n  end\nend\n\nclass ChildController < BaseController\n  def index\n    render plain: \"ChildController#index\"\n  end\n\n  def show\n    render plain: \"ChildController#show\"\n  end\nend\n\nmodule ChildControllerDecorator\n  def self.prepended(base)\n    base.before_action :set_instance_var, only: :index\n  end\n\n  def set_instance_var\n    @instance_var = :index\n  end\nend\nChildController.prepend(ChildControllerDecorator)\n\nmodule BaseControllerDecorator\n  def self.prepended(base)\n    base.before_action :set_instance_var, only: :show\n  end\n\n  def set_instance_var\n    @instance_var = :show\n  end\nend\nBaseController.prepend(BaseControllerDecorator)\n\nrequire \"minitest/autorun\"\n\nclass ChildControllerTest < ActionDispatch::IntegrationTest\n  \n  test \"instance var should equal to :index when child index action is invoked\" do\n    get \"/child_index\"\n    assert_equal :index, @controller.instance_variable_get(:@instance_var)\n  end\n\n  test \"instance var should equal to :nil when child show action is invoked\" do\n    get \"/child_show\"\n    assert_equal nil, @controller.instance_variable_get(:@instance_var)\n  end\n\n  private\n    def app\n      Rails.application\n    end\nend\nExpected behavior\nChildController's before action should not be overridden by parent.  In the test case, @instance_var should be set to :index, and only be set when index action is executed.\nActual behavior\nChildController's before action is overridden by parent.  wrong execution condition and value.\nSystem configuration\nRails version: main branch\nRuby version: 2.7.2\nIn order to figure it out, I read the source code. It seems every time the before_action or prepend_before_action is executed, there is a operation called remove_duplicates which remove the filters with the same name from itself and its descendants. It should not remove filters with the same name from its descendants, right?", "number_of_comments": 10, "comment_authors": ["samzhao2008", "RolandStuder", "samzhao2008", "Austio", "samzhao2008", "Austio", "Austio", "samzhao2008", "Austio", "samzhao2008"]},
{"title": "Migration errors from active storage after rails master to rails alpha migration with app:update", "link": "https://github.com/rails/rails/issues/43231", "labels": ["\n                activestorage\n", "\n                attached PR\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7049331665039062, "creation_date": "2021-09-16T18:12:28Z", "issue_submitter": "gingermusketeer", "body": "Steps to reproduce\n\nCreate an app with rails at: 01fd264d0012 (with active storage)\nUpdate to rails 7.0.0.alpha2\nRun migrations\n\nExpected behavior\nMigrations should run without a problem or not be present.\nActual behavior\nMigrations are present and fail:\n$ rails app:update\n# ... SNIP\nCopied migration 20210916174641_add_service_name_to_active_storage_blobs.active_storage.rb from active_storage\nCopied migration 20210916174642_create_active_storage_variant_records.active_storage.rb from active_storage\n\nAfter this, check Rails upgrade guide at https://guides.rubyonrails.org/upgrading_ruby_on_rails.html for more details about upgrading your app.\n$ rails db:migrate                                                                   main ✭ ◼\n== 20210916174641 AddServiceNameToActiveStorageBlobs: migrating ===============\n-- column_exists?(:active_storage_blobs, :service_name)\n   -> 0.0175s\n== 20210916174641 AddServiceNameToActiveStorageBlobs: migrated (0.0176s) ======\n\n== 20210916174642 CreateActiveStorageVariantRecords: migrating ================\n-- create_table(:active_storage_variant_records, {:id=>:primary_key})\nrails aborted!\nStandardError: An error has occurred, this and all later migrations canceled:\n\nPG::DuplicateTable: ERROR:  relation \"active_storage_variant_records\" already exists\nproject/db/migrate/20210916174642_create_active_storage_variant_records.active_storage.rb:5:in `change'\n\nCaused by:\nActiveRecord::StatementInvalid: PG::DuplicateTable: ERROR:  relation \"active_storage_variant_records\" already exists\n\nThe migrations generated are using v6 of rails:\nclass CreateActiveStorageVariantRecords < ActiveRecord::Migration[6.0]\nclass AddServiceNameToActiveStorageBlobs < ActiveRecord::Migration[6.0]\n\nThe migration code failing is:\n create_table :active_storage_variant_records, id: primary_key_type do |t|\n      t.belongs_to :blob, null: false, index: false, type: blobs_primary_key_type\n      t.string :variation_digest, null: false\n\n      t.index %i[ blob_id variation_digest ], name: \"index_active_storage_variant_records_uniqueness\", unique: true\n      t.foreign_key :active_storage_blobs, column: :blob_id\n    end\n\nthis is already present from a previous migration:\ncreate_table :active_storage_variant_records, id: primary_key_type do |t|\n      t.belongs_to :blob, null: false, index: false, type: foreign_key_type\n      t.string :variation_digest, null: false\n\n      t.index %i[ blob_id variation_digest ], name: \"index_active_storage_variant_records_uniqueness\", unique: true\n      t.foreign_key :active_storage_blobs, column: :blob_id\n    end\n\nSystem configuration\nRails version:\nDescribed above.\nRuby version:\n3.0.2", "number_of_comments": 10, "comment_authors": ["gingermusketeer", "brenogazzola", "ghiculescu", "brenogazzola", "ghiculescu", "brenogazzola", "brenogazzola", "gingermusketeer", "ghiculescu", "gingermusketeer"]},
{"title": "save(validate: false) still runs before_validations on associated records", "link": "https://github.com/rails/rails/issues/43400", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7515778541564941, "creation_date": "2021-10-07T17:43:04Z", "issue_submitter": "ghiculescu", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :post_with_nested_attributes, force: true do |t|\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n  end\n\n  create_table :comment_with_nested_attributes, force: true do |t|\n    t.integer :post_with_nested_attribute_id\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\nend\n\nclass PostWithNestedAttribute < ActiveRecord::Base\n  has_many :comment_with_nested_attributes\n  accepts_nested_attributes_for :comment_with_nested_attributes\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\n\n  before_validation :do_something\n\n  def do_something\n    raise \"do not save!\"\n  end\nend\n\nclass CommentWithNestedAttribute < ActiveRecord::Base\n  belongs_to :post_with_nested_attribute\n\n  before_validation :do_something\n\n  def do_something\n    raise \"do not save!\"\n  end\nend\n\nclass BugTest < Minitest::Test\n  def test_without_native_attributes\n    post = Post.create!\n\n    post.comments.build\n\n    # this raises, which I think is wrong\n    assert_raises(RuntimeError) do\n      post.save!(validate: false)\n    end\n  end\n\n  def test_with_native_attributes\n    post = PostWithNestedAttribute.create!\n\n    post.comment_with_nested_attributes.build\n\n    # this doesn't raise, which I think is correct\n    post.save!(validate: false)\n  end\nend\nExpected behavior\nCurrently both tests pass.\nI think test_without_native_attributes should fail, because before_validation should not fire, since we are saving without validating.\nActual behavior\nBoth tests pass, so:\n\nNormally, save(validate: false) will still run validation callbacks on associated autosaved records.\nEnabling nested attributes seems fixes the issue. (I'm not sure if this is relevant at all, it's just interesting...)\n\nSystem configuration\nRails version: main\nRuby version: 2.7", "number_of_comments": 15, "comment_authors": ["ghiculescu", "jacobherrington", "ghiculescu", "drymar", "jacobherrington", "ghiculescu", "ghiculescu", "ghiculescu", "drymar", "jacobherrington", "intrip", "rails-bot", "intrip", "Jellyfishboy", "jattoabdul"]},
{"title": "When passed index: nil, form builder helpers should not infix name attribute with empty brackets []", "link": "https://github.com/rails/rails/issues/43194", "labels": ["\n                actionview\n", "\n                attached PR\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0066587924957275, "creation_date": "2021-09-09T20:32:19Z", "issue_submitter": "heynan0", "body": "I have a situation that requires me to explicitly define the named argument index: passed to a call of form_builder.text_field. The value for index is either set or not. If it is set (not nil), then it should take that and place the [] infix with the value inside the brackets, for the name attribute of the <input> element.\nSteps to reproduce\nHave a template that uses form_for and under that place a call to: form.text_field with an index: nil option.\n<%= form_for :some_model do |form| %>\n  <%= form.text_field :something, index: nil %>\n<% end %>\n\nSteps tracing the output for the name attribute that contains the \"index\":\nFrom: [...]/lib/action_view/helpers/tags/base.rb:176 ActionView::Helpers::Tags::Base#name_and_id_index:\n\n    174: def name_and_id_index(options)\n    175:   binding.pry\n => 176:   if options.key?(\"index\")\n    177:     options.delete(\"index\") || \"\"\n    178:   elsif @generate_indexed_names\n    179:     @auto_index || \"\"\n    180:   end\n    181: end\n\n[1] pry(#<ActionView::Helpers::Tags::TextField>)> options\n=> {\"index\"=>nil, \"class\"=>\"form-control\", \"size\"=>nil, \"type\"=>\"text\", \"value\"=>nil}\n\n\n\n\n\nrails/actionview/lib/action_view/helpers/tags/base.rb\n\n\n        Lines 173 to 175\n      in\n      cf99be4\n\n\n\n\n\n\n def name_and_id_index(options) \n\n\n\n if options.key?(\"index\") \n\n\n\n options.delete(\"index\") || \"\" \n\n\n\n\n\nNote index is nil in the hash above, options. Since the key index is defined, it's taking the nil value, but due to short circuit with || it makes the function return empty string instead of nil.\n[2] pry(#<ActionView::Helpers::Tags::TextField>)> up\n\nFrom: [...]/lib/action_view/helpers/tags/base.rb:96 ActionView::Helpers::Tags::Base#add_default_name_and_id:\n\n     95: def add_default_name_and_id(options)\n =>  96:   index = name_and_id_index(options)\n     97:   options[\"name\"] = options.fetch(\"name\") { tag_name(options[\"multiple\"], index) }\n     98:\n     99:   if generate_ids?\n    100:     options[\"id\"] = options.fetch(\"id\") { tag_id(index) }\n    101:     if namespace = options.delete(\"namespace\")\n    102:       options[\"id\"] = options[\"id\"] ? \"#{namespace}_#{options['id']}\" : namespace\n    103:     end\n    104:   end\n    105: end\n\n\n\n\nrails/actionview/lib/action_view/helpers/tags/base.rb\n\n\n         Line 96\n      in\n      cf99be4\n\n\n\n\n\n\n index = name_and_id_index(options) \n\n\n\n\n\nindex in line 96 is then set to empty string \"\", and a call to tag_name is made with the empty string as second argument.\n[2] pry(#<ActionView::Helpers::Tags::TextField>)> next\n[2] pry(#<ActionView::Helpers::Tags::TextField>)> tag_name(options[\"multiple\"], index)\n=> \"some_model[][something]\"\n[3] pry(#<ActionView::Helpers::Tags::TextField>)> step\n[3] pry(#<ActionView::Helpers::Tags::TextField>)> step\n\nFrom: [...]/lib/action_view/helpers/tags/base.rb:108 ActionView::Helpers::Tags::Base#tag_name:\n\n    107: def tag_name(multiple = false, index = nil)\n => 108:   binding.pry\n    109:   # a little duplication to construct fewer strings\n    110:   case\n    111:   when @object_name.empty?\n    112:     \"#{sanitized_method_name}#{multiple ? \"[]\" : \"\"}\"\n    113:   when index\n    114:     \"#{@object_name}[#{index}][#{sanitized_method_name}]#{multiple ? \"[]\" : \"\"}\"\n    115:   else\n    116:     \"#{@object_name}[#{sanitized_method_name}]#{multiple ? \"[]\" : \"\"}\"\n    117:   end\n    118: end\n\n[3] pry(#<ActionView::Helpers::Tags::TextField>)> index\n=> \"\"\n[4] pry(#<ActionView::Helpers::Tags::TextField>)> next\n[4] pry(#<ActionView::Helpers::Tags::TextField>)> next\n\nFrom: [...]/lib/action_view/helpers/tags/base.rb:114 ActionView::Helpers::Tags::Base#tag_name:\n\n    107: def tag_name(multiple = false, index = nil)\n    108:   binding.pry\n    109:   # a little duplication to construct fewer strings\n    110:   case\n    111:   when @object_name.empty?\n    112:     \"#{sanitized_method_name}#{multiple ? \"[]\" : \"\"}\"\n    113:   when index\n => 114:     \"#{@object_name}[#{index}][#{sanitized_method_name}]#{multiple ? \"[]\" : \"\"}\"\n    115:   else\n    116:     \"#{@object_name}[#{sanitized_method_name}]#{multiple ? \"[]\" : \"\"}\"\n    117:   end\n    118: end\n    \n\n\n\n\nrails/actionview/lib/action_view/helpers/tags/base.rb\n\n\n        Lines 107 to 113\n      in\n      cf99be4\n\n\n\n\n\n\n def tag_name(multiple = false, index = nil) \n\n\n\n # a little duplication to construct fewer strings \n\n\n\n case \n\n\n\n when @object_name.empty? \n\n\n\n \"#{sanitized_method_name}#{multiple ? \"[]\" : \"\"}\" \n\n\n\n when index \n\n\n\n \"#{@object_name}[#{index}][#{sanitized_method_name}]#{multiple ? \"[]\" : \"\"}\" \n\n\n\n\n\nBecause index is passed as empty string (and not nil), it goes to the case when index, since empty string IS NOT FALSY in Ruby.\nThat results in an infix [] being added to the name attribute string. That would make sense if I had originally passed index: \"\", but here originally I passed index: nil. So I don't think this is the appropriate or correct behavior.\n\n[4] pry(#<ActionView::Helpers::Tags::TextField>)> \"#{@object_name}[#{index}][#{sanitized_method_name}]#{multiple ? \"[]\" : \"\"}\"\n=> \"some_model[][something]\"\n\nExpected behavior\nindex: nil should not add an infix [] to the name attribute of the element\nIn contrast, index: \"\" should place the empty-bracket infix [] (this already happens)\nActual behavior\nindex: nil is adding the infix [] to the name attribute of the element\nSystem configuration\nRails version: Rails 7.0.0.alpha.790723b\nRuby version: 3.0.0", "number_of_comments": 2, "comment_authors": ["heynan0", "rails-bot"]},
{"title": "Kind of caching issue updating has_one association", "link": "https://github.com/rails/rails/issues/43096", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9888505935668945, "creation_date": "2021-08-25T11:50:22Z", "issue_submitter": "MathijsK93", "body": "We run into an issue updating a has_one association. This is broken since Rails 6.0.4.\nSteps to reproduce\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", \"6.0.3.7\"\n  gem \"sqlite3\"\n  gem \"nokogiri\", \"1.11.7\" # needed for my local setup\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :debtors, force: true do |t|\n    t.string :name\n  end\n\n  create_table :mandates, force: true do |t|\n    t.integer :debtor_id\n  end\nend\n\nclass Debtor < ActiveRecord::Base\n  has_one :mandate\nend\n\nclass Mandate < ActiveRecord::Base\n  belongs_to :debtor\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    debtor1 = Debtor.create!(name: \"John\")\n    debtor2 = Debtor.create!(name: \"DHH\")\n    Mandate.create!(debtor: debtor1)\n\n    debtor1.mandate.update!(debtor: debtor2)\n    debtor1.update!(name: \"Jonas\")\n\n    assert_equal false, Mandate.find_by(debtor: debtor1).present?\n  end\nend\nIn Rails 6.0.3.7 the example succeeds, but in Rails 6.0.4 the example fails and the debtor is not changed on the mandate object.\nExpected behavior\nWhen I update a has_one association followed by an update of an attribute of the object, it does not revert the change on the has_one association.\nActual behavior\nIt reverts the change on the has_one association after updating an attribute.\nSystem configuration\nRails version:\n6.0.4\nRuby version:\n2.6.6", "number_of_comments": 10, "comment_authors": ["MathijsK93", "p8", "intrip", "p8", "intrip", "p8", "rails-bot", "intrip", "rails-bot", "marcelolx"]},
{"title": "ActiveRecord | #upsert_all without unique_by adds ID as the conflict_target in Postgres", "link": "https://github.com/rails/rails/issues/42918", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6271898746490479, "creation_date": "2021-07-30T13:16:26Z", "issue_submitter": "lucaspbordignon", "body": "When trying to call a upsert_all operation in one of the ActiveRecord models of my application, I've noticed that the resulting SQL inserts the statement ON CONFLICT (\"id\") DO UPDATE. Passing the desired index via :unique_by key works though.\nHowever, the current documentation of #upsert_all states:\n\nBy default rows are considered to be unique by every unique index on the table\n\nAlso, when executing #insert_all without specifying the unique index, we receive the correct SQL statement ON CONFLICT DO NOTHING\nExpected behavior\nThe #upsert_all method, without :unique_by parameter to add the ON CONFLICT DO UPDATE SQL statement\nActual behavior\nThe #upsert_all method, without :unique_by parameter adds the ON CONFLICT (\"id\") DO UPDATE SQL statement\nSystem configuration\nRails version: 6.1.3\nRuby version: 3.0.1\nPostgreSQL version: 12.4, running over AWS AuroraDB", "number_of_comments": 5, "comment_authors": ["lucaspbordignon", "lucaspbordignon", "ghiculescu", "lucaspbordignon", "lucaspbordignon"]},
{"title": "ActiveSupport::Duration#inspect returns invalid output when integer division", "link": "https://github.com/rails/rails/issues/42802", "labels": ["\n                activesupport\n", "\n                attached PR\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9011120796203613, "creation_date": "2021-07-16T13:25:51Z", "issue_submitter": "ysugiyama12", "body": "Steps to reproduce\nrequire \"active_support/all\"\n\n(1.second + 1.hour/10).inspect\n# (1.second + 1.hour/10.0).inspect works properly due to float division\nExpected behavior\n0.1 hour, 1 second or 361 seconds\nActual behavior\n1 second\nSystem configuration\nRails version:\n6.1.3.2\nRuby version:\n2.7.3", "number_of_comments": 2, "comment_authors": ["ysugiyama12", "martinjaimem"]},
{"title": "ActiveStorage is not compatible with relative_root_urls", "link": "https://github.com/rails/rails/issues/43633", "labels": ["\n                activestorage\n", "\n                With reproduction steps\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.968712568283081, "creation_date": "2021-11-12T13:51:45Z", "issue_submitter": "taa-lze", "body": "Bug\nIf you have configured a relative root url, the active storage service will redirect wrong.\nExample:\n\nhttp://localhost:3000/anything/rails/active_storage/blobs/blob_hash/image.jpg\nWill get redirected to:\nhttp://localhost:3000/rails/active_storage/disk/blob_hash/image.jpg\nInstead of:\nhttp://localhost:3000/anything/rails/active_storage/disk/blob_hash/image.jpg\n\nSteps to reproduce\nAdd to config:\nconfig.relative_url_root = '/anything'\nIn your view:\nimage_tag(record.image)\nSystem configuration\nRails version: 6.1.0\nRuby version: ruby 2.7.1p83", "number_of_comments": 3, "comment_authors": ["taa-lze", "taa-lze", "abeidahmed"]},
{"title": "Scaffolding generates broken fixtures for namespaced models", "link": "https://github.com/rails/rails/issues/43638", "labels": ["\n                railties\n", "\n                With reproduction steps\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9050989151000977, "creation_date": "2021-11-12T18:39:20Z", "issue_submitter": "jagthedrummer", "body": "Steps to reproduce\nrails g model Customer name:string\nrails g model Customers::Category name:string description:string position:integer\n\nThis ends up creating two fixture files\n\ntest/fixtures/customers.yml\ntest/fixtures/customers/categories.yml\n\nWhen trying to run tests I get an error that looks like this:\nbin/rails test test/controllers/customers/categories_controller_test.rb:26\n\nE\n\nError:\nCustomers::CategoriesControllerTest#test_should_update_customers_category:\nActiveRecord::Fixture::FixtureError: table \"customers\" has no columns named \"position\", \"description\".\n\nI found some details in #31782 that led me to a fix.\nI needed to move test/fixtures/customers/categories.yml to test/fixtures/customers_categories.yml AND add this block to the top of that file:\n_fixture:\n  model_class: Customers::Category\n\nExpected behavior\nGenerating a namespaced model should work out of the box.\nIntuitively I would expect that the fixture could be in a namespaced directory that matches the model itself. The response in #31782 makes it sound like that is explicitly not desired.\nIt's also counterintuitive for the _fixture block to not work when the fixture file is in a namespaced directory.\nGiven the details in #31782 it sounds like the expected behavior should be for the scaffold generator to not namespace the fixture file with a directory, but with a namespace prefix (customers_ instead of customers/) AND it should include the _fixture block to set the correct model name.\nFWIW, I'm not sure that the desired behavior as described in #31782 is ideal. Or at least it causes some problems and inconsistencies with the way that namespaces for fixtures work vs models. I think ideally we should be able to use a fixture file that is namespaced with a directory the same way that models are, and ideally we shouldn't need the _fixture block in the fixture file. A reasonable middle ground might be to allow the namespaced directory for the fixture to work, but to auto generate the required _fixture block.\nActual behavior\nScaffolding a namespaced model does not work out of the box. It generates a fixture file that is namespaced with a directory name, and it does not include the required _fixture block.\nSystem configuration\nRails version: Rails 5.2.5\nRuby version: ruby 2.6.5p114 (2019-10-01 revision 67812) [x86_64-darwin20]", "number_of_comments": 12, "comment_authors": ["jagthedrummer", "fatkodima", "ajaynomics", "awilkening", "piotr-macuk", "ajaynomics", "ajaynomics", "zzak", "ajaynomics", "wouterfovel", "piotr-macuk", "macuk"]},
{"title": "Change wording of master.key to be inclusive", "link": "https://github.com/rails/rails/issues/43601", "labels": ["\n                pinned\n", "\n                railties\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9573583602905273, "creation_date": "2021-11-05T18:26:44Z", "issue_submitter": "jennifersarahpaul", "body": "Steps to reproduce\nJust spinning up a new app. $ rails new coolproject\nExpected behavior\nThe config/master.key file should be renamed to use another term that is inclusive to everyone. Perhaps primary.key, root.key, or main.key\nActual behavior\nThe config/master.key wording is outdated and rooted in discrimination. Let's make it better!\nSystem configuration\nRails version: 6.0.4.1\nRuby version: 2.7.0 and 2.7.3", "number_of_comments": 16, "comment_authors": ["jennifersarahpaul", "jennifersarahpaul", "jhawthorn", "kaspth", "JeffMorhous", "ghousemohamed", "cucho", "jennifersarahpaul", "inem", "pzelnip", "inem", "matthewd", "rails-bot", "pzelnip", "p8", "rails-bot"]},
{"title": "There is no way to run ActiveRecord callbacks after a model is loaded with included associations", "link": "https://github.com/rails/rails/issues/43642", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.941077470779419, "creation_date": "2021-11-15T03:17:54Z", "issue_submitter": "adamdebono", "body": "This is a similar issue to #13156\nSteps to reproduce\nI am building a translation engine which stores translated strings in a separate table. When the model is loaded, I am automatically loading the translations using default scopes and after_find as follows:\nclass Page\n  has_many :translations, as: :record\n  has_one :translation_es, as: :record, class_name: 'Translation' # Spanish\n\n  default_scope { includes_locale }\n  def self.includes_locale locale=nil\n    locale ||= I18n.locale\n    includes(\"translation_#{locale}\".to_sym)\n  end\n\n  after_find :for_locale\n  def for_locale locale=nil\n    locale ||= I18n.locale\n    translation = public_send(\"translation_#{locale}\".to_sym)\n    # ... load translation into model\n  end\nend\n\nclass Translation\n  belongs_to :record, polymorphic: true\nend\n(This is greatly simplified, in practice I have a Translatable module which is included into any model that requires translation)\nThen wherever I need to load anything, calling Page.all (with or without any modifiers) will load the models plus any translation models if available.\nExpected behavior\nI expect the Page models to automatically and transparently load their translations.\nActual behavior\nWhen querying against the Pages table, I see n+1 queries because it seems that the preloaded associations are not applied until after both after_find and after_initialize have been called.\nWhether this is intentional or not isn't important, I'm just looking for a way that I can do this transparently. If it's not possible to do this with the existing callbacks, is it possible for another to be added, e.g. after_init_includes? Alternatively, is there some way I could already achieve something similar by overriding a method somewhere?\nOne workaround I can think of would be to add another function on the Page class, which would need to be called whenever I'm using models that can be translated, e.g.\nclass Page\n  # ...\n  def self.for_locale locale=nil\n    pages = includes_locale(locale)\n    pages.each { |page| page.for_locale(locale) }\n  end\nend\nThis could then be called using Page.all.for_locale. Drawbacks of this solution:\n\nWe need to include for_locale everywhere we load these pages, which is prone to human error\nIt causes the query to execute immediately, rather than lazily when the data is needed\nThe returned value is now an array, rather than a Relation object, which can't be chained with other query modifiers\n\nThe way I'm currently working around this is by overriding preload_associations as follows:\nclass Page\n  # ...\n  def self.preload_associations records\n    super(records)\n    records.each(&:for_locale)\n\n    records\n  end\nend\nWhile this works the way I want, I'm not happy with overriding this as its internal code that could change from underneath me.\nSystem configuration\nRails version: 6.1.4\nRuby version: 2.7.3", "number_of_comments": 7, "comment_authors": ["adamdebono", "wheaney", "adamdebono", "wheaney", "adamdebono", "wheaney", "adamdebono"]},
{"title": "ActiveStorage::Attached::Many#attach may erase files uploaded concurrently", "link": "https://github.com/rails/rails/issues/42941", "labels": ["\n                activestorage\n", "\n                With reproduction steps\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.154226541519165, "creation_date": "2021-08-04T08:43:46Z", "issue_submitter": "smt116", "body": "Steps to reproduce\nFirst setup the sample application:\n\n\ngem install rails -v6.1.4\n\n\nrails new ConcurrentAttachTestApp --skip-action-mailer --skip-action-mailbox --skip-action-text --skip-action-cable --skip-sprockets --skip-spring --skip-listen --skip-javascript --skip-turbolinks --skip-jbuilder --skip-test --skip-system-test --skip-bootsnap\n\n\napply the following diff:\ndiff --git a/Gemfile b/Gemfile\nindex 01a705b..25b3e19 100644\n--- a/Gemfile\n+++ b/Gemfile\n@@ -15,6 +15,8 @@ gem 'puma', '~> 5.0'\n # Use Active Storage variant\n # gem 'image_processing', '~> 1.2'\n\n+gem 'pg'\n+\n group :development, :test do\n   # Call 'byebug' anywhere in the code to stop execution and get a debugger console\n   gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]\n@@ -26,6 +28,8 @@ group :development do\n   # Display performance information such as SQL time and flame graphs for each request in your browser.\n   # Can be configured to work on production as well see: https://github.com/MiniProfiler/rack-mini-profiler/blob/master/README.md\n   gem 'rack-mini-profiler', '~> 2.0'\n+\n+  gem 'parallel'\n end\n\n # Windows does not include zoneinfo files, so bundle the tzinfo-data gem\ndiff --git a/app/models/user.rb b/app/models/user.rb\nnew file mode 100644\nindex 0000000..2db75b6\n--- /dev/null\n+++ b/app/models/user.rb\n@@ -0,0 +1,3 @@\n+class User < ApplicationRecord\n+  has_many_attached :files\n+end\ndiff --git a/config/database.yml b/config/database.yml\nindex 4a8a1b2..78ac63a 100644\n--- a/config/database.yml\n+++ b/config/database.yml\n@@ -10,8 +10,12 @@ default: &default\n   timeout: 5000\n\n development:\n-  <<: *default\n-  database: db/development.sqlite3\n+  adapter: postgresql\n+  database: concurrent_attach_development\n+  encoding: unicode\n+  host: localhost\n+  pool: 5\n+  username: postgres\n\n # Warning: The database defined as \"test\" will be erased and\n # re-generated from your development database when you run \"rake\".\ndiff --git a/db/migrate/20210804080852_create_active_storage_tables.active_storage.rb b/db/migrate/20210804080852_create_active_storage_tables.active_storage.rb\nnew file mode 100644\nindex 0000000..8779826\n--- /dev/null\n+++ b/db/migrate/20210804080852_create_active_storage_tables.active_storage.rb\n@@ -0,0 +1,36 @@\n+# This migration comes from active_storage (originally 20170806125915)\n+class CreateActiveStorageTables < ActiveRecord::Migration[5.2]\n+  def change\n+    create_table :active_storage_blobs do |t|\n+      t.string   :key,          null: false\n+      t.string   :filename,     null: false\n+      t.string   :content_type\n+      t.text     :metadata\n+      t.string   :service_name, null: false\n+      t.bigint   :byte_size,    null: false\n+      t.string   :checksum,     null: false\n+      t.datetime :created_at,   null: false\n+\n+      t.index [ :key ], unique: true\n+    end\n+\n+    create_table :active_storage_attachments do |t|\n+      t.string     :name,     null: false\n+      t.references :record,   null: false, polymorphic: true, index: false\n+      t.references :blob,     null: false\n+\n+      t.datetime :created_at, null: false\n+\n+      t.index [ :record_type, :record_id, :name, :blob_id ], name: \"index_active_storage_attachments_uniqueness\", unique: true\n+      t.foreign_key :active_storage_blobs, column: :blob_id\n+    end\n+\n+    create_table :active_storage_variant_records do |t|\n+      t.belongs_to :blob, null: false, index: false\n+      t.string :variation_digest, null: false\n+\n+      t.index %i[ blob_id variation_digest ], name: \"index_active_storage_variant_records_uniqueness\", unique: true\n+      t.foreign_key :active_storage_blobs, column: :blob_id\n+    end\n+  end\n+end\ndiff --git a/db/schema.rb b/db/schema.rb\nnew file mode 100644\nindex 0000000..dbb533c\n--- /dev/null\n+++ b/db/schema.rb\n@@ -0,0 +1,51 @@\n+# This file is auto-generated from the current state of the database. Instead\n+# of editing this file, please use the migrations feature of Active Record to\n+# incrementally modify your database, and then regenerate this schema definition.\n+#\n+# This file is the source Rails uses to define your schema when running `bin/rails\n+# db:schema:load`. When creating a new database, `bin/rails db:schema:load` tends to\n+# be faster and is potentially less error prone than running all of your\n+# migrations from scratch. Old migrations may fail to apply correctly if those\n+# migrations use external dependencies or application code.\n+#\n+# It's strongly recommended that you check this file into your version control system.\n+\n+ActiveRecord::Schema.define(version: 2021_08_04_080852) do\n+\n+  # These are extensions that must be enabled in order to support this database\n+  enable_extension \"plpgsql\"\n+\n+  create_table \"active_storage_attachments\", force: :cascade do |t|\n+    t.string \"name\", null: false\n+    t.string \"record_type\", null: false\n+    t.bigint \"record_id\", null: false\n+    t.bigint \"blob_id\", null: false\n+    t.datetime \"created_at\", null: false\n+    t.index [\"blob_id\"], name: \"index_active_storage_attachments_on_blob_id\"\n+    t.index [\"record_type\", \"record_id\", \"name\", \"blob_id\"], name: \"index_active_storage_attachments_uniqueness\", unique: true\n+  end\n+\n+  create_table \"active_storage_blobs\", force: :cascade do |t|\n+    t.string \"key\", null: false\n+    t.string \"filename\", null: false\n+    t.string \"content_type\"\n+    t.text \"metadata\"\n+    t.string \"service_name\", null: false\n+    t.bigint \"byte_size\", null: false\n+    t.string \"checksum\", null: false\n+    t.datetime \"created_at\", null: false\n+    t.index [\"key\"], name: \"index_active_storage_blobs_on_key\", unique: true\n+  end\n+\n+  create_table \"active_storage_variant_records\", force: :cascade do |t|\n+    t.bigint \"blob_id\", null: false\n+    t.string \"variation_digest\", null: false\n+    t.index [\"blob_id\", \"variation_digest\"], name: \"index_active_storage_variant_records_uniqueness\", unique: true\n+  end\n+\n+  create_table \"users\", force: :cascade do |t|\n+  end\n+\n+  add_foreign_key \"active_storage_attachments\", \"active_storage_blobs\", column: \"blob_id\"\n+  add_foreign_key \"active_storage_variant_records\", \"active_storage_blobs\", column: \"blob_id\"\n+end\n\n\nbundle install\n\n\nbin/rails active_storage:install\n\n\nbin/rails db:setup\n\n\nNow try the following code in the bin/rails console:\nUser.create\n\nParallel.each(1..10) do\n  ActiveRecord::Base.connection_pool.with_connection do\n    User.first.files.attach(io: File.open(\"README.md\"), filename: \"README.md\")\n  end\nend\n\nUser.first.files.count\nNote that User.first.files.count may return a smaller number than 10.\nExpected behavior\nEach Object#attach appends the new file and does not touch existing attachments.\nActual behavior\nObject#attach may purge files that are uploaded concurrently.\nSystem configuration\nRails version: 6.1.4\nRuby version: 3.0.1", "number_of_comments": 22, "comment_authors": ["smt116", "smt116", "smt116", "smt116", "georgeclaghorn", "intrip", "georgeclaghorn", "smt116", "rails-bot", "smt116", "3pns", "rails-bot", "smt116", "rails-bot", "smt116", "rails-bot", "smt116", "rails-bot", "smt116", "rails-bot", "rails-bot", "adamokasha"]},
{"title": "unsafe query generation?", "link": "https://github.com/rails/rails/issues/42942", "labels": ["\n                actionpack\n", "\n                security\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.1432299613952637, "creation_date": "2021-08-04T09:47:28Z", "issue_submitter": "Alaa-abdulridha", "body": "Steps to reproduce\nThere's a weird bug, I think it's related to unsafe query generation, and there's action controller leakage.\nSimilar vulnerabilities can be found with these IDS CVE-2016-6317,CVE-2012-2660, CVE-2012-2694\nand CVE-2013-0155.\nActual behavior\nFor example:\nhttps://github.com/Alaa-abdulridha?tab=repositories&q[].=&type[].=1\nthen we could use & operator to get a new result with nil\nhttps://github.com/Alaa-abdulridha?tab=repositories&q[].&=&type[].&=1\nI believe all rails applications are vulnerable.\n\n[#<ActionController::Parameters {\".\"=>\"\"} permitted: false>]\n[#<ActionController::Parameters {\".\"=>nil} permitted: false>]\nI have managed to mitigate this issue, by a simple solution as below:\ndef block_array_parameters\n      params.each do |key, value|\n        if key != 'controller' && key != 'action'\n          if params[key].is_a? Array\n\t\t    key = key.gsub(/\\W/, \"\")\n            render status: 403, json: JSON.pretty_generate({ error: \"`#{key}` parameter can't be an array.\" })\n          end\n        end\n      end\n    end\nHere I made a simple project vulnerable with this bug,\nhttps://github.com/Alaa-abdulridha/RailsApplication\n\nIf you notice on the application_controller.rb file lines between 23 and 32, I've added the code above, it's not activated only if you uncommented line 3\nThis is a simple solution I've made just to give you an Idea maybe about how to fix it.\nYou can test this issue on the home_controller e.g. the search parameter and as below:\nclass HomeController < ApplicationController\n\n\tdef index\n\t\t@post = Post.includes(:user).where(status: 0).order(created_at: :desc).page params[:page]\n\tend\n\n\tdef search\n\t\tif params[:search] != \"\"\n           @results = Post.where('lower(name) iLIKE ?', \"%#{params[:search]}%\").order(:created_at)\n           @user = User.where('lower(name) iLIKE ?', \"%#{params[:search]}%\").order(:created_at)\n       end  \n    end\nend\nThe above solution will work If your controllers are inherited from the application controller, It filter all the controller's parameters.\nBut the issue with this solution, if your application is using the nested parameters it won't work, as below:\n      @card.name = params[:credit_card][:name]\n      @card.address_line1 = params[:credit_card][:address_line1]\n      @card.address_line2 = params[:credit_card][:address_line2]\nSystem configuration\nRails version: Latest version.\nRuby version: Latest version.", "number_of_comments": 5, "comment_authors": ["Alaa-abdulridha", "p8", "Alaa-abdulridha", "p8", "p8"]},
{"title": "Rails exits with zero code if launched with invalid parameters in command-line outside of project directory", "link": "https://github.com/rails/rails/issues/42607", "labels": ["\n                With reproduction steps\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5428237915039062, "creation_date": "2021-06-25T17:55:26Z", "issue_submitter": "endenis", "body": "I noticed this problem while configuring CI. I called rails db:migrate from incorrect folder. It passed: it rendered usage instructions without returning any error code.\nSteps to reproduce\nWhen called outside of project directory\nrails some-invalid-argument\nExpected behavior\nRenders usage instructions and return a non-zero exit code\nActual behavior\nRenders usage instructions and returns a zero exit code as if there is no error.\nSystem configuration\nRails version:\n7.0.0.alpha\nRuby version:\n2.7.3", "number_of_comments": 1, "comment_authors": ["endenis"]},
{"title": "Association reset does not work as expected when you then call save", "link": "https://github.com/rails/rails/issues/42637", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                With reproduction steps\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4328715801239014, "creation_date": "2021-06-29T11:21:49Z", "issue_submitter": "ollieh-m", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :publishers, force: true do |t|\n    t.integer :post_id\n    t.datetime :expires_at\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_one :active_publisher, -> { active }, class_name: \"Publisher\"\nend\n\nclass Publisher < ActiveRecord::Base\n  def self.active\n    where(expires_at: nil).or(expiring)\n  end\n\n  def self.expiring\n    where(\"expires_at > ?\", Time.current)\n  end\nend\n\nclass BugTest < Minitest::Test\n  # this fails\n  def test_association_reset_then_save\n    post = Post.create\n    post.create_active_publisher\n    post.active_publisher.update(expires_at: Time.current)\n    post.association(:active_publisher).reset\n\n    # this loads the `active_publisher` association using the already-set `@association_scope`,\n    # which now has a stale timestamp - the publisher has already expired\n    # but its expiry is in the future according to the timestamp set in `@association_scope`\n    post.save\n\n    assert_nil post.active_publisher\n  end\n\n  # this passes\n  def test_association_reset\n    post = Post.create\n    post.create_active_publisher\n    post.active_publisher.update(expires_at: Time.current)\n\n    post.association(:active_publisher).reset\n\n    assert_nil post.active_publisher\n  end\nend\nExpected behavior\nI think both the tests in the above test case should pass, but only one does.\nWhen we load an association (active_publisher) on an object (post), then reset that association (post.association(:active_publisher).reset), the next time the association is loaded should trigger a fresh query to find any associated record. That fresh query should invoke the association's scope realtime, so if the scope refers to Time.current, that should evaluate to the time when the association is loaded (not the time when the association was first loaded).\nActual behavior\nAfter loading an association on an object then resetting the association, calling save on the object has the effect of loading the association again (as part of AutosaveAssocation#save_has_one_association). When the association is loaded in this way, the query to find the associated record is based on the scope as it was evaluated originally. The conditions are not re-evaluated, meaning they can be stale. In this example, an expired publisher is returned as if its expiry is still in the future, because the timestamp in the scope is now out-of-date.\nThe implication is (as an example) that if we do the following:\n\npost.create_active_publisher\npost.active_publisher.update(expires_at: Time.current)\npost.assocation(:active_publisher).reset\npost.save\npost.create_active_publisher\n\nthe original publisher will be deleted or its foreign key set to nil, because it will be handled as if it is still an active_publisher the second time post.create_active_publisher is called.\nA workaround is to call post.association(:active_publisher).reset_scope as well as post.association(:active_publisher).reset, but would it be less surprising for reset to include reset_scope automatically?\nSystem configuration\nRails version: 7.0.0.alpha\nRuby version: 2.7.0", "number_of_comments": 3, "comment_authors": ["ollieh-m", "ghiculescu", "ollieh-m"]},
{"title": "Deprecate mutable default for attributes", "link": "https://github.com/rails/rails/issues/42959", "labels": ["\n                activemodel\n", "\n                With reproduction steps\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9639275074005127, "creation_date": "2021-08-06T18:11:31Z", "issue_submitter": "fsateler", "body": "Steps to reproduce\nOn #41854, a user is confused on why changing one object modifies another due to a mutable default:\nclass Foo\n  include ActiveModel::Model\n  include ActiveModel::Attributes\n\n  attribute :bars, default: []\nend\n\nfoo = Foo.new\nfoo.bars << 1\n\nanother_foo = Foo.new\nanother_foo.bars\n=> [1]\nThe issue is closed with the correct suggestion: use a proc to define the default.\nHaving been recently bitten by a similar issue, I come here to suggest attribute should not accept mutable objects as default. The overwhelming majority of users would actually want a new instance of the object rather than share the object.\nFor prior art, see FactoryBot which disallowed static values entirely: thoughtbot/factory_bot#1135\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\nend\n\nrequire \"active_model\"\nrequire \"minitest/autorun\"\n\nclass SomeModel\n  include ActiveModel::Model\n  include ActiveModel::Attributes\n\n  attribute :my_attribute, default: {}\nend\n\nclass BugTest < Minitest::Test\n  def test_stuff\n    m1 = SomeModel.new\n    m2 = SomeModel.new\n    m1.my_attribute[:key] = 1\n    assert_equal({}, m2.my_attribute)\n  end\nend\nExpected behavior\nAM prevents me from shooting myself in the foot, and tells me using a mutable default value is problematic.\nActual behavior\nAM is happy to use the same array instance for all SomeModel instances.\nSystem configuration\nRails version: 6.0, main\nRuby version: 2.7.2", "number_of_comments": 3, "comment_authors": ["fsateler", "ghiculescu", "soulnafein"]},
{"title": "ActiveRecord 6.0.4 introduces extra JOIN on certain through assciations, breaking multi-database preloading", "link": "https://github.com/rails/rails/issues/42716", "labels": ["\n                activerecord\n", "\n                regression\n", "\n                With reproduction steps\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4538843631744385, "creation_date": "2021-07-07T03:07:30Z", "issue_submitter": "qnighy", "body": "Steps to reproduce\nHere is the reproduction script:\nrequire 'bundler/inline'\n\ngemfile do\n  source 'https://rubygems.org'\n  gem 'activerecord', '6.0.4'  # error\n  # gem 'activerecord', '6.0.3.7'  # OK\n  gem 'sqlite3'\nend\n\nrequire 'active_record'\nrequire 'minitest'\nrequire 'logger'\nrequire 'tmpdir'\n\ntmpdir = Dir.mktmpdir\nat_exit { FileUtils.remove_entry tmpdir }\n\nmain_db = File.join(tmpdir, 'main.sqlite3')\nsub_db = File.join(tmpdir, 'sub.sqlite3')\nActiveRecord::Base.configurations = {\n  'default_env' => {\n    'primary' => {\n      'adapter' => 'sqlite3',\n      'database' => main_db\n    },\n    'sub' => {\n      'adapter' => 'sqlite3',\n      'database' => sub_db\n    }\n  }\n}\n\nActiveRecord::Base.logger = Logger.new(STDOUT)\n# ActiveRecord::Base.logger.level = 0\n\nActiveRecord::Base.establish_connection(:primary)\nActiveRecord::Schema.define do\n  create_table :users, force: true do |t|\n  end\n\n  create_table :posts, force: true do |t|\n    t.integer :user_id\n    t.datetime :created_at\n  end\nend\n\nActiveRecord::Base.establish_connection(:sub)\nActiveRecord::Schema.define do\n  create_table :post_images, force: true do |t|\n    t.integer :post_id\n    t.string :purpose\n  end\nend\n\n\nclass User < ActiveRecord::Base\n  has_many :posts\n\n  has_one :latest_post, -> { order(created_at: :desc) }, class_name: 'Post'\n  has_one :cover_image, through: :latest_post\nend\n\nclass Post < ActiveRecord::Base\n  belongs_to :user\n  has_many :post_images\n  has_one :cover_image, -> { where(purpose: 'cover_image') }, class_name: 'PostImage'\nend\n\nclass PostImage < ActiveRecord::Base\n  belongs_to :post\nend\n\nUser.establish_connection(:primary)\nPost.establish_connection(:primary)\nPostImage.establish_connection(:sub)\n\nclass BugTest < Minitest::Test\n  def test_foo\n    user = User.create!\n    post = user.posts.create!\n    post_image = post.post_images.create!(purpose: 'inline')\n    user = User.preload(:cover_image).find(user.id)\n    assert_nil user.cover_image\n  end\nend\nMinitest.autorun\nExpected behavior\nThe test passes.\nActual behavior\nThe test fails with exception ActiveRecord::StatementInvalid: SQLite3::SQLException: no such table: post_images.\nSystem configuration\nRails version: 6.0.4\nRuby version: 2.7.3\nBisection points to a415e80 from #39378.\nPreviously it preloaded the through association step by step. To load User#cover_image, it first loads User#latest_post and then Post#cover_image, allowing the latter to use WHERE .. IN loading strategy.\nAfter a415e80 it dispatches a query that directly loads User#cover_image. During the query's construction it demands to check post_image.purpose = 'cover_image', leading to a joined query.", "number_of_comments": 2, "comment_authors": ["qnighy", "ghiculescu"]},
{"title": "ETags don't take assets into account", "link": "https://github.com/rails/rails/issues/42544", "labels": ["\n                actionpack\n", "\n                pinned\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4958667755126953, "creation_date": "2021-06-20T20:29:39Z", "issue_submitter": "georgeclaghorn", "body": "Consider the below controller action, layout, and view:\nclass PostsController < ApplicationController\n  def show\n    @post = Post.find(params[:id])\n\n    fresh_when @post\n  end\nend\n<%# app/views/layouts/application.html.erb %>\n\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Sandbox</title>\n\n    <%= csrf_meta_tags %>\n    <%= csp_meta_tag %>\n\n    <%= stylesheet_link_tag \"application\" %>\n    <%= javascript_pack_tag \"application\" %>\n  </head>\n\n  <body>\n    <%= yield %>\n  </body>\n</html>\n<%# app/views/posts/show.html.erb %>\n\n<h1><%= @post.title %></h1>\n\n<%= @post.content %>\nNote the use of fresh_when in PostsController#show to set an ETag response header based on @post.\n\nVisit /posts/1, assuming a Post exists with ID 1.\nMake and deploy a change to the application stylesheet.\nReturn to the app. Navigate away from /posts/1 and back.\n\nYour browser will perform a conditional GET using the ETag from the response to the request in step 1. It’ll receive a 304 Not Modified response from the app, even though the application stylesheet’s fingerprint has changed.\nThe browser will then request the old stylesheet. Worst case: the old stylesheet doesn’t exist anymore, and the page may be rendered unstyled. Best case: it does still exist, but it contains the old styles.\nTo fix, we could incorporate asset fingerprints into ETags by default. Low-touch: incorporate all asset fingerprints into ETags for all cached HTML requests. More sophisticated: only assets explicitly linked from the view.", "number_of_comments": 15, "comment_authors": ["georgeclaghorn", "byroot", "georgeclaghorn", "rails-bot", "intrip", "rails-bot", "intrip", "rails-bot", "intrip", "rails-bot", "intrip", "rails-bot", "intrip", "rails-bot", "intrip"]},
{"title": "prepare statements is not enabled by default with mysql2 adapter", "link": "https://github.com/rails/rails/issues/42975", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9270682334899902, "creation_date": "2021-08-09T05:59:33Z", "issue_submitter": "khiav223577", "body": "Steps to reproduce\nIt took me a long time to figure out prepared_statements is disabled because of my database adapter is different in my new project. Change the adapter in database.yml, and you will find prepared_statements is enabled in sqlite3 and postgresql but is disabled in mysql2 by default (which was added in #23461).\nShould we make the default of prepared_statements be true (maybe in the next major rails version) to keep the behavior consistent? The feature was supported by mysql2 5 years ago, we should have confidence in it now.\nExpected behavior\nexpect prepared_statements is enabled by default with mysql2 adapter\nActual behavior\nprepared_statements is disabled by default only with mysql2 adapter\nSystem configuration\nRails version:\n6.0.3.7\nRuby version:\n2.7.2", "number_of_comments": 10, "comment_authors": ["khiav223577", "thdaraujo", "marcelolx", "thdaraujo", "thdaraujo", "stefannibrasil", "rails-bot", "soartec-lab", "matthewd", "thdaraujo"]},
{"title": "#with cannot be used with strings in 6.1", "link": "https://github.com/rails/rails/issues/42561", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4858851432800293, "creation_date": "2021-06-22T17:17:36Z", "issue_submitter": "dark-panda", "body": "Steps to reproduce\nUsing #with with strings instead of relations stopped working between Rails 6.0 and 6.1. Specifically, the following commit caused the break:\n596469d\nIn Rails 6.0, you could do things like\npopular_posts_from_cte = Post.with(\"popular_posts AS (SELECT * FROM posts WHERE views_count > 100)\").from(\"popular_posts AS posts\")\nHowever, that broke in Rails 6.1 with the following exception as there is no case to handle strings in the case statement:\nTypeError: no implicit conversion of nil into String\n\nA patch to fix the issue is forth coming.\nExpected behavior\nThe SQL should generate when strings are used in #with values.\nActual behavior\nA TypeError is raised.\nSystem configuration\nRails version: 6.1.3.2\nRuby version: 2.7.3", "number_of_comments": 7, "comment_authors": ["dark-panda", "HParker", "ghiculescu", "eileencodes", "HParker", "rafaelfranca", "dark-panda"]},
{"title": "ActiveRecord raises an ActiveRecord::UnknownAttributeReference error on order of a PostgreSQL json column", "link": "https://github.com/rails/rails/issues/43014", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.6335737705230713, "creation_date": "2021-08-14T22:57:06Z", "issue_submitter": "cveneziani", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\", branch: \"main\"\n  gem \"pg\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"postgresql\", encoding: \"unicode\", database: \"rails_debug\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  # ... for json datatype:\n  create_table :events, force: true do |t|\n    t.json 'payload'\n  end\n\n  # ... or for jsonb datatype:\n  # create_table :events, force: true do |t|\n  #   t.jsonb 'payload'\n  # end\nend\n\nclass Event < ActiveRecord::Base\nend\n\nclass BugTest < Minitest::Test\n  def test_json_unknown_attribute_reference\n    Event.create!(payload: { kind: \"user_renamed\", change: [\"jack\", \"john\"]})\n\n    # PASSING: taken from guides\n    assert_equal 1, Event.where(\"payload->>'kind' = ?\", \"user_renamed\").count\n\n    # FAILING\n    assert_equal 1, Event.order(\"payload->>'kind'\").count\n\n    # ActiveRecord::UnknownAttributeReference: Dangerous query method (method whose arguments are used as raw SQL) called with non-attribute argument(s): \"payload->>'kind'\".This method should not be called with user-provided values, such as request parameters or model attributes. Known-safe values can be passed by wrapping them in Arel.sql().\n\n    # PASSING: with Arel.sql\n    assert_equal 1, Event.order(Arel.sql(\"payload->>'kind'\")).count\n  end\nend\nExpected behavior\nCode used here is based on the Active Record and PostgreSQL guide, chapter 1.4 JSON and JSONB\nWe can use JSON documents without having to use Arel.sql in a where condition:\nEvent.where(\"payload->>'kind' = ?\", \"user_renamed\")\nWe could expect to use the same syntax for an order clause:\nEvent.order(\"payload->>'kind'\")\nActual behavior\nFor now, it raises an ActiveRecord::UnknownAttributeReference error:\nWe explicitly have to wrap it with Arel.sql:\nEvent.order(Arel.sql(\"payload->>'kind'\"))\nGiven the fact that it's not raising errors on where clauses, shouldn't it be possible to also directly use JSON documents in an order within having to wrap it?\nSystem configuration\nRails version: main branch\nRuby version: 2.7.2", "number_of_comments": 2, "comment_authors": ["cveneziani", "key88sf"]},
{"title": "Statements with timestamp should not be prepared even if prepared_statements is enabled in mysql2 adapter", "link": "https://github.com/rails/rails/issues/43005", "labels": ["\n                activerecord\n", "\n                pinned\n"], "depth": 9, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.6965599060058594, "creation_date": "2021-08-12T12:44:14Z", "issue_submitter": "khiav223577", "body": "When prepared_statements is enabled in mysql2 adapter, all the statements will be prepared even if the statement is not suitable for being prepared.\nFor example, the following code will create three prepare statements:\nUser.where(id: 1).where('created_at > ?', 1.day.ago)\nUser.where(id: 1).where('created_at > ?', 1.day.ago)\nUser.where(id: 1).where('created_at > ?', 1.day.ago)\n# See the prepared statements from mysql logs:\nActiveRecord::Base.connection.exec_query(“select event_time, argument from mysql.general_log where command_type = ‘Prepare’ order by event_time desc limit 10”).to_a.each{|s| puts s[‘argument’] } ; nil\n# =>\n# SELECT `users`.* FROM `users` WHERE `users`.`id` = ? AND (created_at > ‘2021-08-12 11:27:23.936650’)\n# SELECT `users`.* FROM `users` WHERE `users`.`id` = ? AND (created_at > ‘2021-08-12 11:26:34.254880’)\n# SELECT `users`.* FROM `users` WHERE `users`.`id` = ? AND (created_at > ‘2021-08-12 11:26:17.727167’)\nThe more times it gets executed, the more prepare statements are created.\nThe memory usage will keep growing until it reach the limit.\nMay be related to:\n\nPrepared statement eat lots of memories #14645\nRails prepared statement cache is extremely risky #21992\nAdd prepared statements support for Mysql2Adapter #23461\n\nSteps to reproduce\nMYSQL_DATABASE = 'xxxxx'\nMYSQL_USERNAME = 'xxxxx'\nMYSQL_PASSWORD = 'xxxxx'\nbegin\n  require 'bundler/inline'\nrescue LoadError => e\n  warn 'Bundler version 1.10 or later is required. Please update your Bundler'\n  raise e\nend\n\ngemfile(true) do\n  source 'https://rubygems.org'\n  gem 'activerecord', '~> 6.1.3'\n  gem 'mysql2', '~> 0.5.3'\n  gem 'mocha', '~> 1.13.0'\nend\n\nrequire 'active_record'\nrequire 'minitest/autorun'\n\nActiveRecord::Base.establish_connection(\n  'adapter'  => 'mysql2',\n  'database' => MYSQL_DATABASE,\n  'username' => MYSQL_USERNAME,\n  'password' => MYSQL_PASSWORD,\n  'host'     => '127.0.0.1',\n  'port'     => 3306,\n)\n\nActiveRecord::Schema.define do\n  create_table 'users', force: :cascade do |t|\n    t.timestamps\n  end\nend\n\nclass ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\nend\n\nclass User < ApplicationRecord\nend\n\nrequire 'mocha/minitest'\n\nclass BugTest < Minitest::Test\n  def setup\n    @connection = User.connection\n  end\n\n  def test_prepare\n    mock_stmt = mock('stmt')\n    mock_result = mock('result')\n    mock_stmt.expects(:execute).returns(mock_result)\n    mock_result.expects(:fields).returns([])\n    mock_result.expects(:to_a).returns([])\n    mock_result.expects(:free)\n\n    @connection.stubs(:prepared_statements).returns(true)\n    @connection.raw_connection.expects(:prepare).returns(mock_stmt)\n\n    User.where(id: 1).to_a\n  end\n\n  def test_stmt_no_prepare\n    @connection.stubs(:prepared_statements).returns(true)\n    @connection.raw_connection.expects(:prepare).never\n\n    User.where(id: 1).where('created_at > ?', 1.days.ago).to_a\n  end\n\n  def test_connection_no_prepare\n    @connection.stubs(:prepared_statements).returns(false)\n    @connection.raw_connection.expects(:prepare).never\n\n    User.where(id: 1).to_a\n  end\nend\nExpected behavior\nExpect Mysql2::Client#prepare to not be invoked in test_stmt_no_prepare test case.\nActual behavior\n# Running:\n\n..F\n\nFinished in 0.024949s, 120.2434 runs/s, 240.4867 assertions/s.\n\n  1) Failure:\nBugTest#test_stmt_no_prepare [/home/khiav/.rvm/gems/ruby-2.5.5/gems/activerecord-6.1.4/lib/active_record/connection_adapters/mysql/database_statements.rb:169]:\nunexpected invocation: #<Mysql2::Client:0x7fffe1902e58>.prepare(\"SELECT `users`.* FROM `users` WHERE `users`.`id` = ? AND (created_at > '2021-08-11 12:23:41.809169')\")\nunsatisfied expectations:\n- expected never, invoked once: #<Mysql2::Client:0x7fffe1902e58>.prepare(any_parameters)\nsatisfied expectations:\n- allowed any number of times, invoked 4 times: #<ActiveRecord::ConnectionAdapters::Mysql2Adapter:0x7fffe19018c8>.prepared_statements(any_parameters)\n\n\n3 runs, 6 assertions, 1 failures, 0 errors, 0 skips\n\nSystem configuration\nRails version:\n6.1.3\nRuby version:\nruby 2.5.5p157 (2019-03-15 revision 67260) [x86_64-linux]", "number_of_comments": 11, "comment_authors": ["khiav223577", "tenderlove", "byroot", "khiav223577", "khiav223577", "rails-bot", "eileencodes", "kamipo", "stefannibrasil", "byroot", "stefannibrasil"]},
{"title": "Postgres + ActiveRecord::Point uses invalid equal operator (= instead of ~=) on find_or_create_by()", "link": "https://github.com/rails/rails/issues/42268", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                PostgreSQL\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.964555025100708, "creation_date": "2021-05-21T20:01:09Z", "issue_submitter": "aforty", "body": "Steps to reproduce\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"6.1.3.2\"\n  gem \"pg\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"postgresql\", database: \"test-db\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :addresses, force: true do |t|\n    t.point :coordinates\n  end\nend\n\nclass Address < ActiveRecord::Base\nend\n\nclass BugTest < Minitest::Test\n  def test_nested_saving\n    address = Address.find_or_create_by!({ coordinates: ActiveRecord::Point.new(0, 0) })\n\n    assert address\n  end\nend\nExpected behavior\nI would expect it to use the correct ~= operator for comparison when a ActiveRecord::Point type is provided (explicitly or otherwise).\nActual behavior\nIt attempts to use the = operator for equality comparison which is invalid (https://www.postgresql.org/docs/13/functions-geometry.html)\nSystem configuration\nRails version: Rails 6.1.3.2\nRuby version: ruby 3.0.1p64 (2021-04-05 revision 0fb782ee38) [x86_64-darwin20]", "number_of_comments": 2, "comment_authors": ["aforty", "ghiculescu"]},
{"title": "ActionText uploads show as completed before the upload request completes", "link": "https://github.com/rails/rails/issues/42228", "labels": ["\n                actiontext\n", "\n                attached PR\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.976557731628418, "creation_date": "2021-05-14T19:04:02Z", "issue_submitter": "JasonBarnabe", "body": "When uploading an attachment using ActionText/trix, the progress bar in the trix control disappears after the data is finished sending, even if we're still waiting on the response to the upload request.\nIf you submit the form the trix control is on before the upload request is actually complete, the data for the upload will not be included in the form submission. (The issue is not so much that attachments whose requests aren't complete don't work when you submit, it's that the attachment appears to be done when it's not.)\nWhen uploading to S3, the \"waiting\" period is regularly multiple seconds for me, so essentially I have to wait ~5s after the upload UI shows it as done before I can submit the form.\nSteps to reproduce\nMonitor the browser dev tools while uploading an attachment using ActionText. Notice the progress bar goes away when the the request is done the \"sending\" phase, even though the request is not complete.\nYou can also override AttachmentUpload.directUploadWillStoreFileWithXHR to monitor this.\nimport { AttachmentUpload } from \"@rails/actiontext/app/javascript/actiontext/attachment_upload\"\n\nAttachmentUpload.prototype.directUploadWillStoreFileWithXHR = function(xhr) {\n  xhr.upload.addEventListener(\"progress\", event => {\n    console.log(Date.now() + \" \" + (event.loaded / event.total * 100))\n    const progress = event.loaded / event.total * 100\n    this.attachment.setUploadProgress(progress)\n  })\n  xhr.upload.addEventListener(\"load\", event => {\n    console.log(Date.now() + \" - completely done\")\n    this.attachment.setUploadProgress(100)\n  })\n}\n\n1621017610817 31.191174399098486\n1621017612622 100\n1621017618265 - completely done\n\nTimings as reported by Firefox:\nRequest Timing\nBlocked: -1 ms\nDNS Resolution: 0 ms\nConnecting: 0 ms\nTLS Setup: 0 ms\nSending: 1.81 s\nWaiting: 5.69 s\nReceiving: 0 ms\n\nAt timestamp 1621017612622, the progress bar disappears. If I submit the form in the 5 seconds between 1621017612622 and 1621017618265, my submission does not include the attachment.\nExpected behavior\nAttachment does not appear to complete until it actually is.\nActual behavior\nAttachment shows as complete once the upload phase of the request is complete.\nSystem configuration\nRails version: 6.1.3.2\nRuby version: 2.6.6\nWorkaround/fix\nOverride the method so that the \"progress\" event will never set the progress to 100, and add a \"load\" event listener to set it to 100 when complete.\nimport { AttachmentUpload } from \"@rails/actiontext/app/javascript/actiontext/attachment_upload\"\n\nAttachmentUpload.prototype.directUploadWillStoreFileWithXHR = function(xhr) {\n  xhr.upload.addEventListener(\"progress\", event => {\n    const progress = Math.min(event.loaded / event.total * 100, 99.9)\n    this.attachment.setUploadProgress(progress)\n  })\n  xhr.upload.addEventListener(\"load\", event => {\n    this.attachment.setUploadProgress(100)\n  })\n}", "number_of_comments": 1, "comment_authors": ["JasonBarnabe"]},
{"title": "InsertAll does not work with tables with overridden primary_key", "link": "https://github.com/rails/rails/issues/41848", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9935569763183594, "creation_date": "2021-04-06T06:35:05Z", "issue_submitter": "grk", "body": "Steps to reproduce\nIn our case, we have a partitioned table in postgres 12, which requires us to set self.primary_key = \"id\" in the model. Because of that, while Model.primary_key returns \"id\", ApplicationRecord.connection.schema_cache.primary_keys(Model.table_name) returns nil.\nExpected behavior\ninsert_all should keep working for this table after upgrading from 6.0.x to 6.1.3.1.\nActual behavior\ninsert_all fails with error\n     ArgumentError:\n       No unique index found for id\n     # /Users/grk/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/activerecord-6.1.3.1/lib/active_record/insert_all.rb:82:in `find_unique_index_for'\n     # /Users/grk/.asdf/installs/ruby/2.7.2/lib/ruby/gems/2.7.0/gems/activerecord-6.1.3.1/lib/active_record/insert_all.rb:25:in `initialize'\n\nIt seems that this is happening since 1af44e4#diff-3f89af7ff219385718b7c0e4635cc4190476349db18f8bf80fb84fa1e7f5e289R35, where the array of primary keys is taken from the schema cache instead of the model. Because of that, 1af44e4#diff-3f89af7ff219385718b7c0e4635cc4190476349db18f8bf80fb84fa1e7f5e289R64 does not pick up the case for inserting with uniqueness by primary key, as it compares [\"id\"] == [].\nI'd like to open a PR but I'm not sure what the correct solution would be. One approach would be to revert to the previous implementation of primary_keys. Another would be to change it to something like Array(connection.schema_cache.primary_keys(model.table_name)).presence || Array(model.primary_key).\nSystem configuration\nRails version: 6.1.3.1\nRuby version: 2.7.2", "number_of_comments": 3, "comment_authors": ["grk", "ghiculescu", "lsylvester"]},
{"title": "ActiveRecord::Relation #one? and #many? methods break when query contains a .group()", "link": "https://github.com/rails/rails/issues/41870", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9999797344207764, "creation_date": "2021-04-07T20:10:41Z", "issue_submitter": "mnacos", "body": "Steps to reproduce\nPlease use this gist: https://gist.github.com/mnacos/f81a2363d5e0ed925ff58e369690a9f3\nThis is not adapter-specific, I've reproduced with both postgres and sqlite.\nExpected behavior\nGiven:\n    post = Post.create!\n    post.comments << Comment.create!\n    post.comments << Comment.create!\n    relation = Post.joins(:comments).group('posts.id')\nYou'd expect:\n    relation.one? == true\n    relation.many? == false\nActual behavior\nInstead, we get:\n    relation.one? == false \n    relation.many? # throws TypeError: no implicit conversion of Integer into Hash\nThese methods rely on #size, which sometimes performs a #count, but #count on a query containing a .group() clause returns a Hash, e.g. {1=>1} if the query contains exactly one result.\nSystem configuration\nRails version: Edge\nRuby version: 2.7.1", "number_of_comments": 2, "comment_authors": ["mnacos", "mdemare"]},
{"title": "Cyclic has_one and belongs_to associations cause extra saves", "link": "https://github.com/rails/rails/issues/41701", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0091602802276611, "creation_date": "2021-03-19T12:27:51Z", "issue_submitter": "georgeclaghorn", "body": "Say we have two models, Post and Message, defined like so:\nclass Post < ApplicationRecord\n  belongs_to :postable, polymorphic: true, inverse_of: :post\nend\n\nclass Message < ApplicationRecord\n  has_one :post, as: :postable\nend\nPosts and messages are commonly created together:\npost = Post.create!(postable: Message.new(subject: \"Hello, world!\"))\nAfter the above, post.previously_new_record? should be true, per the docs:\n\nReturns true if this object was just created – that is, prior to the last save, the object didn't exist in the database and new_record? would have returned true.\n\nHowever, it is actually false on latest main (currently 6d38553). This is because:\n\nThe post autosaves its postable before_save (here).\nThe message autosaves its post after_create (here). The post is created here. Its @new_record flag is cleared and its @previously_new_record flag is set.\nThe post’s before_save callbacks complete and it is finally saved. It’s no longer a new_record? because of the save in step 2, so the save is treated as an update. The update clears the post’s @previously_new_record flag.\n\nThe issue boils down to the post being saved twice unnecessarily. It can be avoided by creating the message and post separately:\nmessage = Message.create!(subject: \"Foo\")\npost = Post.create!(postable: message)\nassert post.previously_new_record?\n…or by creating the post through the message:\nmessage = Message.create!(post: Post.new)\nassert message.post.previously_new_record?\n…or by removing the inverse_of option on the :postable association.\nBased on other workarounds that were needed in our app, I suspect the duplicate saving also affects updates and other per-save state (like previous_changes and changes_before_last_save).\nI’ve posted the obligatory reproduction script here.", "number_of_comments": 5, "comment_authors": ["georgeclaghorn", "p8", "p8", "p8", "f1sherman"]},
{"title": "Including a scoped has_many..through association breaks the SQL in 6.1", "link": "https://github.com/rails/rails/issues/41868", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.01198148727417, "creation_date": "2021-04-07T09:54:41Z", "issue_submitter": "virolea", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  # git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", \"6.1.0\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n  end\n\n  create_table :comment_artefacts, force: true do |t|\n    t.integer :comment_id\n    t.integer :artefact_id\n  end\n\n  create_table :artefacts, force: true do |t|\n    t.string :type\n    t.integer :rank\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\n  has_many :comment_artefacts\n  has_many :artefacts, through: :comment_artefacts\n  has_many :photos, through: :comment_artefacts, source: :artefact, class_name: \"PhotoArtefact\"\n  has_many :articles, -> { order(:rank) },  through: :comment_artefacts, source: :artefact, class_name: \"ArticleArtefact\"\nend\n\nclass CommentArtefact < ActiveRecord::Base\n  belongs_to :comment\n  belongs_to :artefact\nend\n\nclass Artefact < ActiveRecord::Base\nend\n\nclass PhotoArtefact < Artefact\nend\n\nclass ArticleArtefact < Artefact\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    post = Post.create!\n    comment = post.comments.create!\n    comment.photos << PhotoArtefact.create!(rank: 0)\n    comment.articles << ArticleArtefact.create!(rank: 1)\n\n    assert_equal 1, comment.photos.count\n    assert_equal 1, comment.articles.count\n\n    c = Comment.includes(:articles, :photos, :artefacts).find_by(id: 1)\n    assert_equal 1, c.photos.pluck(:id).length # ⬅️ breaking test\n  end\nend\nExpected behavior\nThe associations should return the correct type of Single-Table-Inherited class and not the unscoped base class. Considering the example above, it should yield :\ncomment = Comment.includes(:articles, :photos, :artefacts).find_by(id: 1)\ncomment.photos.pluck(:id) # => returns a an array with the unique photo id: [1]\nActual behavior\nThe association returns all artefacts, independently of the STI class used :\ncomment = Comment.includes(:articles, :photos, :artefacts).find_by(id: 1)\ncomment.photos.pluck(:id) # => returns a an array all artefacs id for that comment:  [1, 2]\nℹ️ if I remove the scope used for the articles association { order(:rank) }, it works again. Il also works for Rails versions prior to 6.1. It works with rails 6.1 if I move the scoped association at the end of the includes list.\nSystem configuration\nRails version: 6.1.3\nRuby version: 2.6.6", "number_of_comments": 11, "comment_authors": ["virolea", "intrip", "rails-bot", "intrip", "virolea", "rails-bot", "intrip", "rails-bot", "intrip", "rails-bot", "intrip"]},
{"title": "Rails bi-directional accepts_nested_attributes_for leads to unexpected validation result", "link": "https://github.com/rails/rails/issues/41811", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0219783782958984, "creation_date": "2021-03-31T14:55:36Z", "issue_submitter": "rsalehi2013", "body": "Steps to reproduce\nscript: https://gist.github.com/rsalehi2013/7cf9c458af9923bcd3e2f3053cefcc55\nSetup\nMigration:\ncreate_table :posts do |t|\n  t.string :title\nend\n\ncreate_table :comments do |t|\n  t.integer :post_id\n  t.string :body\nend\n\npost.rb\nclass Post < ActiveRecord::Base\n  has_many :comments, inverse_of: :post\n  accepts_nested_attributes_for :comments\n\n  validates :title, presence: true\nend\n\ncomment.rb\nclass Comment < ActiveRecord::Base\n  belongs_to :post, inverse_of: :comments\n  accepts_nested_attributes_for :post\n  \n  validates :body, presence: true\nend\n\nProcedure\npost = Post.new(title: 'foo', comments_attributes: [{body: 'bar'}, {body: nil}, {body: 'baz'}])\npost.valid?\npost.errors\nExpected behavior\nvalid? -> false\nerrors -> @messages={:\"comments.body\"=>[\"can't be blank\"]}, @details={:\"comments.body\"=>[{:error=>:blank}]}\nuser is prevented from persisting to the database\nActual behavior\nvalid? -> true\nerrors -> @messages={}, @details={}\nuser is able to persist the invalid records to the database\nNOTE: if the invalid comments attribute is at the end of the comments_attributes list, or if there is only one item in the comments_attributes list, the post is correctly marked as invalid\nSystem configuration\nRails version: Rails 5.2.4.5\nRuby version: ruby 2.5.8p224 (2020-03-31 revision 67882) [x86_64-linux]", "number_of_comments": 12, "comment_authors": ["rsalehi2013", "intrip", "rsalehi2013", "intrip", "intrip", "rails-bot", "intrip", "Dwimcore", "intrip", "Dwimcore", "donquxiote", "goulvench"]},
{"title": "Active Storage add download_chunk for blob", "link": "https://github.com/rails/rails/issues/41346", "labels": ["\n                activestorage\n", "\n                attached PR\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.408961296081543, "creation_date": "2021-02-05T16:18:52Z", "issue_submitter": "psoldier", "body": "With active storage you cannot get chunks directly from the attached file. You can access to the download_chunk using a different path. For ex:\nclass Movie\n  has_one_attached :video\nend\n\nmovie = Movie.where(name: \"Star Wars: Episode IV - A New Hope\").first\nchunk = movie.video.service.download_chunk(movie.video.key, 0..5.megabytes)\nExpected behavior\nIt would be better to delegate that functionality to the blob instance. In that way we could do something like:\nchunk = movie.video.download_chunk(0..10.megabytes)\nOn the other side, when you have to process a block of code for large files (10GB for example) in chunks of 5MB, there is always the possibility of an execution error. I think it could be helpful to have the ability to iterate over the chunks by index. In that way if your file processing fails after 9GB, you can restart from there instead of re-process 90% of the file.\nmovie.video.download_with_index(last_successfully_processed_chunk_index) do |chunk, index|\n  ...\n  last_successfully_processed_chunk_index = index\nend", "number_of_comments": 4, "comment_authors": ["psoldier", "psoldier", "rails-bot", "rails-bot"]},
{"title": "Parallel-testing test-run raises Bad file descriptor (Errno::EBADF) using MySQL 8.0", "link": "https://github.com/rails/rails/issues/41176", "labels": ["\n                activerecord\n", "\n                parallel testing\n", "\n                pinned\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.412961483001709, "creation_date": "2021-01-19T18:34:24Z", "issue_submitter": "johnmaxwell", "body": "See below: The issue can also be worked around by compiling the mysql2 gem using the mysql 5.7 client: #41176 (comment)\nUpdated to reflect that the issue also exists under apps using Rails 6.1.1 and rails/rails. https://github.com/johnmaxwell/parallelmysql61\nWe updated an application to Rails 6.0.3.4 and configured it to use parallel tests. This application uses MySQL 8.0. Our team uses Macs for our development machines, and MySQL 8.0 is installed via Homebrew with little-to-no customization.\nWhen running the test-suite in parallel with two or more workers, the tests will raise an error: Bad file descriptor (Errno::EBADF)  part way through the run. It's unclear what causes this issue since the exception originates from drb/drb.rb.\nWe've tweaked the gems and poked and prodded at this application in an attempt to fix the problem to no avail. The only \"fix\" is to run the tests serially by changing test_helper.rb or using PARALLEL_WORKERS=1 when running the test suite. This is advice that you usually find on StackOverflow when searching for this problem.\nSteps to reproduce\nWe have reproduced this issue in a stock Rails 6.0.3.4 application connecting to a MySQL 8.0 database: https://github.com/johnmaxwell/parallelmysql\nThis simple Rails application was generated with the following commands:\nrails new parallelmysql -d mysql\n./bin/rails db:create \n./bin/rails g model User name:string\n./bin/rails db:migrate\n\nWe give test/models/user_test.rb the following content. This gives us a bunch of time-consuming tests for the parallel test suite to run.\nrequire 'test_helper'\n\nclass UserTest < ActiveSupport::TestCase\n  200.times do |i|\n    test \"test-case ##{i}: creates #{i} records\" do\n      i.times do\n        User.create!(name: SecureRandom.alphanumeric(20))\n      end\n      assert_equal i, User.count\n    end\n  end\nend\nExpected behavior\nRunning the tests with the following command should run the test suite to completion using 2 test workers. PARALLEL_WORKERS=2 ./bin/rails test\nActual behavior\nThe tests suite fails without running to completion with the following output:\n$ PARALLEL_WORKERS=2 ./bin/rails test\nRunning via Spring preloader in process 9204\nRun options: --seed 6137\n\n# Running:\n\n......#<Thread:0x00007ffcb81416c8 /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1259 run> terminated with exception (report_on_exception is true):\nTraceback (most recent call last):\n\t10: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1262:in `block in make_pool'\n\t 9: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1237:in `_execute'\n\t 8: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/monitor.rb:202:in `mon_synchronize'\n\t 7: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/monitor.rb:202:in `synchronize'\n\t 6: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1239:in `block in _execute'\n\t 5: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1268:in `block (2 levels) in make_pool'\n\t 4: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1268:in `each'\n\t 3: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1270:in `block (3 levels) in make_pool'\n\t 2: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1334:in `alive?'\n\t 1: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1002:in `alive?'\n/Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1002:in `wait_readable': Bad file descriptor (Errno::EBADF)\n#<Thread:0x00007ffcb81416c8 /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1259 run> terminated with exception (report_on_exception is true):\nTraceback (most recent call last):\n\t10: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1262:in `block in make_pool'\n\t 9: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1237:in `_execute'\n\t 8: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/monitor.rb:202:in `mon_synchronize'\n\t 7: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/monitor.rb:202:in `synchronize'\n\t 6: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1239:in `block in _execute'\n\t 5: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1268:in `block (2 levels) in make_pool'\n\t 4: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1268:in `each'\n\t 3: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1270:in `block (3 levels) in make_pool'\n\t 2: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1334:in `alive?'\n\t 1: from /Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1002:in `alive?'\n/Users/john/.rbenv/versions/2.7.2/lib/ruby/2.7.0/drb/drb.rb:1002:in `wait_readable': Bad file descriptor (Errno::EBADF)\n\nSystem configuration\nRails version: 6.0.3.4, 6.1.1 & rails/rails:e8d7181ad6fd040b60c25752c1a60d939e4a8505\nRuby version: 2.7.2p137\nMySQL version: 8.0.22, 8.0.23\nMacOS versions: 10.15.7", "number_of_comments": 12, "comment_authors": ["johnmaxwell", "fatkodima", "johnmaxwell", "johnmaxwell", "dmcbrayer", "fatkodima", "johnmaxwell", "rails-bot", "eileencodes", "johnmaxwell", "milgner", "jgloudon"]},
{"title": "ActiveRecord#includes gives different results if the includes order is different.", "link": "https://github.com/rails/rails/issues/41378", "labels": ["\n                attached PR\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4129815101623535, "creation_date": "2021-02-09T06:44:29Z", "issue_submitter": "github0013", "body": "Steps to reproduce\nI prepared a repo.\nhttps://github.com/github0013/activerecord-includes\nExpected behavior\nSwitching the order in #includes should not change the results. (please see the repo)\n\nA.includes(:c_type_xs, :ds).find(subject.id).c_type_xs.size # => 1\nA.includes(:ds, :c_type_xs).find(subject.id).c_type_xs.size # => 1\n\nActual behavior\n\nA.includes(:c_type_xs, :ds).find(subject.id).c_type_xs.size # => 1\nA.includes(:ds, :c_type_xs).find(subject.id).c_type_xs.size # => 4\n\nSystem configuration\nRails version:\n\n5.2.4.1\n6.1.1\n\nRuby version:\n\nruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c) [x86_64-linux-musl]", "number_of_comments": 16, "comment_authors": ["github0013", "intrip", "intrip", "intrip", "github0013", "intrip", "intrip", "rails-bot", "github0013", "intrip", "Reedlee", "github0013", "intrip", "Reedlee", "intrip", "Reedlee"]},
{"title": "Duplicate escaping of quotes in check constraint expressions (MySQL)", "link": "https://github.com/rails/rails/issues/42424", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4574174880981445, "creation_date": "2021-06-08T16:48:12Z", "issue_submitter": "Flixt", "body": "Steps to reproduce\nWith a check constraint in the (MySQL) database and the Rails project set to use the schema.rb format I end up with duplicate escape sequences for quotes in the expression of the check constraint.\n\nAdd a migration that adds a check constraints with an expression that includes quotes.\nRun the migration (it runs fine)\nCheck the generated schema.rb\nThe generated schema.rb contains duplicate escaping for the quotes in the check constraint expression\nTrying to load the schema rails db:schema:load leads to an SQL syntax error\n\nHere is an executable version of the problem (I used MySQLVer 8.0.23 for osx10.15 on x86_64):\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"activerecord\", \"~> 6.1.3\"\n  gem \"mysql2\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\nActiveRecord::Base.establish_connection(\n  adapter: \"mysql2\",\n  database: 'check_constraint_schema_dump_bug',\n  charset: 'utfmb4',\n  encoding: 'utf8mb4',\n  collation: 'utf8mb4_unicode_ci',\n  username: ENV.fetch(\"MYSQL_USERNAME\") { \"rails\" },\n  password: ENV.fetch(\"MYSQL_PASSWORD\") { \"\" },\n  host: ENV.fetch(\"MYSQL_HOST\") { \"127.0.0.1\" },\n  port: ENV.fetch(\"MYSQL_PORT\") { 3306 }\n)\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.string :title\n    t.check_constraint \"(title <> 'forbidden_title')\"\n  end\nend\n\nclass BugTest < Minitest::Test\n  def test_adapter_check_constraint_quoting\n    expected = %q(`title` <> _utf8mb4'forbidden_title')\n\n    assert_equal ActiveRecord::Base.connection.check_constraints('posts').first.expression, expected\n  end\n\n  def test_schema_dumper_not_including_wrong_quotes\n    dumped_schema = ActiveRecord::SchemaDumper.dump(ActiveRecord::Base.connection, StringIO.new).string\n\n    wrong = %q(t.check_constraint \"`title` <> _utf8mb4\\\\\\\\'forbidden_title\\\\\\\\'\")\n    refute_includes dumped_schema, wrong\n  end\n\n  def test_schema_dumper_including_correct_quotes\n    dumped_schema = ActiveRecord::SchemaDumper.dump(ActiveRecord::Base.connection, StringIO.new).string\n\n    expected = %q(t.check_constraint \"`title` <> _utf8mb4'forbidden_title'\")\n    assert_includes dumped_schema, expected\n  end\nend\nExpected behavior\nE.g. a migration like this:\ncreate_table :posts, force: true do |t|\n  t.string :title\n  t.check_constraint \"(title <> 'forbidden_title')\"\nend\nshould generate a schema like that:\ncreate_table \"posts\", charset: \"utf8mb4\", force: :cascade do |t|\n  t.string \"title\"\n  t.check_constraint \"`title` <> _utf8mb4'forbidden_title'\"\nend\nActual behavior\nIt generates a schema like this:\ncreate_table \"posts\", charset: \"utf8mb4\", force: :cascade do |t|\n  t.string \"title\"\n  t.check_constraint \"`title` <> _utf8mb4\\\\'forbidden_title\\\\'\" # <-- Notice the slashes\nend\nSystem configuration\nRails version: 6.1.3.2\nRuby version: 2.6.3\nPotential fix\nI created a monkey patch which fixes the issue for my project locally:\nmodule ActiveRecord\n  module ConnectionAdapters\n    class AbstractMysqlAdapter\n      def check_constraints(table_name)\n        if supports_check_constraints?\n          scope = quoted_scope(table_name)\n\n          chk_info = exec_query(<<~SQL, \"SCHEMA\")\n            SELECT cc.constraint_name AS 'name',\n                  cc.check_clause AS 'expression'\n            FROM information_schema.check_constraints cc\n            JOIN information_schema.table_constraints tc\n            USING (constraint_schema, constraint_name)\n            WHERE tc.table_schema = #{scope[:schema]}\n              AND tc.table_name = #{scope[:name]}\n              AND cc.constraint_schema = #{scope[:schema]}\n          SQL\n\n          chk_info.map do |row|\n            options = {\n              name: row[\"name\"]\n            }\n            expression = row[\"expression\"].gsub(\"\\\\'\", \"'\") # <-- replace duplicate escaping\n            expression = expression[1..-2] unless mariadb? # remove parentheses added by mysql\n            CheckConstraintDefinition.new(table_name, expression, options)\n          end\n        else\n          raise NotImplementedError\n        end\n      end\n    end\n  end\nend\nIf this goes into the right direction I'd open up a pull request and write the corresponding tests.\nDiff: https://github.com/rails/rails/compare/main...Flixt:fix-mysql-check-constraints-quoting?expand=1", "number_of_comments": 8, "comment_authors": ["Flixt", "rafaelfranca", "Flixt", "Flixt", "brunodccarvalho", "skipkayhil", "Flixt", "povilasjurcys"]},
{"title": "Accessing request.params breaks parameter encoding validation", "link": "https://github.com/rails/rails/issues/42278", "labels": ["\n                actionpack\n", "\n                pinned\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4750726222991943, "creation_date": "2021-05-24T07:26:39Z", "issue_submitter": "fxn", "body": "Given a controller:\nclass FooController < ApplicationController\n  skip_parameter_encoding :index\n  skip_before_action :verify_authenticity_token\n\n  def index\n    head :ok\n  end\nend\nparameters in the index action should be able to carry any payload. For example, this should work\nrequire \"net/http\"\n\nuri = URI(\"http://localhost:3000\")\nNet::HTTP.post_form(uri, \"foo\" => \"\\xe1\") # Invalid UTF-8.\nand it does.\nHowever, a middleware as innocent as\nclass FooMiddleware\n  def initialize(app)\n    @app = app\n  end\n\n  def call(env)\n    request = ActionDispatch::Request.new(env)\n    request.params\n    @app.call(request.env)\n  end\nend\ninterferes somehow with parameter encoding validation, and the request now raises\nActionController::BadRequest (Invalid request parameters: Invalid encoding for parameter: �)", "number_of_comments": 28, "comment_authors": ["fxn", "fxn", "jhawthorn", "fxn", "adrianna-chang-shopify", "fxn", "fxn", "adrianna-chang-shopify", "fxn", "rafaelfranca", "fxn", "fxn", "adrianna-chang-shopify", "fxn", "raldred", "adrianna-chang-shopify", "rafaelfranca", "KSH-code", "raldred", "KSH-code", "rails-bot", "abury", "rahul342", "abury", "raldred", "rahul342", "raldred", "rahul342"]},
{"title": "query method #eager_loading? works incorrectly when order by sql contains table name with schema", "link": "https://github.com/rails/rails/issues/42331", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4565637111663818, "creation_date": "2021-05-31T15:20:25Z", "issue_submitter": "senid231", "body": "Steps to reproduce\nHere's bug report which reproduces the issue\n# frozen_string_literal: true\n\nrequire 'bundler/inline'\n\ngemfile(true) do\n  source 'https://rubygems.org'\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  if ENV['RAILS_EDGE']\n    gem 'rails', github: 'rails/rails', branch: 'main'\n  else\n    version = ENV['RAILS_VERSION'] || '~> 6.0'\n    gem 'rails', version\n  end\n  gem 'pg'\nend\n\nrequire 'active_record'\nrequire 'minitest/autorun'\nrequire 'logger'\n\n# Keep note: modify below three lines according to your postgresql server configurations\n`psql -c \"DROP DATABASE IF EXISTS test_rails_references_values;\"`\n`psql -c \"CREATE DATABASE test_rails_references_values;\"`\nActiveRecord::Base.establish_connection(adapter: 'postgresql', database: 'test_rails_references_values')\nActiveRecord::Base.logger = Logger.new($stdout)\n\nActiveRecord::Schema.define do\n  create_schema 'shop'\n\n  create_table 'posts', force: true do |t|\n    t.string :title\n    t.string :content\n  end\n\n  create_table 'post_details', force: true do |t|\n    t.integer :post_id\n    t.string :summary\n  end\n\n  create_table 'shop.posts', force: true do |t|\n    t.string :title\n    t.string :content\n  end\n\n  create_table 'shop.post_details', force: true do |t|\n    t.integer :post_id\n    t.string :summary\n  end\nend\n\nclass ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\nend\n\nclass Post < ApplicationRecord\n  self.table_name = 'posts'\n  has_one :post_detail, class_name: 'PostDetail', dependent: :delete\nend\n\nclass PostDetail < ApplicationRecord\n  self.table_name = 'post_details'\n  belongs_to :post\nend\n\nclass ShopPost < ApplicationRecord\n  self.table_name = 'shop.posts'\n  has_one :post_detail, class_name: 'PostDetail', dependent: :delete\nend\n\nclass ShopPostDetail < ApplicationRecord\n  self.table_name = 'shop.post_details'\n  belongs_to :post\nend\n\nclass BugTest < Minitest::Test\n  def test_references_values_without_schema_when_order\n    query_reorder = Post.includes(:post_detail).order(Arel.sql('posts.id DESC'))\n\n    refute query_reorder.eager_loading?\n    refute query_reorder.send(:references_eager_loaded_tables?)\n\n    assert_equal [Post.table_name], query_reorder.references_values\n  end\n\n  def test_references_values_with_schema_when_order\n    query_reorder = ShopPost.includes(:post_detail).order(Arel.sql('shop.posts.id DESC'))\n\n    refute query_reorder.eager_loading?\n    refute query_reorder.send(:references_eager_loaded_tables?)\n\n    assert_equal [ShopPost.table_name], query_reorder.references_values\n  end\nend\nExpected behavior\nfor query like  ShopPost.includes(:post_detail).order(Arel.sql('shop.posts.id DESC')) #eager_load? should return false.\nAs result includes should not eager loaded because when are not present in where/order clauses.\nActual behavior\nfor query like  ShopPost.includes(:post_detail).order(Arel.sql('shop.posts.id DESC')) #eager_load? returns false.\nAs result includes always eager loaded.\nSystem configuration\nRails version: 6.1.3.2, 5.2.6, edge 509f3ca\nRuby version: 2.7.3\nPostgreSQL: 12\nAdditional information\nThis bug has big performance impact on calculations like\nShopPost.includes(:post_detail).order(Arel.sql('shop.posts.id DESC')).count\nwhen many associations are included, because it transforms into SELECT COUNT(DISTINCT ...\nIn ActiveAdmin resources always apply sort as strings which leads to slow queries for all tables which have table schema.", "number_of_comments": 10, "comment_authors": ["senid231", "zzak", "intrip", "intrip", "rails-bot", "intrip", "rails-bot", "intrip", "rails-bot", "intrip"]},
{"title": "Inconsistent behavior of dependent: :destroy_async for  thehas_many association", "link": "https://github.com/rails/rails/issues/42430", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4539737701416016, "creation_date": "2021-06-09T11:33:37Z", "issue_submitter": "smt116", "body": "Steps to reproduce\n\n\nGenerate a new application:\nrails new AsyncDestroyTestApp --skip-action-mailer --skip-action-mailbox --skip-action-text --skip-active-storage --skip-action-cable --skip-sprockets --skip-spring --skip-listen --skip-javascript --skip-turbolinks --skip-jbuilder --skip-test --skip-system-test --skip-bootsnap\n\n\n\nApply the following diff (add models):\ndiff --git a/app/models/book.rb b/app/models/book.rb\nnew file mode 100644\nindex 0000000..f1e2a65\n--- /dev/null\n+++ b/app/models/book.rb\n@@ -0,0 +1,3 @@\n+class Book < ApplicationRecord\n+  has_many :tags, dependent: :destroy_async\n+end\ndiff --git a/app/models/tag.rb b/app/models/tag.rb\nnew file mode 100644\nindex 0000000..7b23605\n--- /dev/null\n+++ b/app/models/tag.rb\n@@ -0,0 +1,2 @@\n+class Tag < ApplicationRecord\n+end\ndiff --git a/db/migrate/20210609112034_add_books_and_tags.rb b/db/migrate/20210609112034_add_books_and_tags.rb\nnew file mode 100644\nindex 0000000..baed2c0\n--- /dev/null\n+++ b/db/migrate/20210609112034_add_books_and_tags.rb\n@@ -0,0 +1,8 @@\n+class AddBooksAndTags < ActiveRecord::Migration[6.1]\n+  def change\n+    create_table :books\n+    create_table :tags do |t|\n+      t.references :book, foreign_key: true, null: true\n+    end\n+  end\n+end\ndiff --git a/db/schema.rb b/db/schema.rb\nnew file mode 100644\nindex 0000000..fca4c69\n--- /dev/null\n+++ b/db/schema.rb\n@@ -0,0 +1,24 @@\n+# This file is auto-generated from the current state of the database. Instead\n+# of editing this file, please use the migrations feature of Active Record to\n+# incrementally modify your database, and then regenerate this schema definition.\n+#\n+# This file is the source Rails uses to define your schema when running `bin/rails\n+# db:schema:load`. When creating a new database, `bin/rails db:schema:load` tends to\n+# be faster and is potentially less error prone than running all of your\n+# migrations from scratch. Old migrations may fail to apply correctly if those\n+# migrations use external dependencies or application code.\n+#\n+# It's strongly recommended that you check this file into your version control system.\n+\n+ActiveRecord::Schema.define(version: 2021_06_09_112034) do\n+\n+  create_table \"books\", force: :cascade do |t|\n+  end\n+\n+  create_table \"tags\", force: :cascade do |t|\n+    t.integer \"book_id\"\n+    t.index [\"book_id\"], name: \"index_tags_on_book_id\"\n+  end\n+\n+  add_foreign_key \"tags\", \"books\"\n+end\n\n\nExpected behavior\nConsistent behavior when removing records asynchronously via passing a new list to the has_many association (replacing). When you delete an object using parent.has_many_attr.first.destroy!, Active Record will update the child's foreign key to nil and schedule a job to delete an associated record from the database. However, when you will replace the \"has many\" association and delete the child (using parent.update!(has_many_attr: [])) it will only update the foreign key. It won't actually cleanup them from the database:\nirb(main):001:0> book = Book.create!(tags: [Tag.new, Tag.new])\n   (2.4ms)  SELECT sqlite_version(*)\n  TRANSACTION (0.1ms)  begin transaction\n  Book Create (1.4ms)  INSERT INTO \"books\" DEFAULT VALUES\n  Tag Create (1.2ms)  INSERT INTO \"tags\" (\"book_id\") VALUES (?)  [[\"book_id\", 1]]\n  Tag Create (0.2ms)  INSERT INTO \"tags\" (\"book_id\") VALUES (?)  [[\"book_id\", 1]]\n  TRANSACTION (2.1ms)  commit transaction\n=> #<Book:0x00007fcfa24c0c60 id: 1>\nirb(main):002:0> Tag.all\n  Tag Load (0.3ms)  SELECT \"tags\".* FROM \"tags\"\n=> [#<Tag:0x00007fcfa258a420 id: 1, book_id: 1>, #<Tag:0x00007fcfa258a2b8 id: 2, book_id: 1>]\nirb(main):003:0> book.tags.last.destroy!\n  TRANSACTION (0.1ms)  begin transaction\n  Tag Destroy (0.8ms)  DELETE FROM \"tags\" WHERE \"tags\".\"id\" = ?  [[\"id\", 2]]\n  TRANSACTION (1.5ms)  commit transaction\n=> #<Tag:0x00007fcfa24c31b8 id: 2, book_id: 1>\nirb(main):004:0> Tag.all\n  Tag Load (0.2ms)  SELECT \"tags\".* FROM \"tags\"\n=> [#<Tag:0x00007fcfa26c37b0 id: 1, book_id: 1>]\nirb(main):005:0> book.update!(tags: [])\n  TRANSACTION (0.1ms)  begin transaction\n  Tag Update All (1.0ms)  UPDATE \"tags\" SET \"book_id\" = ? WHERE \"tags\".\"book_id\" = ? AND \"tags\".\"id\" IN (?, ?)  [[\"book_id\", nil], [\"book_id\", 1], [nil, 1], [nil, 2]]\n  TRANSACTION (1.5ms)  commit transaction\n=> true\nirb(main):006:0> Tag.all\n  Tag Load (0.2ms)  SELECT \"tags\".* FROM \"tags\"\n=> [#<Tag:0x00007fcfa25288b0 id: 1, book_id: nil>]\nirb(main):007:0> book.update!(tags: [Tag.new])\n  TRANSACTION (0.1ms)  begin transaction\n  Tag Create (1.2ms)  INSERT INTO \"tags\" (\"book_id\") VALUES (?)  [[\"book_id\", 1]]\n  TRANSACTION (9.4ms)  commit transaction\n=> true\nirb(main):008:0> Tag.all\n  Tag Load (0.3ms)  SELECT \"tags\".* FROM \"tags\"\n=> [#<Tag:0x00007fcfa2e5b3d8 id: 1, book_id: nil>, #<Tag:0x00007fcfa2e5b310 id: 3, book_id: 1>]\nNote that the tag with id = 1 is still there while Active Record should clean it up after calling book.update!(tags: []).\nActual behavior\nInconsistent behavior when replacing \"has many\" association (deleting some records asynchronously). Associated records are updated with the null value for the foreign key when replacing the association as the whole, but there are no delete jobs scheduled.\nNote that using dependant: :destroy works as expected:\nirb(main):001:0> book = Book.create!(tags: [Tag.new, Tag.new])\n   (1.2ms)  SELECT sqlite_version(*)\n  TRANSACTION (0.1ms)  begin transaction\n  Book Create (1.3ms)  INSERT INTO \"books\" DEFAULT VALUES\n  Tag Create (0.4ms)  INSERT INTO \"tags\" (\"book_id\") VALUES (?)  [[\"book_id\", 1]]\n  Tag Create (0.3ms)  INSERT INTO \"tags\" (\"book_id\") VALUES (?)  [[\"book_id\", 1]]\n  TRANSACTION (1.6ms)  commit transaction\n=> #<Book:0x00007fd0d6be2e78 id: 1>\nirb(main):002:0> book.update!(tags: [])\n  TRANSACTION (0.1ms)  begin transaction\n  Tag Destroy (1.3ms)  DELETE FROM \"tags\" WHERE \"tags\".\"id\" = ?  [[\"id\", 1]]\n  Tag Destroy (0.4ms)  DELETE FROM \"tags\" WHERE \"tags\".\"id\" = ?  [[\"id\", 2]]\n  TRANSACTION (10.0ms)  commit transaction\n=> true\nirb(main):003:0> Tag.all\n  Tag Load (0.3ms)  SELECT \"tags\".* FROM \"tags\"\n=> []\nirb(main):004:0>\nSystem configuration\nRails version: 6.1.3.2\nRuby version: 3.0.1", "number_of_comments": 10, "comment_authors": ["smt116", "ghiculescu", "smt116", "smt116", "rails-bot", "smt116", "rails-bot", "smt116", "rails-bot", "smt116"]},
{"title": "Delegated Type associations do not cascade", "link": "https://github.com/rails/rails/issues/42387", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4633982181549072, "creation_date": "2021-06-04T10:17:53Z", "issue_submitter": "ball-hayden", "body": "Steps to reproduce\nConsider the following:\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  gem \"rails\", \"~> 6.1\"\n  gem \"sqlite3\", platform: :mri\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\n\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :authors, force: true do |t|\n    t.string :name\n  end\n\n  create_table :books, force: true do |t|\n    t.references :author, null: false\n    t.references :book_details, polymorphic: true, null: false\n    t.string :title\n  end\n\n  create_table :nonfiction_books, force: true do |t|\n    t.string :subject_area, null: false\n  end\nend\n\nclass Author < ActiveRecord::Base\n  has_many :books, inverse_of: :author\nend\n\nclass Book < ActiveRecord::Base\n  belongs_to :author, inverse_of: :books\n\n  delegated_type :book_details, types: %w[NonfictionBook], dependent: :destroy\nend\n\nclass NonfictionBook < ActiveRecord::Base\n  has_one :book, as: :book_details\n  has_one :author, through: :book\nend\n\nclass BugTest < Minitest::Test\n  def test_nonfiction_book_has_author\n    author = Author.new(name: \"Author\")\n    book = Book.new(author: author, title: \"Book\")\n    nonfiction_book = NonfictionBook.new(book: book, subject_area: \"Ruby on Rails\")\n\n    assert_equal book.author, author\n    assert_equal nonfiction_book.author, author\n  end\nend\nExpected behavior\nHaving assigned an author to the book, I expect to be able to ask the book details about its author.\nActual behavior\nThe book's details have a nil author.\nSystem configuration\nRails version: \"~> 6.1\"\nRuby version: \"ruby 3.0.1p64 (2021-04-05 revision 0fb782ee38) [x86_64-darwin20]\"", "number_of_comments": 8, "comment_authors": ["ball-hayden", "ghiculescu", "ball-hayden", "ghiculescu", "zzak", "intrip", "ghiculescu", "intrip"]},
{"title": "ActiveStorage blobs can be attached using their \"displayable\" signed IDs", "link": "https://github.com/rails/rails/issues/41413", "labels": ["\n                activestorage\n", "\n                attached PR\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.6041510105133057, "creation_date": "2021-02-11T19:48:32Z", "issue_submitter": "julik", "body": "Steps to reproduce\nActiveStorage blobs currently use signed IDs. The purpose however is always the same (blob_id). When uploading a Blob through the direct_upload endpoint, a user gets the same signed ID for a Blob as the one that is later used for attaching a Blob to a model through Attached - see \n\n\nrails/activestorage/app/controllers/active_storage/direct_uploads_controller.rb\n\n\n         Line 18\n      in\n      bddb2c9\n\n\n\n\n\n\n blob.as_json(root: false, methods: :signed_id).merge(direct_upload: { \n\n\n\n\n\nSince the signed blob ID is the same as the one used for later retrieving a blob (even for a small period of time, since the purpose of the signature is the same), the following attack can be performed:\n\nAlice uploads a PDF document and shares a link to a page with it with Bob\nMallory manages to view that page for whatever reason\nMallory examines the source page and copies the signed ID of the blob on that page\nMallory then uses her account on the same service and supplies the signed ID of the blob in a form POST request which would perform file attachment and create a reference to the blob in their account too.\n\nAt that stage, the Blob in the database would have more referencing Attachments since an Attachment would be generated allowing Mallory to have full access to the Blob in their account on the service. This would also prevent the Blob from being garbage-collected if Alice decides to remove it from \"her\" attachment. At first glance, I see the following possible impact:\n\nAn attacker can link attachments stored on the service into the model objects belonging to the attacker, even though they weren't uploaded by the attacker\nAn attacker can \"increase refcount\" for Blobs and thus prevent those blobs from being deleted from the application once there are no Attachments referencing them from records belonging to accounts that did have access.\n\nMitigation would possibly require using a different signature purpose for direct uploading / attaching than the rest of the ActiveStorage operations. An alternative would be to blend the user account identifier into the signature for upload, so that an account may only use signed IDs which were generated for them / on their behalf (Since Rails does not provide authorization out-of-the-box I don't see that likely but might be possible).\nExpected behavior\nIt is only possible to attach a blob to a record using a signed ID if that signed ID was issued to you for the purpose of upload (proof-of-work).\nActual behavior\nSigned IDs are used interchangeably and attaching by any user is possible, even if the user was not the original uploader.\nSystem configuration\nRails version: 5.x -6.x\nRuby version: any relevant version for framework versions mentioned above", "number_of_comments": 1, "comment_authors": ["julik"]},
{"title": "Rails 6: Scoping behavior on associations: Consistency with Security", "link": "https://github.com/rails/rails/issues/40958", "labels": ["\n                activerecord\n", "\n                pinned\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.6913812160491943, "creation_date": "2020-12-28T15:29:05Z", "issue_submitter": "jdelporte", "body": "6.0.0.RC1 introduced a correction on an inconsistency:\n\nAssociation loading isn't to be affected by scoping consistently whether preloaded / eager loaded or not, with the exception of unscoped.\nBefore:\nPost.where(\"1=0\").scoping do\n  Comment.find(1).post                   # => nil\n  Comment.preload(:post).find(1).post    # => #<Post id: 1, ...>\n  Comment.eager_load(:post).find(1).post # => #<Post id: 1, ...>\nend\n\nAfter:\nPost.where(\"1=0\").scoping do\n  Comment.find(1).post                   # => #<Post id: 1, ...>\n  Comment.preload(:post).find(1).post    # => #<Post id: 1, ...>\n  Comment.eager_load(:post).find(1).post # => #<Post id: 1, ...>\nend\n\nFixes #34638, #35398.\n\n\"Scoping\" is a corner stone in the management of security: we lock users within scopes of the data they are allowed to see. Scopes are used as a data jail mechanism. While we agree on the initial problem statement (the behavior was inconsistent), we believe that to preserve good security of the data, the consistency should be restored as follows:\nPost.where(\"1=0\").scoping do\n  Comment.find(1).post                   # => nil\n  Comment.preload(:post).find(1).post    # => nil\n  Comment.eager_load(:post).find(1).post # => nil\nend\n\nAs a consequence, applications that were safe before Rails 6 may now leak information to some unprivileged users.\nWe can also note that some inconsistencies are present with the current version:\nComment.where('1=0').scoping do\n  Comment.where(post_id: 1).exists?   # => false\n  Post.find(1).comments.exists?       # => true\nend\n\nWe can provide a PR for Rails 6 (based on 1a58db0, maybe with a less naive approach) following these lines (enforcing the strong scoping rules, not the weak ones). While we don't see when the weak model is relevant (we do not have a use for it), it might be useful to some. So possibly the solution should not be to have either, but both. In which case, we suggest to have a global configuration mechanism to select whether the application is running with the weak scoping rules, or the strong scoping rules.", "number_of_comments": 6, "comment_authors": ["jdelporte", "rafaelfranca", "kamipo", "rafaelfranca", "kamipo", "rails-bot"]},
{"title": "CSRF ActionableExceptions middleware", "link": "https://github.com/rails/rails/issues/40892", "labels": ["\n                actionpack\n", "\n                security\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.7263894081115723, "creation_date": "2020-12-20T05:28:55Z", "issue_submitter": "ooooooo-q", "body": "https://github.com/rails/rails/blob/v6.1.0/actionpack/lib/action_dispatch/middleware/actionable_exceptions.rb\nXSS with ActionableExceptions has been fixed in 6.0.3.4, but there is still an issue with accepting cross site requests.\nTherefore, there are the following problems in the development environment.\nI suggest limiting the requests this middleware accepts to ajax requests with custom headers (x-requested-with).\nFor more information hackerone.\nSteps to reproduce\nexample attack server.\n<form method=\"post\" action=\"http://localhost:3000/rails/actions?error=ActiveRecord::PendingMigrationError&action=Run%20pending%20migrations&location=https://www.hackerone.com/\">\n    <button type=\"submit\">click!</button>\n</form>\nExpected behavior\nBlock cross site request.\nActual behavior\n\nRun pending migrations by CSRF\nOpen redirect (from POST method)\nHTTP header injection\n\nSystem configuration\nRails version: 6.1.0\nRuby version: ruby 2.7.1p83", "number_of_comments": 2, "comment_authors": ["ooooooo-q", "ooooooo-q"]},
{"title": "Remove Rack::SendFile from default middleware.", "link": "https://github.com/rails/rails/issues/41148", "labels": ["\n                actionpack\n", "\n                security\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.7058000564575195, "creation_date": "2021-01-17T13:10:01Z", "issue_submitter": "ooooooo-q", "body": "Steps to reproduce\nExample of rails controller.\nclass FilesController < ApplicationController\n  def index\n    send_file(\"./README.md\")\n  end\nend\nCode like the one above can be attacked by a specially crafted request.\nSee hackrone for details on the attack code.\nActual behavior\nRack::SendFile used in send_file has the following risks if proxy is not set properly.\n\nReDoS via Regex Injection\nUnexpected access to nginx internal\n\nIt has been suggested to remove Rack::SendFile from the default in the hope that the user will handle the proxy properly.\nSystem configuration\nRails version: *\nRuby version: *", "number_of_comments": 12, "comment_authors": ["ooooooo-q", "lfalcao", "zzak", "ooooooo-q", "ooooooo-q", "zzak", "SValkanov", "rafaelfranca", "zarqman", "tenderlove", "zarqman", "tenderlove"]},
{"title": "Join table data assigned to Model", "link": "https://github.com/rails/rails/issues/41151", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.6648881435394287, "creation_date": "2021-01-18T06:33:54Z", "issue_submitter": "weistom", "body": "Steps to reproduce\nGuess Author and Article models and there are the following data.\nirb(main):010:0> Author.all\n  Author Load (0.2ms)  SELECT \"authors\".* FROM \"authors\" /* loading for inspect */ LIMIT ?  [[\"LIMIT\", 11]]\n=> #<ActiveRecord::Relation [#<Author id: 1, name: \"John\", created_at: \"2021-01-08 06:31:00.102779000 +0000\", updated_at: \"2021-01-08 06:31:00.102779000 +0000\", author_profile_id: nil>, #<Author id: 2, name: \"Smith\", created_at: \"2021-01-08 06:31:11.958534000 +0000\", updated_at: \"2021-01-08 06:31:11.958534000 +0000\", author_profile_id: nil>]>\nirb(main):009:0> Article.all\n  Article Load (0.2ms)  SELECT \"articles\".* FROM \"articles\" /* loading for inspect */ LIMIT ?  [[\"LIMIT\", 11]]\n=> #<ActiveRecord::Relation [#<Article id: 1, author_id: 2, name: \"article name\", body: \"test\", created_at: \"2021-01-08 06:31:51.149971000 +0000\", updated_at: \"2021-01-18 06:12:35.192548000 +0000\">]>\nirb(main):010:0> \nOn Rails 6.1, select method with *results in that join table's column data assigned to the attribute which is the same name. In this case, <Article id: 1, name: \"article name\", ... is expected and I think this is dangerous.\nirb(main):011:0> Article.joins(:author).select(Arel.star).find 1\n  Article Load (0.2ms)  SELECT * FROM \"articles\" INNER JOIN \"authors\" ON \"authors\".\"id\" = \"articles\".\"author_id\" WHERE \"articles\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]]\n=> #<Article id: 2, author_id: 2, name: \"Smith\", body: \"test\", created_at: \"2021-01-08 06:31:11.958534000 +0000\", updated_at: \"2021-01-08 06:31:11.958534000 +0000\">\nThis works.\nirb(main):014:0> Article.joins(:author).select('authors.*', 'articles.*').find 1\n  Article Load (0.2ms)  SELECT authors.*, articles.* FROM \"articles\" INNER JOIN \"authors\" ON \"authors\".\"id\" = \"articles\".\"author_id\" WHERE \"articles\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]]\n=> #<Article id: 1, author_id: 2, body: \"test\", created_at: \"2021-01-08 06:31:51.149971000 +0000\", updated_at: \"2021-01-18 06:12:35.192548000 +0000\", name: \"article name\">\nExpected behavior\nActual behavior\nSystem configuration\nRails version:\n6.1.1\nRuby version:\n2.7.1", "number_of_comments": 24, "comment_authors": ["weistom", "intrip", "weistom", "intrip", "weistom", "intrip", "weistom", "intrip", "weistom", "weistom", "rails-bot", "intrip", "rails-bot", "zzak", "intrip", "rails-bot", "rails-bot", "intrip", "khasinski", "intrip", "p8", "rails-bot", "zzak", "khasinski"]},
{"title": "Joins with filter genererates invalid query. Regression in 6.1", "link": "https://github.com/rails/rails/issues/41010", "labels": ["\n                activerecord\n", "\n                regression\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.7153041362762451, "creation_date": "2021-01-04T19:41:26Z", "issue_submitter": "jcoyne", "body": "Given the following structure:\nclass CreateCollections < ActiveRecord::Migration[6.0]\n  def change\n    create_table :collections do |t|\n      t.string :name, null: false\n      t.timestamps\n    end\n  end\nend\n\nclass CreateWorks < ActiveRecord::Migration[6.0]\n  def change\n    create_table :works do |t|\n      t.string :title, null: false\n      t.references :collection\n      t.timestamps\n    end\n  end\nend\n\nclass DeviseCreateUsers < ActiveRecord::Migration[6.0]\n  def change\n    create_table :users do |t|\n      ## Database authenticatable\n      t.string :email,              null: false, default: \"\"\n    end\n  end\nend\n\nclass AddHabtmReviewersToCollection < ActiveRecord::Migration[6.0]\n  def change\n    create_join_table :collections, :users, table_name: :reviewers do |t|\n      t.index [:collection_id, :user_id], unique: true\n    end\n  end\nend\n\nclass User < ApplicationRecord\n  has_and_belongs_to_many :reviews_collections, class_name: 'Collection', join_table: 'reviewers'\nend\n\nclass Collection < ApplicationRecord\n  has_many :works, dependent: :destroy\n  has_and_belongs_to_many :reviewers, class_name: 'User', join_table: 'reviewers'\nend\n\nclass Work < ApplicationRecord\n  belongs_to :collection\nend\nThen when I run this query:\nWork.joins(collection: :reviewers).where('reviewers.user_id' => 1)\n\nI get this SQL in Rails 6.1:\nSELECT \"works\".* FROM \"works\" INNER JOIN \"collections\" ON \"collections\".\"id\" = \"works\".\"collection_id\" INNER JOIN \"reviewers\" \"collections_reviewers_collections_join\" ON \"collections_reviewers_collections_join\".\"collection_id\" = \"collections\".\"id\" INNER JOIN \"users\" reviewers ON reviewers.\"id\" = \"collections_reviewers_collections_join\".\"user_id\" WHERE \"reviewers\".\"user_id\" = $1\n\nBut in Rails 6.0 I get:\n SELECT \"works\".* FROM \"works\" INNER JOIN \"collections\" ON \"collections\".\"id\" = \"works\".\"collection_id\" INNER JOIN \"reviewers\" ON \"reviewers\".\"collection_id\" = \"collections\".\"id\" INNER JOIN \"users\" ON \"users\".\"id\" = \"reviewers\".\"user_id\" WHERE \"reviewers\".\"user_id\" = $1\n\nThe SQL from Rails 6.1 results in the error:\nActiveRecord::StatementInvalid (PG::UndefinedColumn: ERROR:  column reviewers.user_id does not exist)\nLINE 1: ...ERE (\"works\".\"state\" IN ('pending_approval')) AND \"reviewers...\n                                                             ^\n\nI believe this is because it has used the alias \"reviewers\" for the table \"users\", and \"reviewers\" is an actual table name.", "number_of_comments": 5, "comment_authors": ["jcoyne", "jcoyne", "tomca32", "kamipo", "p8"]},
{"title": "Empty arrays don't pass validate exclusion of nil in Rails 6.1", "link": "https://github.com/rails/rails/issues/41051", "labels": ["\n                attached PR\n", "\n                pinned\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.6819210052490234, "creation_date": "2021-01-08T11:57:49Z", "issue_submitter": "haines", "body": "We'd like to validate that an attribute backed by an array or JSON(B) database column is not nil, while allowing empty arrays.\nBefore Rails 6.1 validates :value, exclusion: { in: [nil] } worked.\nAfter #22610 this is no longer the case.\nAlso reported by @mkamensky here: #22610 (comment)\nSteps to reproduce\nAttempt to set an attribute with validates :value, exclusion: { in: [nil] } to [].\nRepro script (requires PostgreSQL running locally)\n$ git clone https://gist.github.com/90d8abb93c7ca00279a723e20c32e072.git validates_exclusion_of_nil_with_empty_array\n\n$ cd validates_exclusion_of_nil_with_empty_array\n\n$ ruby validates_exclusion_of_nil_with_empty_array_test.rb 6.0.3.4\n-- create_table(:examples)\n   -> 0.0196s\nRun options: --seed 50787\n\n# Running:\n\n..\n\nFinished in 0.016144s, 123.8850 runs/s, 123.8850 assertions/s.\n2 runs, 2 assertions, 0 failures, 0 errors, 0 skips\n\n$ ruby validates_exclusion_of_nil_with_empty_array_test.rb 6.1.1\n-- create_table(:examples)\n   -> 0.0199s\nRun options: --seed 6233\n\n# Running:\n\nF\n\nFailure:\nTestValidateExclusionOfNilWithEmptyArray#test_empty_array_is_valid [validates_exclusion_of_nil_with_empty_array_test.rb:39]:\nExpected false to be truthy.\n\n\nrails test validates_exclusion_of_nil_with_empty_array_test.rb:38\n\n.\n\nFinished in 0.006463s, 309.4538 runs/s, 309.4538 assertions/s.\n2 runs, 2 assertions, 1 failures, 0 errors, 0 skips\nExpected behavior\nvalidates :value, exclusion: { in: [nil] } should allow [] but reject nil\nActual behavior\nvalidates :value, exclusion: { in: [nil] } rejects both [] and nil\nSystem configuration\nRails version: 6.1.1\nRuby version: 2.7.2p137", "number_of_comments": 10, "comment_authors": ["haines", "rafaelfranca", "haines", "mkamensky", "intrip", "haines", "rafaelfranca", "intrip", "rails-bot", "intrip"]},
{"title": "ActiveRecord: Missing joined table after upgrading to 6.1", "link": "https://github.com/rails/rails/issues/41498", "labels": ["\n                activerecord\n", "\n                regression\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.6268141269683838, "creation_date": "2021-02-19T09:40:25Z", "issue_submitter": "kaspernj", "body": "Steps to reproduce\nI have written a test to reproduce the error. Passing on 6.0 and failing on 6.1.\nPut this file in its own directory and run it from there.\n# If you change the gem dependencies, run it with:\n# `rm Gemfile* && ruby test.rb`\n\nunless File.exist?(\"Gemfile\")\n  File.write(\"Gemfile\", <<-GEMFILE)\n    source \"https://rubygems.org\"\n    # gem \"rails\", github: \"rails/rails\", branch: \"6-0-stable\"\n    gem \"rails\", github: \"rails/rails\", branch: \"6-1-stable\"\n    gem \"pg\"\n  GEMFILE\n\n  system \"bundle install\"\nend\n\nrequire \"bundler\"\nBundler.setup(:default)\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(\n  adapter: \"postgresql\",\n  database: \"activerecord_test\",\n  host: \"postgres\",\n  user: \"username\",\n  password: \"password\"\n)\n# ActiveRecord::Base.logger = Logger.new(STDOUT)\n\n# Display versions.\nmessage = \"Running test case with Ruby #{RUBY_VERSION}, Active Record #{\n  ::ActiveRecord::VERSION::STRING}, Arel #{Arel::VERSION} and #{\n  ::ActiveRecord::Base.connection.adapter_name}\"\nline = \"=\" * message.length\nputs line, message, line\n\nActiveRecord::Schema.define do\n  create_table :contacts, force: true do |t|\n    t.string :name\n  end\n\n  create_table :contact_relationships, force: true do |t|\n    t.references :child\n    t.references :parent\n    t.string :relationship_type\n  end\nend\n\nclass Contact < ActiveRecord::Base\n  has_one :commune_relationship, -> { where(relationship_type: \"commune\") }, class_name: \"ContactRelationship\", foreign_key: :child_id\n  has_one :commune, source: :parent, through: :commune_relationship\n\n  has_many :commune_for_relationships, -> { where(relationship_type: \"commune\") }, class_name: \"ContactRelationship\", foreign_key: :parent_id\n  has_many :commune_for, source: :child, through: :commune_for_relationships\n\n  has_many :schools_relationships, -> { where(relationship_type: \"school\") }, class_name: \"ContactRelationship\", foreign_key: :child_id\n  has_many :schools, source: :parent, through: :schools_relationships\n\n  has_many :schools_communes, source: :commune, through: :schools\n\n  has_many :school_for_relationships, -> { where(relationship_type: \"school\") }, class_name: \"ContactRelationship\", foreign_key: :parent_id\n  has_many :school_for, source: :child, through: :school_for_relationships\n\n  has_many :children_relationships, class_name: \"ContactRelationship\", foreign_key: :parent_id\n  has_many :children, source: :child, through: :children_relationships\n\n  has_many :parents_relationships, class_name: \"ContactRelationship\", foreign_key: :child_id\n  has_many :parents, source: :parent, through: :parents_relationships\nend\n\nclass ContactRelationship < ActiveRecord::Base\n  belongs_to :child, class_name: \"Contact\"\n  belongs_to :parent, class_name: \"Contact\"\nend\n\nclass TestActiveRecord < ActiveSupport::TestCase\n  def setup\n    @nothern_commune = Contact.create!(name: \"Nothern Commune\")\n    @southern_commune = Contact.create!(name: \"Southern Commune\")\n\n    @southern_school = Contact.create!(name: \"Southern School\")\n    ContactRelationship.create!(child: @southern_school, parent: @southern_commune, relationship_type: \"commune\")\n\n    @nothern_school = Contact.create!(name: \"Nothern School\")\n    ContactRelationship.create!(child: @nothern_school, parent: @nothern_commune, relationship_type: \"commune\")\n\n    # Student that both lives and goes to school in the north\n    @nothern_student = Contact.create!(name: \"Nothern Student\")\n    ContactRelationship.create!(child: @nothern_student, parent: @nothern_commune, relationship_type: \"commune\")\n    ContactRelationship.create!(child: @nothern_student, parent: @nothern_school, relationship_type: \"school\")\n\n    # Student that both lives and goes to school in the south\n    @southern_student = Contact.create!(name: \"Southern Student\")\n    ContactRelationship.create!(child: @southern_student, parent: @southern_commune, relationship_type: \"commune\")\n    ContactRelationship.create!(child: @southern_student, parent: @southern_school, relationship_type: \"school\")\n\n    # Student that lives in the northern commune but goes to school in the southern school\n    @eastern_student = Contact.create!(name: \"Eastern Student\")\n    ContactRelationship.create!(child: @eastern_student, parent: @nothern_commune, relationship_type: \"commune\")\n    ContactRelationship.create!(child: @eastern_student, parent: @southern_school, relationship_type: \"school\")\n\n    # Student that liaves in the southern commune but goes to school in the nothern school\n    @western_student = Contact.create!(name: \"Western Student\")\n    ContactRelationship.create!(child: @western_student, parent: @southern_commune, relationship_type: \"commune\")\n    ContactRelationship.create!(child: @western_student, parent: @nothern_school, relationship_type: \"school\")\n  end\n\n  def test_setup\n    assert_equal @nothern_commune, @nothern_student.commune\n    assert_equal [@nothern_school], @nothern_student.schools\n    assert_equal [@nothern_commune], @nothern_student.schools_communes\n\n    assert_equal @southern_commune, @southern_student.commune\n    assert_equal [@southern_school], @southern_student.schools\n    assert_equal [@southern_commune], @southern_student.schools_communes\n\n    assert_equal @nothern_commune, @eastern_student.commune\n    assert_equal [@southern_school], @eastern_student.schools\n    assert_equal [@southern_commune], @eastern_student.schools_communes\n\n    assert_equal @southern_commune, @western_student.commune\n    assert_equal [@nothern_school], @western_student.schools\n\n    assert_equal [@nothern_school, @nothern_student, @eastern_student], @nothern_commune.children\n    assert_equal [@nothern_school, @nothern_student, @eastern_student], @nothern_commune.commune_for\n\n    assert_equal [@southern_school, @southern_student, @western_student], @southern_commune.children\n    assert_equal [@southern_school, @southern_student, @western_student], @southern_commune.commune_for\n\n    assert_equal [@nothern_student, @western_student], @nothern_school.children\n    assert_equal [@nothern_student, @western_student], @nothern_school.school_for\n    assert_equal [@southern_student, @eastern_student], @southern_school.school_for\n  end\n\n  def test_queries\n    query = Contact\n      .left_joins(:commune, schools: :commune)\n      .where(\"communes_contacts.id = :commune_id OR communes_contacts_2.id = :commune_id\", commune_id: @southern_commune.id)\n\n    # Output from Rails 6.0\n    # SELECT \"contacts\".*\n    # FROM \"contacts\"\n    # LEFT OUTER JOIN \"contact_relationships\" ON \"contact_relationships\".\"relationship_type\" = 'commune' AND \"contact_relationships\".\"child_id\" = \"contacts\".\"id\"\n    # LEFT OUTER JOIN \"contacts\" \"communes_contacts\" ON \"communes_contacts\".\"id\" = \"contact_relationships\".\"parent_id\"\n    # LEFT OUTER JOIN \"contact_relationships\" \"schools_relationships_contacts_join\" ON \"schools_relationships_contacts_join\".\"relationship_type\" = 'school' AND \"schools_relationships_contacts_join\".\"child_id\" = \"contacts\".\"id\"\n    # LEFT OUTER JOIN \"contacts\" \"schools_contacts\" ON \"schools_contacts\".\"id\" = \"schools_relationships_contacts_join\".\"parent_id\"\n    # Note: This relationships-join is missing in Rails 6.1\n    # LEFT OUTER JOIN \"contact_relationships\" \"commune_relationships_contacts_join\" ON \"commune_relationships_contacts_join\".\"relationship_type\" = 'commune' AND \"commune_relationships_contacts_join\".\"child_id\" = \"schools_contacts\".\"id\"\n    # LEFT OUTER JOIN \"contacts\" \"communes_contacts_2\" ON \"communes_contacts_2\".\"id\" = \"commune_relationships_contacts_join\".\"parent_id\"\n    # WHERE (communes_contacts.id = 2 OR communes_contacts_2.id = 2)\n\n    # Output from Rails 6.1\n    # SELECT \"contacts\".*\n    # FROM \"contacts\"\n    # LEFT OUTER JOIN \"contact_relationships\" ON \"contact_relationships\".\"relationship_type\" = 'commune' AND \"contact_relationships\".\"child_id\" = \"contacts\".\"id\"\n    # LEFT OUTER JOIN \"contacts\" \"communes_contacts\" ON \"communes_contacts\".\"id\" = \"contact_relationships\".\"parent_id\"\n    # LEFT OUTER JOIN \"contact_relationships\" \"schools_relationships_contacts_join\" ON \"schools_relationships_contacts_join\".\"relationship_type\" = 'school' AND \"schools_relationships_contacts_join\".\"child_id\" = \"contacts\".\"id\"\n    # LEFT OUTER JOIN \"contacts\" \"schools_contacts\" ON \"schools_contacts\".\"id\" = \"schools_relationships_contacts_join\".\"parent_id\"\n    # Note: Missing relationships join like in Rails 6.0\n    # LEFT OUTER JOIN \"contacts\" \"communes_contacts_2\" ON \"communes_contacts_2\".\"id\" = \"contact_relationships\".\"parent_id\"\n    # WHERE (communes_contacts.id = 2 OR communes_contacts_2.id = 2)\n\n    # puts \"SQL:\\n#{query.to_sql}\"\n\n    # Southern school should be included because it belongs to the southern commune\n    # Southern student should be included because he both goes to school and lives in the south\n    # Eastern student should be included because he goes to school in the southern school that belongs to the southern commune\n    # Western student should be included because he lives in the south and is directly related to the southern commune\n\n    assert_equal [@southern_school, @southern_student, @eastern_student, @western_student], query\n  end\nend\nExpected behavior\nI would expect the \"contact_relationships\" for communes on schools to be present instead of re-using the previous join wrongly.\nI would expect this assertion to pass:\nassert_equal [@southern_school, @southern_student, @eastern_student, @western_student], query\nActual behavior\nIt uses the previous join wrongly and reaches the wrong result.\nSystem configuration\nRails version: 6.1\nRuby version: 2.6.6", "number_of_comments": 3, "comment_authors": ["kaspernj", "kaspernj", "flavorjones"]},
{"title": "Slow performance when rendering collections of nested partials", "link": "https://github.com/rails/rails/issues/41452", "labels": ["\n                actionview\n", "\n                With reproduction steps\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.6408145427703857, "creation_date": "2021-02-15T18:00:12Z", "issue_submitter": "willcosgrove", "body": "Steps to reproduce\n\nTo start, you need two partials (_a.html.erb and _b.html.erb)\nPartial _a.html.erb should contain a render call for partial _b.html.erb\nRender partial _a.html.erb in a collection\n\nExpected behavior\nIdeally, the time to render should be on par with the aggregate time to render both _a and _b if _b was not nested inside of _a.\nActual behavior\nI see about a 10x difference in render time between a nested example and a flat example. I've done some preliminary digging with stackprof. Keep in mind that I am not well versed in the internals of ActionView rendering so my understanding of what is not working may not line up with reality. It seems like whatever optimization is done that affords such a significant speed difference between these two cases:\nFast\n<%= render partial: \"a\", collection: 100.times.to_a %>\nSlow\n<% 100.times do %>\n  <%= render partial: \"a\" %>\n<% end %>\n...is not able to be applied to the partial that is nested inside of the outer partial. Based on my stackprof digging it looks like some of that optimization is happening in the conversion of the partial string (\"a\") into an actual path to a view file. In the fast case above, that conversion of \"a\" into \"#{Rails.root}/app/views/application/_a.html.erb\" happens one time, and in the slow case it happens 100 times. The same is true of the nested partials situation: the outer partial gets its view path calculated/looked-up one time, but the inner render call for the nested partial _b gets looked-up on each iteration.\nI had some back and forth on Twitter with @tenderlove about this, and his intuition from the best description I could muster in 270 characters was that this was a bug and shouldn't require a performance hit. But it is entirely possible I wasn't explaining it well enough to him over the limited bandwidth communication channel of Twitter 😄\nTweet\nhttps://twitter.com/tenderlove/status/1351223079805083648\nReproduction Repo\nhttps://github.com/willcosgrove/partial-perf-repro\nServer log images\nFlat case (fast):\n\nNested case (slow):\n\n\nI should also clarify about the logs: The default view logging in development definitely adds some additional overhead to the slow case, because it logs a line of output for each iteration. But even with view logging turned off completely, there is still a significant performance difference between the two cases, so I don't believe the difference falls entirely at the feet of ActionView logging instrumentation.\nFlamegraph:\nFast:\n\nSlow:\n\nSystem configuration\nRails version:\nSeems to be any version, but I tested specifically on 6.1.2.1 and main.\nRuby version:\nAlso seems to be any version but I tested on both Ruby 2.7 and Ruby 3.0.\nCC: @tenderlove", "number_of_comments": 17, "comment_authors": ["willcosgrove", "mdworken", "willcosgrove", "rafaelfranca", "thewatts", "alipman88", "willcosgrove", "thewatts", "thewatts", "rails-bot", "zzak", "lfalcao", "thewatts", "casperisfine", "jhawthorn", "jhawthorn", "bensheldon"]},
{"title": "initialize of new AR model with association deletes persisted record", "link": "https://github.com/rails/rails/issues/41692", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 10, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.6176722049713135, "creation_date": "2021-03-17T11:11:16Z", "issue_submitter": "senid231", "body": "Steps to reproduce\nbug report\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", \"~> 6.1.0\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.string :title\n    t.string :content\n  end\n\n  create_table :post_details, force: true do |t|\n    t.integer :post_id\n    t.string :summary\n  end\nend\n\nclass ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\nend\n\nclass Post < ApplicationRecord\n  has_one :post_detail, class_name: 'PostDetail', dependent: :delete\nend\n\nclass PostDetail < ApplicationRecord\n  belongs_to :post\nend\n\nclass BugTest < Minitest::Test\n  def test_new_with_association\n    old_post = Post.create!(title: 'foo')\n    old_post_detail = PostDetail.create(post_id: old_post.id, summary: 'bar')\n\n    assert_equal 'foo', old_post.reload.title\n    assert_equal 1, PostDetail.where(id: old_post_detail.id).count\n    assert_equal 'bar', old_post.reload.post_detail.summary\n    assert_equal old_post_detail.id, old_post.reload.post_detail.id\n\n    new_post = Post.new(\n      id: old_post.id,\n      post_detail: PostDetail.new(summary: 'wrong')\n    )\n\n    assert_equal 'foo', old_post.reload.title\n    assert_equal 1, PostDetail.where(id: old_post_detail.id).count\n    assert_equal 'bar', old_post.reload.post_detail.summary\n    assert_equal old_post_detail.id, old_post.reload.post_detail.id\n    assert new_post.new_record?\n    assert new_post.post_detail.new_record?\n  end\nend\nExpected behavior\ntests should pass. building new instance of model with id should not affect persisted records\nActual behavior\npersisted record being deleted\nSystem configuration\nRails version: 6.1.3\nRuby version: 2.5.5\nbug report running log\nTesting started at 13:06 ...\nFetching gem metadata from https://rubygems.org/.............\nResolving dependencies...\nUsing rake 13.0.3\nUsing concurrent-ruby 1.1.8\nUsing minitest 5.14.4\nUsing zeitwerk 2.4.2\nUsing builder 3.2.4\nUsing erubi 1.10.0\nUsing racc 1.5.2\nUsing crass 1.0.6\nUsing rack 2.2.3\nUsing nio4r 2.5.7 (was 2.5.5)\nUsing websocket-extensions 0.1.5\nUsing mimemagic 0.3.5\nUsing mini_mime 1.0.2\nUsing bundler 2.2.8\nUsing method_source 1.0.0\nUsing thor 1.1.0\nUsing sqlite3 1.4.2\nUsing i18n 1.8.9\nUsing tzinfo 2.0.4\nUsing nokogiri 1.11.2 (x86_64-linux) (was 1.11.1)\nUsing rack-test 1.1.0\nUsing websocket-driver 0.7.3\nUsing marcel 0.3.3\nUsing mail 2.7.1\nUsing sprockets 4.0.2\nUsing activesupport 6.1.3\nUsing loofah 2.9.0\nUsing rails-dom-testing 2.0.3\nUsing rails-html-sanitizer 1.3.0\nUsing globalid 0.4.2\nUsing activemodel 6.1.3\nUsing actionview 6.1.3\nUsing activejob 6.1.3\nUsing activerecord 6.1.3\nUsing actionpack 6.1.3\nUsing actioncable 6.1.3\nUsing activestorage 6.1.3\nUsing actionmailer 6.1.3\nUsing railties 6.1.3\nUsing sprockets-rails 3.2.2\nUsing actionmailbox 6.1.3\nUsing actiontext 6.1.3\nUsing rails 6.1.3\n-- create_table(:posts, {:force=>true})\nD, [2021-03-17T13:06:22.465102 #1137602] DEBUG -- :    (0.5ms)  SELECT sqlite_version(*)\nD, [2021-03-17T13:06:22.465387 #1137602] DEBUG -- :    (0.0ms)  DROP TABLE IF EXISTS \"posts\"\nD, [2021-03-17T13:06:22.465639 #1137602] DEBUG -- :    (0.1ms)  CREATE TABLE \"posts\" (\"id\" integer PRIMARY KEY AUTOINCREMENT NOT NULL, \"title\" varchar, \"content\" varchar)\n   -> 0.0029s\n-- create_table(:post_details, {:force=>true})\nD, [2021-03-17T13:06:22.465963 #1137602] DEBUG -- :    (0.0ms)  DROP TABLE IF EXISTS \"post_details\"\nD, [2021-03-17T13:06:22.466135 #1137602] DEBUG -- :    (0.1ms)  CREATE TABLE \"post_details\" (\"id\" integer PRIMARY KEY AUTOINCREMENT NOT NULL, \"post_id\" integer, \"summary\" varchar)\n   -> 0.0005s\nD, [2021-03-17T13:06:22.480848 #1137602] DEBUG -- :    (0.1ms)  CREATE TABLE \"ar_internal_metadata\" (\"key\" varchar NOT NULL PRIMARY KEY, \"value\" varchar, \"created_at\" datetime(6) NOT NULL, \"updated_at\" datetime(6) NOT NULL)\nD, [2021-03-17T13:06:22.485807 #1137602] DEBUG -- :   ActiveRecord::InternalMetadata Load (0.1ms)  SELECT \"ar_internal_metadata\".* FROM \"ar_internal_metadata\" WHERE \"ar_internal_metadata\".\"key\" = ? LIMIT ?  [[\"key\", \"environment\"], [\"LIMIT\", 1]]\nD, [2021-03-17T13:06:22.488520 #1137602] DEBUG -- :   TRANSACTION (0.0ms)  begin transaction\nD, [2021-03-17T13:06:22.488709 #1137602] DEBUG -- :   ActiveRecord::InternalMetadata Create (0.1ms)  INSERT INTO \"ar_internal_metadata\" (\"key\", \"value\", \"created_at\", \"updated_at\") VALUES (?, ?, ?, ?)  [[\"key\", \"environment\"], [\"value\", \"test\"], [\"created_at\", \"2021-03-17 11:06:22.488231\"], [\"updated_at\", \"2021-03-17 11:06:22.488231\"]]\nD, [2021-03-17T13:06:22.488850 #1137602] DEBUG -- :   TRANSACTION (0.0ms)  commit transaction\nD, [2021-03-17T13:06:22.523263 #1137602] DEBUG -- :   TRANSACTION (0.0ms)  begin transaction\nD, [2021-03-17T13:06:22.523422 #1137602] DEBUG -- :   Post Create (0.1ms)  INSERT INTO \"posts\" (\"title\") VALUES (?)  [[\"title\", \"foo\"]]\nD, [2021-03-17T13:06:22.523577 #1137602] DEBUG -- :   TRANSACTION (0.0ms)  commit transaction\nD, [2021-03-17T13:06:22.525916 #1137602] DEBUG -- :   TRANSACTION (0.0ms)  begin transaction\nD, [2021-03-17T13:06:22.526071 #1137602] DEBUG -- :   PostDetail Create (0.1ms)  INSERT INTO \"post_details\" (\"post_id\", \"summary\") VALUES (?, ?)  [[\"post_id\", 1], [\"summary\", \"bar\"]]\nD, [2021-03-17T13:06:22.526193 #1137602] DEBUG -- :   TRANSACTION (0.0ms)  commit transaction\nD, [2021-03-17T13:06:22.526728 #1137602] DEBUG -- :   Post Load (0.1ms)  SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]]\nD, [2021-03-17T13:06:22.527219 #1137602] DEBUG -- :    (0.1ms)  SELECT COUNT(*) FROM \"post_details\" WHERE \"post_details\".\"id\" = ?  [[\"id\", 1]]\nD, [2021-03-17T13:06:22.527542 #1137602] DEBUG -- :   Post Load (0.0ms)  SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]]\nD, [2021-03-17T13:06:22.531725 #1137602] DEBUG -- :   PostDetail Load (0.1ms)  SELECT \"post_details\".* FROM \"post_details\" WHERE \"post_details\".\"post_id\" = ? LIMIT ?  [[\"post_id\", 1], [\"LIMIT\", 1]]\nD, [2021-03-17T13:06:22.532867 #1137602] DEBUG -- :   Post Load (0.0ms)  SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]]\nD, [2021-03-17T13:06:22.533216 #1137602] DEBUG -- :   PostDetail Load (0.0ms)  SELECT \"post_details\".* FROM \"post_details\" WHERE \"post_details\".\"post_id\" = ? LIMIT ?  [[\"post_id\", 1], [\"LIMIT\", 1]]\nD, [2021-03-17T13:06:22.533659 #1137602] DEBUG -- :   PostDetail Load (0.0ms)  SELECT \"post_details\".* FROM \"post_details\" WHERE \"post_details\".\"post_id\" = ? LIMIT ?  [[\"post_id\", 1], [\"LIMIT\", 1]]\nD, [2021-03-17T13:06:22.533940 #1137602] DEBUG -- :   PostDetail Destroy (0.1ms)  DELETE FROM \"post_details\" WHERE \"post_details\".\"id\" = ?  [[\"id\", 1]]\nD, [2021-03-17T13:06:22.534273 #1137602] DEBUG -- :   Post Load (0.0ms)  SELECT \"posts\".* FROM \"posts\" WHERE \"posts\".\"id\" = ? LIMIT ?  [[\"id\", 1], [\"LIMIT\", 1]]\nD, [2021-03-17T13:06:22.534606 #1137602] DEBUG -- :    (0.1ms)  SELECT COUNT(*) FROM \"post_details\" WHERE \"post_details\".\"id\" = ?  [[\"id\", 1]]\n\nMinitest::Assertion: Expected: 1\n  Actual: 0\ntest_bug_report_rails_new_deletes_assoc.rb:62:in `test_new_with_association'", "number_of_comments": 17, "comment_authors": ["senid231", "senid231", "intrip", "senid231", "senid231", "Fivell", "p8", "rafaelfranca", "senid231", "Fivell", "p8", "p8", "senid231", "intrip", "p8", "senid231", "federicoaldunate"]},
{"title": "Modifing child model's instance variable triggers child model's validation at v5.2.3, but not v5.2.4", "link": "https://github.com/rails/rails/issues/38157", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7908890247344971, "creation_date": "2020-01-05T07:44:21Z", "issue_submitter": "megane42", "body": "There is some breaking change for validations between v5.2.3 and v5.2.4.\nWhen;\n\nthere are 2 models (e.g. Foo and Bar),\nand Foo has_one Bar,\nand Foo has accepts_nested_attributes_for :bar,\nand Bar has an attr_accessor (e.g. name),\nand foo.bar.name is modified,\nand foo.save is called,\n\nthen the validation for bar is executed at v5.2.3, but not at v5.2.4.\nI have no idea which behavior is ideal, but at least it seems this is a breaking change on patch version update.\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"5.2.4\"\n  gem \"sqlite3\", \"~> 1.3.6\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :foos, force: true do |t|\n  end\n\n  create_table :bars, force: true do |t|\n    t.integer :foo_id\n  end\nend\n\n$count_validation = 0\n\nclass Foo < ActiveRecord::Base\n  has_one :bar\n  accepts_nested_attributes_for :bar\nend\n\nclass Bar < ActiveRecord::Base\n  belongs_to :foo\n  attr_accessor :name\n  before_validation -> { $count_validation += 1 }\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    foo = Foo.create\n    bar = foo.create_bar(name: \"old_name\")\n\n    $count_validation = 0\n\n    foo.bar.name = \"new_name\"\n    foo.save\n    assert_equal 1, $count_validation\n  end\nend\nExpected behavior\n\nThe behavior is consistent between v5.2.3 and v5.2.4\n\ni.e. The validation for Bar is executed\n\n\n\nActual behavior\n\nThe behavior is not consistent between v5.2.3 and v5.2.4\n\ni.e. The validation for Bar is not executed\n\n\n\nSystem configuration\nRails version:\n\nv5.2.3 and v5.2.4\n\nRuby version:\n\nruby 2.6.5p114 (2019-10-01 revision 67812) [x86_64-darwin17]", "number_of_comments": 6, "comment_authors": ["megane42", "rafaelfranca", "megane42", "marceloperini", "tyler717", "marcelolx"]},
{"title": "ActionText::RichText attempts to render attachments when creating a new object", "link": "https://github.com/rails/rails/issues/40829", "labels": ["\n                actiontext\n", "\n                pinned\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8488740921020508, "creation_date": "2020-12-14T05:46:03Z", "issue_submitter": "adamdebono", "body": "A feature of my application is automatic translation of user generated content, which is captured using ActionText's rich text fields. In order to achieve this, we essentially take the raw body of the ActionText::RichText, run it through a translation service, and then assign that content to a new object.\nOne (intentional) side effect of this is that any attachments are now shared across the rich text objects. After looking through rails source code, it looks like the ActionText::Content renders the content to html before storing it in the database.\n614e813#diff-2845a2dd736db0371741dbae62c17e7fd997c7df8e66596020cff068f456854aL91\nThis particular commit has changed the renderer, which shouldn't cause an issue, except for the fact that I have a custom view for active_storage/blobs/_blob, which includes custom helpers. Since the renderer is not part of application controller anymore, I get an error when saving these objects.\nThis issue doesn't occur when creating/editing objects from the browser, only when copying these objects from within by background jobs.\nSteps to reproduce\nCreate a custom blob.html:\n<%# views/active_storage/blobs/_blob.html.erb %>\n<figure class=\"attachment attachment--<%= blob.representable? ? \"preview\" : \"file\" %> attachment--<%= blob.filename.extension %>\">\n  <%= custom_image_helper(blob) %>\n</figure>\nCreate document classes:\nclass Document < ApplicationRecord\n  has_rich_text :content\nend\nclass DocumentTranslation\n  belongs_to :document\n  has_rich_text :content\nend\nAttempt to copy the rich text object in a background job:\nclass DocumentTranlateJob < ApplicationJob\n  def perform document\n    translation = DocumentTranslation.find_or_initialize_by(document: document, language: 'es')\n    translation.content = TranslationService.translate(document.content)\n    translation.save!\n  end\nend\nYou can also replicate this in a rails console:\nblob = ActiveStorage::Blob.create_and_upload!(io: File.open('path/to/a/file'), filename: 'filename')\nattachment = ActionText::Attachment.from_attachable(blob)\ndocument = Document.create!(content: \"<div>Sample content with attachment</div><div>#{attachment.to_html}</div>\")\nExpected behavior\nMaking inserts or edits to rich text content should not attempt to render attachments.\nActual behavior\nMaking inserts or edits to rich text content attempts to render attachments which causes my custom blob view to fail.\nSystem configuration\nRails version: 6.1.0\nRuby version: 2.7.1", "number_of_comments": 5, "comment_authors": ["adamdebono", "abhaynikam", "jonathanhefner", "adamdebono", "rails-bot"]},
{"title": "after_commit for inner transaction has different object id", "link": "https://github.com/rails/rails/issues/39714", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.87689208984375, "creation_date": "2020-06-24T17:20:35Z", "issue_submitter": "SheldonNunes", "body": "I have a model that has a queue structure that should be executed on after_commit. The model is saved within a nested transaction and the queue is not executing. I have discovered that the after_commit model has a different object_id from the one in the inner transaction.\nSteps to reproduce\nI created a reproducible test case:\nNote: I have tried with both the inclusion and exclusion of Company.transaction(requires_new: true)\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"6.0.3\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :companies, force: true do |t|\n    t.string :name, null: false\n  end\nend\n\n$actual_after_commit_call_objects = []\n\nclass Company < ActiveRecord::Base\n  after_commit { $actual_after_commit_call_objects << object_id }\nend\n\nclass BugTest < ActiveSupport::TestCase\n  include ActiveRecord::TestFixtures\n\n  self.use_transactional_tests = true\n\n  def test_commit_callbacks_for_identical_ar_model\n    expected_after_commit_call_objects = []\n    Company.create(name:\"S\")\n    Company.transaction do\n      Company.find(1).tap do |company| # object A\n        expected_after_commit_call_objects << company.object_id\n        company.name = \"A\"\n        company.save!\n      end\n      Company.transaction do\n        Company.find(1).tap do |company| # object A\n          expected_after_commit_call_objects << company.object_id\n          company.name = \"B\"\n          company.save!\n        end\n      end\n    end\n    assert_equal expected_after_commit_call_objects, $actual_after_commit_call_objects\n  end\nend\n\nExpected behavior\nExpected behavior is that the object id of from the inner transaction and after_commit callback should be the same\nActual behavior\nThe outermost transaction has matching object id (note: they are not in the same position in the expected/actual) but the inner transaction has different object id.\n--- expected\n+++ actual\n@@ -1 +1 @@\n-[70320209145860, 70320209176540]\n+[70320208918760, 70320209145860]\n\nSystem configuration\nRails version: 6.0.2.1\nActiverecord version: \"6.0.3\"\nRuby version:\nruby 2.6.3p62", "number_of_comments": 5, "comment_authors": ["SheldonNunes", "kamipo", "composerinteralia", "tjoyal", "kamipo"]},
{"title": "ActiveRecord 6.1.0 query with merge raises ActiveModel:: MissingAttributeError", "link": "https://github.com/rails/rails/issues/40874", "labels": ["\n                activerecord\n", "\n                regression\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8148899078369141, "creation_date": "2020-12-17T22:19:51Z", "issue_submitter": "macfanatic", "body": "This issue does not exist on rails 6.0.3.4 with the same versions of other libraries (mainly geocoder).\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"6.1.0\"\n  gem \"sqlite3\"\n  gem \"geocoder\", \"1.6.4\"\nend\n\nrequire \"active_record\"\nrequire \"geocoder\"\nrequire \"geocoder/models/active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :organizations, force: true do |t|\n    t.string :name\n  end\n\n  create_table :sales, force: true do |t|\n    t.references :location\n  end\n\n  create_table :locations, force: true do |t|\n    t.references :organization\n    t.integer :sale_id\n  end\n\n  create_table :addresses, force: true do |t|\n    t.references :entity, polymorphic: true\n    t.decimal \"latitude\"\n    t.decimal \"longitude\"\n    t.index [\"latitude\", \"longitude\"], name: \"index_addresses_on_latitude_and_longitude\"\n  end\nend\n\nclass Sale < ActiveRecord::Base\n  belongs_to :location\n  has_one :organization, through: :location\nend\n\nclass Organization < ActiveRecord::Base\n  has_many :locations\nend\n\nclass Location < ActiveRecord::Base\n  belongs_to :organization\n  has_many :sales\n  has_one :address, as: :entity, required: true, dependent: :destroy\nend\n\nclass Address < ActiveRecord::Base\n  extend Geocoder::Model::ActiveRecord\n\n  belongs_to :entity, polymorphic: true\n\n  geocoded_by :address_details\n  after_validation :geocode\n\n  def address_details\n    \"New York, NY\"\n  end\nend\n\nGeocoder.configure(lookup: :test, ip_lookup: :test)\nGeocoder::Lookup::Test.add_stub(\n  \"New York, NY\", [\n    {\n    'coordinates'  => [40.7143528, -74.0059731],\n    'address'      => 'New York, NY, USA',\n    'state'        => 'New York',\n    'state_code'   => 'NY',\n    'country'      => 'United States',\n    'country_code' => 'US'\n    }\n  ]\n)\n\nclass BugTest < Minitest::Test\n  def test_no_exception_raised\n    organization = Organization.create!\n    location = organization.locations.create! { |l| l.build_address }\n    location.sales.create!\n\n    relation = Sale.joins(:organization).merge(Organization.all)\n    relation = relation.includes(location: [:organization, :address])\n    relation = relation.merge(Address.near('New York, NY')).references(:addresses)\n\n    relation.to_a\n  end\nend\nExpected behavior\nThe query should continue to select all columns in the source table and not raise an ActiveModel:: MissingAttributeError  error.\nActual behavior\nUsing the relation immediately raises an ActiveModel:: MissingAttributeError error.\nSystem configuration\nRails version: 6.1.0\nRuby version: 2.7.2\nPossibly related to #40743", "number_of_comments": 9, "comment_authors": ["macfanatic", "p8", "p8", "p8", "macfanatic", "p8", "macfanatic", "p8", "macfanatic"]},
{"title": "has_many through with scope block, STI and polymorphic associations that worked in 5.0 breaks in 6.0+", "link": "https://github.com/rails/rails/issues/40109", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8708980083465576, "creation_date": "2020-08-26T08:26:37Z", "issue_submitter": "henrik", "body": "We have a has_many …, through: that also involves a scope block, STI and polymorphic associations (bingo!).\nJoining on this association worked fine in Rails 5.0.7.2, but broke when updating to 5.1.7. We've checked and it also fails on 5.2.4.3 and 6.0.3.2.\nSteps to reproduce\nUPDATE: See reproduction script in #40109 (comment) instead.\nSet up associations similar to\nclass Item < ApplicationRecord\n  has_many :invoice_lines, as: :invoicable\n\n  has_many :item_invoices,\n    -> { where(\"buyer_invoices.type\" => ItemInvoice.name).distinct },  # STI stores leaf class.\n    through: :invoice_lines,\n    source: :invoice,\n    source_type: \"BuyerInvoice\"  # Polymorphic stores base class.\n\nclass InvoiceLine < ApplicationRecord\n  belongs_to :invoicable, polymorphic: true  # E.g. Item\n  belongs_to :invoice, polymorphic: true  # BuyerInvoice or SellerInvoice\nend\nFor context, ItemInvoice is a STI subclass of BuyerInvoice. There is a buyer_invoices table. SellerInvoice/seller_invoices are a completely separate table and inheritance chain.\nNow, try this:\nItem.joins(:item_invoices).to_a\n\nExpected behavior\nIt works, returning an array of invoices.\nActual behavior\nIt raises\n\nActiveRecord::StatementInvalid:\nPG::UndefinedTable: ERROR:  missing FROM-clause entry for table \"buyer_invoices\"\n\nThe reason is that it applies the scope block twice. Both when joining invoice_lines and when joining buyer_invoices.\nBut the condition in the scope block is not valid when joining invoice_lines (there's no buyer_invoices table to reference yet) and so it causes this error.\nThis is the query (I renamed some things to simplify for this example, believe it or not, so I hope I got it right):\nSELECT \"items\".* FROM \"items\"\nINNER JOIN \"invoice_lines\"\n  ON \"invoice_lines\".\"invoicable_type\" = 'Item'\n  AND \"invoice_lines\".\"invoice_type\" = 'BuyerInvoice'\n  AND \"invoice_lines\".\"invoicable_id\" = \"items\".\"id\"\n  AND \"invoices\".\"type\" = 'ItemInvoice'  -- This shouldn't be here!\nINNER JOIN \"invoices\"\n  ON \"invoices\".\"type\" = 'ItemInvoice'\n  AND \"invoices\".\"id\" = \"invoice_lines\".\"invoice_id\"\nNote that the \"invoices\".\"type\" = 'ItemInvoice' condition is included both when joining invoice lines and when joining invoices. In Rails 5.0, it was only included when joining invoices, and then the query worked fine.\nsome_item.item_invoices works fine. The issue happens when joining (or eager_loading, or includeing if it chooses to use JOINs).\nWe've worked around it by joining an association without the condition, and then adding the condition on top: https://stackoverflow.com/a/63506810/6962 But this makes our code uglier and adds duplication.\nSystem configuration\nRails version: 6.0.3.2\nRuby version: 2.6.6", "number_of_comments": 21, "comment_authors": ["henrik", "KapilSachdev", "pixeltrix", "henrik", "pixeltrix", "rails-bot", "henrik", "rails-bot", "olleolleolle", "henrik", "rails-bot", "rails-bot", "henrik", "henrik", "olleolleolle", "rails-bot", "henrik", "rails-bot", "skipkayhil", "joshuay03", "henrik"]},
{"title": "LenthValidator breaks if nil value has a minimum length with a proc.", "link": "https://github.com/rails/rails/issues/40642", "labels": ["\n                activemodel\n", "\n                attached PR\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9079046249389648, "creation_date": "2020-11-18T10:55:22Z", "issue_submitter": "sliiser", "body": "Steps to reproduce\nrequire 'active_model'\n\nclass Foo\n  include ActiveModel::Validations\n\n  validates :bar, length: { minimum: ->(record) { record.one + 2 } }\n\n  def one\n    1\n  end\n\n  def bar\n    nil\n  end\nend\nf = Foo.new\nf.valid? #=> same error as next line in 6.0, false as expected in 6.1\nf.errors.messages #=> NoMethodError (undefined method `one' for #<Hash:0x00007fac793a2280>)\nExpected behavior\n{:bar=>[\"is too short (minimum is 3 characters)\"]} \nActual behavior\nNoMethodError (undefined method `one' for #<Hash:0x00007fac793a2280>)\n\nSystem configuration\nRails version: both 6.0.3 and master\nRuby version: 2.5.3\nNotes\nThere is code to support procs in LengthValidator but it's not called if value is nil and key is :minimum, it works as expected if value is empty string or key is :maximum instead.\nIt breaks on .valid? in 6.0 since messages are generated immediately, breaks later on master since message generation happens later.\nThe proc is not called in the validator in this specific case and the proc is passed onto message generation. That's why it's called with some random hash instead of the expected record.", "number_of_comments": 8, "comment_authors": ["sliiser", "tahsin352", "umarsheikh", "sliiser", "tahsin352", "sliiser", "tahsin352", "rails-bot"]},
{"title": "HostAuthorization: confusing error message when using multiple hostnames", "link": "https://github.com/rails/rails/issues/40230", "labels": ["\n                actionpack\n", "\n                attached PR\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9386894702911377, "creation_date": "2020-09-15T19:58:57Z", "issue_submitter": "Eusebius1920", "body": "Steps to reproduce\nCalling the application with different values for HTTP_HOST and HTTP_X_FORWARDED_HOST while HostAuthorization is enabled (i.e. config.hosts is set/active) while at least HTTP_HOST is not present in config.hosts.\nExpected behavior\nError message that displays the user that both hostnames are checked and need to be added to config.hosts.\nExample:\nBlocked hosts: HTTP_HOST, HTTP_X_FORWARDED_HOST\n---------------------------------------------------------------------------------------------\nTo allow requests to HTTP_HOST, HTTP_X_FORWARDED_HOST, add the following to your environment configuration:\nconfig.hosts << \"HTTP_HOST\"\nconfig.hosts << \"HTTP_X_FORWARDED_HOST\"\n\nActual behavior\nOutput\nBlocked host: HTTP_X_FORWARDED_HOST\n---------------------------------------------------------------------------------------------\nTo allow requests to HTTP_X_FORWARDED_HOST, add the following to your environment configuration:\nconfig.hosts << \"HTTP_X_FORWARDED_HOST\"\n\nIf you then add HTTP_X_FORWARDED_HOST to config.hosts the error message is still displayed (unchanged) if HTTP_HOST is missing.\nSystem configuration\nRails version: 6.0.3.3 (should be present since introduction of HostAuthorization in v6.0.0.beta1)\nRuby version: any\nI created a commit that changes / fixes that behavior (See here) in a forked repository. I can create a pull request if needed / wanted.\nEdit: Fixed wrong header name in issue description", "number_of_comments": 19, "comment_authors": ["Eusebius1920", "rails-bot", "Eusebius1920", "rails-bot", "Eusebius1920", "rails-bot", "Eusebius1920", "rails-bot", "Eusebius1920", "rails-bot", "Eusebius1920", "rails-bot", "Eusebius1920", "rails-bot", "Eusebius1920", "skipkayhil", "Eusebius1920", "rails-bot", "Eusebius1920"]},
{"title": "Public storage tests are not ran in CI", "link": "https://github.com/rails/rails/issues/39015", "labels": ["\n                activestorage\n", "\n                pinned\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.1082854270935059, "creation_date": "2020-04-22T14:24:50Z", "issue_submitter": "peterzhu2118", "body": "Steps to reproduce\nCredentials for public buckets are not supplied on CI on master so public service tests are not ran (feature was implemented in #36729).\nExpected behavior\nTests are ran on CI on master.\nActual behavior\nSkipping Azure Storage Public Service tests because no Azure configuration was supplied\nSkipping GCS Public Service tests because no GCS configuration was supplied\nSkipping S3 Public Service tests because no S3 configuration was supplied\nAre present in the logs for Active Storage tests.\nSystem configuration\nRails version: master\nRuby version: all", "number_of_comments": 5, "comment_authors": ["peterzhu2118", "rails-bot", "peterzhu2118", "lfalcao", "ghiculescu"]},
{"title": "Cookie store configured with domain all, fail for 3-letter domains with a 2-letter TLD", "link": "https://github.com/rails/rails/issues/40200", "labels": ["\n                actionpack\n", "\n                attached PR\n", "\n                pinned\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.1191020011901855, "creation_date": "2020-09-08T08:29:50Z", "issue_submitter": "hovsater", "body": "Steps to reproduce\nExpected behavior\nWhen the cookie store has been configured using domain: :all, the cookie domain for whatever.abc.se should resolve to .abc.se.\nActual behavior\nit resolves to .whatever.abc.se. This is due to the following regexp\n\n\n\nrails/actionpack/lib/action_dispatch/middleware/cookies.rb\n\n\n         Line 298\n      in\n      7af59e1\n\n\n\n\n\n\n DOMAIN_REGEXP = /[^.]*\\.([^.]*|..\\...|...\\...)$/ \n\n\n\n\n\nand to the fact that the regexp also handle TLDs such as com.au or co.uk.\n\n\n\nrails/actionpack/lib/action_dispatch/middleware/cookies.rb\n\n\n        Lines 287 to 288\n      in\n      7af59e1\n\n\n\n\n\n\n # The top level domain can be any string without a period or \n\n\n\n # **.**, ***.** style TLDs like co.uk or com.au \n\n\n\n\n\nA quick fix would be to set the tld_length option to 2 which causes the resolution to proceed as expected, but at the same time I'd expect the default case to either \"just work\" or otherwise make the configuration explicit.\nAs it stands right now, Rails is making arbitrary assumptions, and if those assumptions happen to be invalid, it resolves the domain incorrectly without the user even knowing.\nSystem configuration\nRails version: 4.2 (should be present in Rails 6 as well)\nRuby version: 2.7", "number_of_comments": 11, "comment_authors": ["hovsater", "p8", "hovsater", "p8", "p8", "rails-bot", "hovsater", "rails-bot", "hovsater", "rails-bot", "hovsater"]},
{"title": "HTML fallback for .js paths is dangerous", "link": "https://github.com/rails/rails/issues/39475", "labels": ["\n                security\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.140275478363037, "creation_date": "2020-05-29T17:58:15Z", "issue_submitter": "tenderlove", "body": "This issue came in from Hackerone (here is the link for those with access).  I'm filing an issue here because the Hackerone ticket is very old, and I don't see any way to actually fix the issue without definitely breaking backwards compatibility.\nThe issue is that controllers will fall back to HTML for .js requests (unless the controller uses an explicit respond_to handler).  For example a controller like this:\nclass ContributorsController\n  def index\n    @contributors = if params[:release_id].present?\n      set_release\n      Contributor.all_with_ncommits_by_release(@release)\n    else\n      Contributor.all_with_ncommits\n    end\n  end\nend\n(I stole this code from here to show this is a problem with real apps).\nIf someone makes a request to this with a .js extension, Rails will render the HTML template since there is no JS template.  If you go to this link you can see that the HTML view is rendered even though we asked for .js.\nThe issue is that some caching proxies will see the .js extension and cache the response, including any authenticity tokens.  A crafty attacker could send someone a link to a Rails app that's behind a proxy like this, but with a .js extension.  After the victim clicks the link, the attacker can access the proxy and steal the cached authenticity token.\nMy personal opinion is that we should eliminate the fallback from .js.  If someone requests a .js and there is no template, we should 404 or something.  However, I'm also 99% sure that someone is relying on this behavior and we'll break apps.", "number_of_comments": 4, "comment_authors": ["tenderlove", "tenderlove", "gurshafriri", "jeremy"]},
{"title": "quote_bound_value does not handle ranges of Time", "link": "https://github.com/rails/rails/issues/36682", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9630377292633057, "creation_date": "2019-07-15T07:14:11Z", "issue_submitter": "Tolsto", "body": "Steps to reproduce\nrange = Time.now..Time.now\nActiveRecord::Base.send :quote_bound_value, range\n\nExpected behavior\nrange = DateTime.now..2.days.from_now\nActiveRecord::Base.send :quote_bound_value, range\n=> \"'2019-07-15 07:02:38.929537','2019-07-16 07:02:38.929537','2019-07-17 07:02:38.929537'\"\n\nThis is what happens for a Range of DateTime. However, I'm not sure if this should even be the expected behaviour for a Range of DateTime. E.g. the Postgres connection adapter can handle Ranges https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/postgresql/quoting.rb#L141\nShouldn't we, therefore, pass the entire range to c.quote?\nActual behavior\n=> can't iterate from Time\nSystem configuration\nRails version:\n5.2.3\nRuby version:\n2.6.3", "number_of_comments": 7, "comment_authors": ["Tolsto", "wjessop", "wjessop", "wjessop", "Tolsto", "wjessop", "Tolsto"]},
{"title": "Record with attribute of custom type fails to create when value is 0", "link": "https://github.com/rails/rails/issues/38707", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.1542861461639404, "creation_date": "2020-03-12T03:29:14Z", "issue_submitter": "Drenmi", "body": "I have a Duration type which I use to cast ActiveSupport durations to and from the database.\nCreation of new record fails if the record has a value of 0. It fails because the attribute is completely removed from the INSERT statement, leading to a NULL constraint violation.\nNotable is that updating an existing record with the same value works without problem. (The correct UPDATE statement is generated.)\nAlso ActiveRecord reports the record as #valid? both before and after the failed save.\nSteps to reproduce\n# app/types/duration.rb\n#\nclass Duration < ActiveRecord::Type::Integer\n  def cast(value)\n    if value.present? && !value.is_a?(ActiveSupport::Duration)\n      super(value.to_i.seconds)\n    else\n      super\n    end\n  end\n\n  def serialize(value)\n    value.to_i\n  end\n\n  def deserialize(value)\n    value.to_i.seconds\n  end\nend\n# app/models/processor.rb\n#\nclass Processor < ApplicationRecord\n  attribute :processing_delay, :duration\n\n  validates :processing_delay, presence: true, numericality: { greater_than_or_equal_to: 0 }\nend\nProcessor.create!(name: \"foo\", processing_delay: 0.seconds)\nExpected behavior\nRecord saves successfully.\nActual behavior\nActiveRecord::NotNullViolation (PG::NotNullViolation: ERROR:  null value in column \"processing_delay\" violates not-null constraint)\n\nThe generated INSERT statement:\nINSERT INTO \"processors\" (\"name\") VALUES ($1) RETURNING \"id\"\nSystem configuration\nRails version:\n2.6.5\nRuby version:\n6.0.2.1", "number_of_comments": 10, "comment_authors": ["Drenmi", "yoelblum", "rails-bot", "Drenmi", "Drenmi", "eugeneius", "yoelblum", "eugeneius", "Drenmi", "yoelblum"]},
{"title": "Add top-level Rails.application.url for canonical reference", "link": "https://github.com/rails/rails/issues/39566", "labels": ["\n                actionpack\n", "\n                pinned\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.1092829704284668, "creation_date": "2020-06-07T18:09:19Z", "issue_submitter": "dhh", "body": "We often need to know the application's URL outside of the request/response cycle. This can be in jobs or in mailers or for configuration purposes. Let's extract this concept as Rails.application.url, which is configured by default in the environment files.\nWhat we'd like is for config/development.rb to have something like:\n  # Application URL\n  config.url = \"https://hey.test\"\nWhich is then turned into a ActionDispatch::Http::URI behind the scenes, and made available as Rails.application.url. This URL should automatically be configured as the default URL for mailers and renderers.\nHere's a quick stab at an extraction that take the shared logic from ActionDispatch::Http::URL and turns into a decoration on top of stdlib's URI. The ActionDispatch::Http::URL is a better name, but it's unfortunately setup as a module that's included in ActionDispatch::Http::Request. It's possible that we could just rename that, though, and then reuse this name instead of URI:\nclass ActionDispatch::Http::URI\n  mattr_accessor :tld_length, default: 1\n\n  delegate :scheme, :host, :port, :path, :query, :to_s, to: :uri\n  delegate :scheme=, :host=, :port=, :path=, :query=, to: :uri\n\n  class << self\n    # Returns the domain part of a host given the domain level.\n    #\n    #    # Top-level domain example\n    #    extract_domain('www.example.com', 1) # => \"example.com\"\n    #    # Second-level domain example\n    #    extract_domain('dev.www.example.co.uk', 2) # => \"example.co.uk\"\n    def extract_domain(host, tld_length)\n      extract_domain_from(host, tld_length) if named_host?(host)\n    end\n\n    # Returns the subdomains of a host as an Array given the domain level.\n    #\n    #    # Top-level domain example\n    #    extract_subdomains('www.example.com', 1) # => [\"www\"]\n    #    # Second-level domain example\n    #    extract_subdomains('dev.www.example.co.uk', 2) # => [\"dev\", \"www\"]\n    def extract_subdomains(host, tld_length)\n      if named_host?(host)\n        extract_subdomains_from(host, tld_length)\n      else\n        []\n      end\n    end\n\n    # Returns the subdomains of a host as a String given the domain level.\n    #\n    #    # Top-level domain example\n    #    extract_subdomain('www.example.com', 1) # => \"www\"\n    #    # Second-level domain example\n    #    extract_subdomain('dev.www.example.co.uk', 2) # => \"dev.www\"\n    def extract_subdomain(host, tld_length)\n      extract_subdomains(host, tld_length).join(\".\")\n    end\n\n    private\n      def extract_domain_from(host, tld_length)\n        host.split(\".\").last(1 + tld_length).join(\".\")\n      end\n  end\n\n  def initialize(uri_string)\n    @uri = URI.parse(uri_string)\n  end\n\n  def protocol\n    \"#{scheme}://\"\n  end\n\n  # Returns a \\host:\\port string for this request, such as \"example.com\" or\n  # \"example.com:8080\". Port is only included if it is not a default port\n  # (80 or 443).\n  def host_with_port\n    \"#{host}#{port_string}\"\n  end\n\n  # Returns a string \\port suffix, including colon, like \":8080\" if the \\port\n  # number of this request is not the default HTTP \\port 80 or HTTPS \\port 443.\n  def port_string\n    standard_port? ? \"\" : \":#{port}\"\n  end\n\n  # Returns the standard \\port number for this request's protocol.\n  def standard_port\n    scheme == \"https\" ? 443 : 80\n  end\n\n  # Returns whether this request is using the standard port.\n  def standard_port?\n    port == standard_port\n  end\n\n  # Returns a hash with the host and the protocol, for use with URL calls.\n  def host_and_protocol\n    { host: host, protocol: protocol }\n  end\n\n  # Returns the \\domain part of a \\host, such as \"rubyonrails.org\" in \"www.rubyonrails.org\". You can specify\n  # a different <tt>tld_length</tt>, such as 2 to catch rubyonrails.co.uk in \"www.rubyonrails.co.uk\".\n  def domain(tld_length = @@tld_length)\n    self.class.extract_domain(host, tld_length)\n  end\n\n  # Returns all the \\subdomains as an array, so <tt>[\"dev\", \"www\"]</tt> would be\n  # returned for \"dev.www.rubyonrails.org\". You can specify a different <tt>tld_length</tt>,\n  # such as 2 to catch <tt>[\"www\"]</tt> instead of <tt>[\"www\", \"rubyonrails\"]</tt>\n  # in \"www.rubyonrails.co.uk\".\n  def subdomains(tld_length = @@tld_length)\n    self.class.extract_subdomains(host, tld_length)\n  end\n\n  # Returns all the \\subdomains as a string, so <tt>\"dev.www\"</tt> would be\n  # returned for \"dev.www.rubyonrails.org\". You can specify a different <tt>tld_length</tt>,\n  # such as 2 to catch <tt>\"www\"</tt> instead of <tt>\"www.rubyonrails\"</tt>\n  # in \"www.rubyonrails.co.uk\".\n  def subdomain(tld_length = @@tld_length)\n    self.class.extract_subdomain(host, tld_length)\n  end\n\n  private\n    attr_accessor :uri\nend", "number_of_comments": 10, "comment_authors": ["dhh", "vipulnsward", "dhh", "n-rodriguez", "dhh", "simi", "ansonhoyt", "Juice10", "wdiechmann", "schmijos"]},
{"title": "quoted_date has an hour window of failure for timestamp with timezone", "link": "https://github.com/rails/rails/issues/38189", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.1912992000579834, "creation_date": "2020-01-08T15:56:47Z", "issue_submitter": "JasonHerr", "body": "Description\nThis is a catch-22. The code is built to work well with timestamp without time zone (and that is the convention for things like created_at/updated_at).  However, for timestamp with time zone and timezones with DST there exists a window of time where this causes any timestamp within that window to disappear, shifting the offset to standard time.\nSteps to reproduce\n\nHave a model with a column that has postgresql timestamp with time zone\nupdate that column with a Time during that window.\nRetrieving that column of that row shifts it to the prevailing timezone.\n\nFor details, see actual behavior.\nExpected behavior\nThe timestamp with timezone should be persisted with the correct timezone.\nActual behavior\nExample (while in Eastern Standard Time):\n\nIn rails console, using a model with a column that's backed by a postgresql timestamp with time zone, update the column to a time during that period.\nmodel.update(time_column: Time.new(2018,11,04,01,01,00,'-04:00')) \nCheck the models time_column:\n\n\nmodel.time_column\n=> Sun, 04 Nov 2018 01:01:00 EDT -04:00\n\n\nReload the model\n\n\nmodel.reload\n\n\nCheck the model's time_column\n\n\nmodel.time_column\n=> Sun, 04 Nov 2018 01:01:00 EST -05:00\n\n\nCheck the postgresql commandline:\n\n# select time_column from models where id = X; -- fictitious id\n   time_column\n------------------------\n 2018-11-04 01:01:00-05\n(1 row)\nSystem configuration\nRails version:\n2.5\nRuby version:\n2.4\nAttempted workarounds\nAdd timezone to all db activities:\nconfig/initializers/time_formats.rb\nTime::DATE_FORMATS[:db] = lambda { |time|\n  offset_format = time.formatted_offset(false)\n  time.strftime(\"%Y-%m-%d %H:%M:%S.%6N#{offset_format}\")\n}\nBroken by https://github.com/rails/rails/blob/master/activerecord/lib/active_record/connection_adapters/abstract/quoting.rb#L115\nThis appends the microseconds to the string after the offset format.\nFinal solution?\nI will probably have to monkey patch which I hate. I don't see a good global resolution offhand unless there's a new approach for timestamp with timezone that is separate from timestamp without time zone?\nLooking for other suggestions.", "number_of_comments": 6, "comment_authors": ["JasonHerr", "rails-bot", "jonathanhefner", "JasonHerr", "jonathanhefner", "jonathanhefner"]},
{"title": "ActiveStorage direct uploads can't specify a service_name?", "link": "https://github.com/rails/rails/issues/38940", "labels": ["\n                activestorage\n", "\n                attached PR\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.1832919120788574, "creation_date": "2020-04-13T20:58:24Z", "issue_submitter": "scottjg", "body": "hey @DmitryTsepelev -- I brought my app to rails master, so that i could try out your PR: #34935\nunfortunately, I can't seem to figure out how direct uploads can respect the service specified in the model? DirectUploadsController doesn't seem to allow passing in a service (though I'm not sure you'd want that to be user controlled necessarily?). I was expecting somehow for the rails form helpers to somehow signal to the DirectUploadsController what service to use, based on the model it was posting to.\nI'm assuming I'm just missing something, but it seems like there might not be a way to use direct uploads with your PR changes? I guess you could write your own DirectUploadsController?\n\nSteps to reproduce\nuse  a form_with in your erb that points to a model, make a file field the same name as a has_one_attached field and direct_upload: true. then upload a file via your web browser\nExpected behavior\ndirect upload will be directed at the service specified in the model\nActual behavior\ndirect upload goes to the default storage adapter\nSystem configuration\nRails version: c1ccc6a0d240\nRuby version: 2.5.1p7", "number_of_comments": 16, "comment_authors": ["scottjg", "DmitryTsepelev", "scottjg", "DmitryTsepelev", "rails-bot", "scottjg", "rails-bot", "DmitryTsepelev", "rails-bot", "scottjg", "gstokkink", "egorslam", "ghiculescu", "skipkayhil", "scottjg", "skipkayhil"]},
{"title": "save! returns nil when has_one association throws abort", "link": "https://github.com/rails/rails/issues/36833", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7836182117462158, "creation_date": "2019-08-01T14:56:16Z", "issue_submitter": "giraffate", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"6.0.0\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :users, force: true do |t|\n  end\n\n  create_table :profiles, force: true do |t|\n    t.integer :user_id\n  end\nend\n\nclass User < ActiveRecord::Base\n  has_one :profile\nend\n\nclass Profile < ActiveRecord::Base\n  belongs_to :user\n\n  before_save do\n    # Do something, but finally throw abort\n    throw(:abort)\n  end\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    user = User.new\n    user.build_profile\n\n    assert_raises { user.save! }\n  end\nend\n\nExpected behavior\nsave! raise an exception (for example ActiveRecord::RecordInvalid) when has_one association is invalid for throwing abort.\nActual behavior\nsave! returns nil and does not save the records.\nSystem configuration\nRails version: 6.0.0\nRuby version: 2.6.2", "number_of_comments": 3, "comment_authors": ["giraffate", "giraffate", "rails-bot"]},
{"title": "Attaching an ActiveStorage blob in a model callback creates a SystemStackError", "link": "https://github.com/rails/rails/issues/37022", "labels": ["\n                activestorage\n", "\n                With reproduction steps\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.705573558807373, "creation_date": "2019-08-22T22:36:55Z", "issue_submitter": "jarydkrish", "body": "Summary\nCalling attach in an model callback causes a SystemStackError: stack level too deep.\nThis is specific to Rails 6, as it didn't happen previously in a Rails 5.2.3 app that I tested this in.\nSteps to reproduce\nThe simplest way to reproduce is to pull down an example repo, and run rails test: https://github.com/jarydkrish/attach-in-model-callbacks\nThis can be reproduced in a Rails 6 app with a model like the following:\nclass User < ApplicationRecord\n  has_one_attached :avatar\n\n  attr_accessor :copy_avatar_from_user_id\n\n  # Callback that triggers an endless loop\n  after_save :copy_avatar, if: :should_copy_avatar_from_user?\n\n  def should_copy_avatar_from_user?\n    copy_avatar_from_user_id.present?\n  end\n\n  # Copy a user avatar from a different user\n  def copy_avatar\n    user_to_copy_from = User.find_by(id: copy_avatar_from_user_id)\n    avatar.attach(user_to_copy_from.avatar.blob)\n  end\nend\nExpected behavior\nI would expect the above code to copy the ActiveStorage attachment to a different model, or at least not return an error.\nHere is an example of the same code running in a Rails 5.2.3 application, which works as expected: https://github.com/jarydkrish/attach-in-model-callbacks-rails-5\nActual behavior\nRunning rails test in my example repo gives the following:\n➜  attach-in-model-callbacks git:(master) rails test\nRunning via Spring preloader in process 59406\nRun options: --seed 22489\n\n# Running:\n\nE\n\nError:\nUserTest#test_attaching_an_image_via_callback:\nSystemStackError: stack level too deep\n    app/models/user.rb:16:in `copy_avatar'\n    app/models/user.rb:16:in `copy_avatar'\n    app/models/user.rb:16:in `copy_avatar'\n    app/models/user.rb:16:in `copy_avatar'\n    app/models/user.rb:16:in `copy_avatar'\n    ...\n    app/models/user.rb:16:in `copy_avatar'\n    app/models/user.rb:16:in `copy_avatar'\n    app/models/user.rb:16:in `copy_avatar'\n    test/models/user_test.rb:19:in `block in <class:UserTest>'\n\n\nrails test test/models/user_test.rb:4\n\n\n\nFinished in 1.059573s, 0.9438 runs/s, 0.0000 assertions/s.\n1 runs, 0 assertions, 0 failures, 1 errors, 0 skips\nSystem configuration\nRails version: 6.0.0\nRuby version: 2.6.3", "number_of_comments": 5, "comment_authors": ["jarydkrish", "jarydkrish", "santib", "diegosteiner", "GabrielGCardoso"]},
{"title": "ActiveRecord::RecordNotUnique When Calling Active Storage attach", "link": "https://github.com/rails/rails/issues/36578", "labels": ["\n                activestorage\n", "\n                With reproduction steps\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7555909156799316, "creation_date": "2019-06-29T23:50:10Z", "issue_submitter": "iamjohnford", "body": "Our app uses Active Storage and automatically uploads files once selected or dropped on the file area. When uploading multiple files at once, we started running into ActiveRecord::RecordNotUnique errors such as the following:\n\nActiveRecord::RecordNotUnique in MessagesController#upload PG::UniqueViolation: ERROR: duplicate key value violates unique constraint \"index_active_storage_attachments_uniqueness\" DETAIL: Key (record_type, record_id, name, blob_id)=(Message, 1, images, 1271) already exists.\n\nI confirmed that each file key we're sending to .attach is unique when this error happens and tried stripping away as much code as possible and we're still seeing the error.\nSteps to reproduce\nI've created a stripped down sample project with the minimum code to reproduce the error. Follow the basic instructions in the README to get app running and upload all of the test files (test/fixtures/files) at once. It may take a couple of tries to get the error to happen and uploading more and larger files usually helps reproduce the error.\nThe error is being thrown in app/controllers/messages_controller.rb:17 when @message.images.attach(params[:files]) is called.\nThe JavaScript that handles the automatic uploading is in app/javascript/controllers/upload_controller.js. uploadSuccess() sends the successfully uploaded file key to messages_controller.rb#upload, via Rails.ajax, which is where the error is thrown.\nA bit of the error is printed out on the page when the upload fails and the stacktrace should show up in the web browser console.\nExpected behavior\nWhen .attach is called no error should be thrown.\nActual behavior\nActiveRecord::RecordNotUnique in MessagesController#upload\n\nPG::UniqueViolation: ERROR:  duplicate key value violates unique constraint \"index_active_storage_attachments_uniqueness\"\nDETAIL:  Key (record_type, record_id, name, blob_id)=(Message, 1, images, 1271) already exists.\n\nExtracted source (around line #661):\n\n#659           log(sql, name, binds, type_casted_binds) do\n#660             ActiveSupport::Dependencies.interlock.permit_concurrent_loads do\n*661               @connection.exec_params(sql, type_casted_binds)\n#662             end\n#663           end\n#664         end\n\nExtracted source (around line #661):\n\n#659           log(sql, name, binds, type_casted_binds) do\n#660             ActiveSupport::Dependencies.interlock.permit_concurrent_loads do\n*661               @connection.exec_params(sql, type_casted_binds)\n#662             end\n#663           end\n#664         end\n\nExtracted source (around line #48):\n\n#46       def permit_concurrent_loads\n#47         @lock.yield_shares(compatible: [:load]) do\n*48           yield\n#49         end\n#50       end\n#51 \n\nHere's a gist with the entire stacktrace: https://gist.github.com/iamjohnford/c39e42d15e71702962ed111461b4b0c2\nSystem configuration\nRails version: 6.0.0.rc1\nRuby version: 2.6.3\nPostgres version: 11.2", "number_of_comments": 4, "comment_authors": ["iamjohnford", "glennfu", "iamjohnford", "rwojnarowski"]},
{"title": "Modified Active Record collections may return same cache_version when using limit", "link": "https://github.com/rails/rails/issues/37555", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.768040657043457, "creation_date": "2019-10-24T19:57:37Z", "issue_submitter": "marckohlbrugge", "body": "Active Record collections might generate the same cache_key and cache_version despite containing different records. This can happen when you use limit (e.g. for pagination) and destroy one of the collection's records, as long as it's not the most recent one.\nThis way cache_key stays the same because the query is unchanged, and cache_version is the same because the collection size is the same (due to limit) and max(updated_at) is untouched too.\nSteps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n    t.timestamps\n  end\nend\n\nclass Post < ActiveRecord::Base\nend\n\nclass BugTest < Minitest::Test\n  def test_cache_version\n    6.times { Post.create }\n\n    posts = Post.order(created_at: :desc).limit(3)\n\n    ids_1 = posts.pluck(:id)\n    cache_key_1 = posts.cache_key\n    cache_version_1 = posts.cache_version\n\n    posts.second.destroy\n    posts = Post.order(created_at: :desc).limit(3)\n\n    ids_2 = posts.pluck(:id)\n    cache_key_2 = posts.cache_key\n    cache_version_2 = posts.cache_version\n\n    assert(ids_1 != ids_2)\n    assert_equal cache_key_1, cache_key_2\n    assert(cache_version_1 != cache_version_2)\n  end\nend\nExample app available as well: https://github.com/marckohlbrugge/rails-6-collection-caching-bug\nExpected behavior\nI expect collection.cache_version to be different if the collection has changed.\nActual behavior\ncollection.cache_version remains unchanged.\nSystem configuration\nRails version: 6.0.0\nRuby version: 2.6.3p62\nRelated (but closed) issues\n#34408 #31996 #34093", "number_of_comments": 12, "comment_authors": ["marckohlbrugge", "alipman88", "victor-am", "alipman88", "victor-am", "Duleja", "alipman88", "rails-bot", "alipman88", "rails-bot", "rails-bot", "ayrton"]},
{"title": "Bring Many monad to Active Support and Active Record relations", "link": "https://github.com/rails/rails/issues/37875", "labels": ["\n                activesupport\n", "\n                pinned\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.768019437789917, "creation_date": "2019-12-03T21:47:14Z", "issue_submitter": "dhh", "body": "Inspired by @tomstuart's lovely talk on monads in Ruby, I'd like to dip our feet in with Rails on the Many monad.\nTom has gracefully permitted us to copy his work from the monads gem into Active Support as needed. The API I'm most keen to see is the one that allows us to use the Many monad with Active Record relations, like so:\nBlogs.all.with_many.categories.posts.comments.body.split(/\\s+/).values\nIt's a huge level up over the flat_map version:\nBlogs.all.flat_map(:categories).flat_map(:posts).flat_map(:comments).flat_map(:body).split(/\\s+/).values\nI've wanted this for a very long time, but could think of the right way to express it. The monad is the way!\nSo to make this work, I'd propose that we pull in the Maybe monad into Active Support, then do a core extension for Enumerable called #with_many, and then making sure that plays nicely with the AR relations (I think it should, out of the box).", "number_of_comments": 10, "comment_authors": ["dhh", "btir", "simi", "palkan", "giovannibenussi", "kddnewton", "natematykiewicz", "kddnewton", "kddnewton", "rails-bot"]},
{"title": "Action Text pdf previews are missing in trix editor", "link": "https://github.com/rails/rails/issues/38027", "labels": ["\n                actiontext\n", "\n                pinned\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.301825761795044, "creation_date": "2019-12-18T18:00:09Z", "issue_submitter": "rolandasb", "body": "PR #37868 seems to introduce regression where Action Text would try render PDFs as images, rather than using generated preview.\n\nSteps to reproduce\n\nClone https://github.com/rolandasb/action-text-bug\nVisit /posts\nCreate a post with pdf attachment\nSave & open edit post form\n\nExpected behavior\nPDF preview should be shown.\nActual behavior\nAction Text tries to render PDF as an image.\nSystem configuration\nRails version: master\nRuby version: 2.6.5", "number_of_comments": 8, "comment_authors": ["rolandasb", "rails-bot", "abhaynikam", "haroldus-", "abhaynikam", "SebouChu", "daniel-lenz", "hiveer"]},
{"title": "Rails 6 regression in after_rollback callback not called for new records", "link": "https://github.com/rails/rails/issues/36965", "labels": ["\n                activerecord\n", "\n                regression\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.8431005477905273, "creation_date": "2019-08-18T00:31:35Z", "issue_submitter": "jeffblake", "body": "Steps to reproduce\nTry this test case, it fails in Rails 6, and passes in 5.2.3\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"6.0.0\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n    t.string :name\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\n\n  validates :name, presence: true\n\n  after_rollback do\n    @rollback_called = true\n  end\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    post = Post.create!\n\n    comment = post.comments.new\n\n    refute comment.save\n    assert comment.instance_variable_get(:\"@rollback_called\")\n\n  end\nend\n\nExpected behavior\nThe rollbacks should be called.\nSystem configuration\nRails version: 6.\nRuby version: 2.6.3\nRelated #36132\ncc @kamipo", "number_of_comments": 15, "comment_authors": ["jeffblake", "jeffblake", "kamipo", "kredei", "zdennis", "zdennis", "zdennis", "tomrossi7", "arni1981", "tomrossi7", "johnloringpollard", "chaffeqa", "gregorbg", "gregorbg", "tenderlove"]},
{"title": "Rails 6 inconsistently overrides ActiveJob queue_adapter setting with TestAdapter", "link": "https://github.com/rails/rails/issues/37270", "labels": ["\n                activejob\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.8027567863464355, "creation_date": "2019-09-23T05:29:13Z", "issue_submitter": "searls", "body": "Summary\nLike many folks, I set this in my config/environments/test.rb file:\nconfig.active_job.queue_adapter = :inline  \nThe reason I do this is to have easy-to-test, deterministic behavior of any potentially async delayed jobs triggered by the application. Under Rails 5, all of my tests (children of ActiveSupport::TestCase and ActionDispatch::SystemTestCase alike) would respect this queue adapter. However, under Rails 6, any built-in Rails test case that includes ActiveJob::TestHelper will also override this setting for all descendants of ActiveJob::Base (relevant source).\nThe net effect of this is that my perform_later and deliver_later calls to jobs aren't being fired synchronously (or, in fact, at all) during my system tests, which is leading to test failures upon upgrading to Rails 6.\nSteps to reproduce\nHere are two tests that demonstrates the problem:\nrequire \"test_helper\"\n\nclass JobTest < ActiveSupport::TestCase\n  class SomeJob < ActiveJob::Base\n    cattr_accessor :job_ran\n\n    def perform\n      @@job_ran = true\n    end\n  end\n\n  def test_some_job\n    assert_equal :inline, Rails.application.config.active_job.queue_adapter\n    assert_equal ActiveJob::QueueAdapters::InlineAdapter, SomeJob.queue_adapter.class\n\n    SomeJob.perform_later\n\n    assert_equal true, SomeJob.job_ran\n  end\nend\n\nclass JobSystemTest < ActionDispatch::SystemTestCase\n  class OtherJob < ActiveJob::Base\n    cattr_accessor :job_ran\n\n    def perform\n      @@job_ran = true\n    end\n  end\n\n  def test_other_job\n    assert_equal :inline, Rails.application.config.active_job.queue_adapter\n    assert_equal ActiveJob::QueueAdapters::InlineAdapter, OtherJob.queue_adapter.class\n\n    OtherJob.perform_later\n\n    assert_equal true, OtherJob.job_ran\n  end\nend\nExpected behavior\nI would expect the behavior to have remained as it did under Rails 5, where the active_job.queue_adapter setting would be respected for all of Rails' test types.\nActual behavior\nThe first test, which descends from ActiveSupport::TestCase will pass and behave as it did under Rails 5. However, the second test, descending from from ActionDispatch::SystemTestCase will now fail under Rails 6, because OtherJob's queue_adapter will have been reset by ActiveJob::TestHelper to be an instance of TestAdapter\nJobSystemTest#test_other_job [/Users/justin/code/testdouble/present/test/lib/job_test.rb:33]:\n--- expected\n+++ actual\n@@ -1 +1 @@\n-ActiveJob::QueueAdapters::InlineAdapter\n+ActiveJob::QueueAdapters::TestAdapter\n\nSystem configuration\nRails version: 6.0.0 as well as 6-0-stable, as of today.\nRuby version: ruby 2.6.3p62 (2019-04-16 revision 67580) [x86_64-darwin18]", "number_of_comments": 36, "comment_authors": ["searls", "searls", "gmcgibbon", "searls", "gmcgibbon", "gmcgibbon", "halo", "searls", "gmcgibbon", "searls", "beauraF", "gmcgibbon", "beauraF", "coorasse", "esaborit4code", "benfb", "jrochkind", "jrochkind", "searls", "jrochkind", "nethad", "nachbar", "yevhene", "yevhene", "jsharpe-ctm", "aiomaster", "ansonhoyt", "rept", "jrochkind", "rept", "halo", "jrochkind", "rept", "rgaufman", "cdan-youdo", "ghiculescu"]},
{"title": "Associated models are validated when there is a custom validation context", "link": "https://github.com/rails/rails/issues/38036", "labels": ["\n                activerecord\n", "\n                regression\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.5745980739593506, "creation_date": "2019-12-19T14:55:56Z", "issue_submitter": "jmao-wellframe", "body": "Steps to reproduce\nAfter we upgraded from Rails 5.2.3 to Rails 5.2.4, one model cannot be saved due to validation errors. We found it was caused by the validation on an associated model which was not validated on Rails 5.2.3.\nThe problem is likely caused by the newly added custom_validation_context? boolean checking at https://github.com/rails/rails/pull/37295/files#diff-829fd5510b886395117cc530518ef7f7R273, which enforces validating associated collections when there is a custom validation context.\nSample code:\nclass Subscription\n  validates :price, presence: true\nend\n\nclass User\n  has_many :subscriptions, dependent: :delete_all\nend\n\n# insert into a valid user record in the database and a subscription without price\nuser = User.first\nuser.subscriptions.first.valid? # this returns false\nuser.valid?(:registration_context) # this used to return true on Rails 5.2.3 and now returns false\n\nExpected behavior\nAssociated models should NOT be validated when there is no validates_associated for a relationship, as described in https://guides.rubyonrails.org/active_record_validations.html#validates-associated\nActual behavior\nAssociated models are validated.\nSystem configuration\nRails version:\n5.2.4\nRuby version:\n2.6.3", "number_of_comments": 3, "comment_authors": ["jmao-wellframe", "lucasfais", "ghiculescu"]},
{"title": "ActiveStorage: no authentication for direct uploads?", "link": "https://github.com/rails/rails/issues/34961", "labels": ["\n                activestorage\n", "\n                security\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3304827213287354, "creation_date": "2019-01-17T17:16:50Z", "issue_submitter": "wesley6j", "body": "The only security measure ActiveStorage::DirectUploadsController has is protect_from_forgery with: :exception. The DirectUpload js client fetches the csrf token from the page header to pass this security check: this.xhr.setRequestHeader(\"X-CSRF-Token\", getMetaValue(\"csrf-token\")).\nSince any Rails generated pages may have this token, The door to upload files is open. Some ActiveStorage users are using ActiveStorage to provide permanent public image links. If the public link can be guessed from the blob information that DirectUpload js client gets, unauthorized users may be able to upload and share files.\nBecause a direct upload input behaves like a form, I think we should apply the idea of per form csrf token. This means each input field with direct_upload: true should have a direct upload csrf token. If a page has multiple such fields, these fields can share the same token. This way, only users with access to pages with direct upload fields can have this token.\nOr even better, the controller can optionally accept a proc to authenticate user. And DirectUpload should accordingly allow setting custom headers. This will also be useful to API only Rails apps.", "number_of_comments": 2, "comment_authors": ["wesley6j", "rails-bot"]},
{"title": "ActionView leaks memory in dev", "link": "https://github.com/rails/rails/issues/35032", "labels": ["\n                actionview\n", "\n                pinned\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3364665508270264, "creation_date": "2019-01-23T21:13:13Z", "issue_submitter": "tenderlove", "body": "I'm working to fix this, but I wanted to open a ticket for tracking.\nThere are a few areas where we can demonstrate that memory is leaking, but I'm only going to focus on one place that is easy to observe here.  ERB templates are compiled to methods on ActionView::Base.  These methods are supposed to be removed when the template object gets GC'd by this finalizer.  Compiled ERB templates are evaluated against an instance of AV::Base, so if we print out a list of methods on AV::Base, that list length should stay fairly stable (if the finalizer is actually running).\nI created a simple app that just prints the number of methods when the view is executing.  Running multiple requests through the app that render this view will show that the number of methods only ever increases.  This means the finalizer is never executed, the methods are never cleaned, and we have a memory leak.\nI believe the cause of this leak is due to this middleware that runs in dev.  It clears the \"DetailsKey\" cache, causing it to return an empty cache on each request.  Now that cache object is actually used as the cache key for another cache.  It is the key variable here.  This means the resolver object (which is also a singleton) contains a cache that constantly grows.  That cache holds instances of \"Templates\", and since that cache is never expired the Templates stay around forever and their finalizers never run (so the methods also stick around forever).\nI ran 500 requests through the \"new\" page.  Here is a graph of the number of methods:\n\nX axis is request number, Y axis is method count.  It leaks 3 methods per request.  The number of methods leaked depends on the number of templates rendered.  This particular test only renders 3 templates, so only 3 methods are leaked per request.\nI think with some careful rearchitecting of this cache we can eliminate the finalizers and also fix the memory leak.  I would like to start evaling templates on to an anonymous subclass of AV::Base.  Any time we need to expire template caches, we just create a new anonymous subclass of AV::Base.  Since we'd generate methods on to an anonymous subclass, we can throw it away at any time and let the GC take care of collecting the methods.  No finalizers required.\nThere are lots of caches in ActionView, and figuring out what they cache and what their dependencies are is very difficult.  I will try to untangle them and fix this issue.", "number_of_comments": 2, "comment_authors": ["tenderlove", "rails-bot"]},
{"title": "has_one doesn't generate an [association]_id method and every other association type does", "link": "https://github.com/rails/rails/issues/36512", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.6276347637176514, "creation_date": "2019-06-18T00:05:44Z", "issue_submitter": "robotdana", "body": "I keep expecting this to work because it does for literally every other association type. and sure I can just use delegate :id, to: :[association], prefix: true but it feels like it's missing.\nI made a test because i was sure it must work and i'm missing something.\nI find i notice it especially on has_one, through: [thing with belongs_to on it]\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\"\n  gem \"sqlite3\"\n  gem \"openssl\", '2.1.2' # i was having trouble booting rails because of this\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true\n\n  create_table :comments, force: true do |t|\n    t.integer :post_id\n  end\n\n  create_table :comment_authors, force: true do |t|\n    t.integer :comment_id\n  end\n\n  create_join_table :posts, :tags\n\n  create_table :tags, force: true\n\n  create_table :attachment, force: true do |t|\n    t.integer :attachable_id\n    t.integer :attachable_type\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\n  has_many :comment_authors, through: :comments\n  has_and_belongs_to_many :tags\n  has_many :attachments, as: :attachable\nend\n\nclass Tags < ActiveRecord::Base\n  has_and_belongs_to_many :posts\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\n  has_one :comment_author\n  has_one :attachment, as: :attachable\nend\n\nclass CommentAuthor < ActiveRecord::Base\n  belongs_to :comment\n  has_one :post, through: :comment\nend\n\nclass Attachment < ActiveRecord::Base\n  belongs_to :attachable, polymorphic: true\nend\n\nclass BugTest < Minitest::Test\n  def test_association_id_exists_for_has_one # fails\n    # the associations exist\n    assert_respond_to Comment.new, :comment_author\n    assert_respond_to Comment.new, :comment_author=\n    # but there's no _id method\n    assert_respond_to Comment.new, :comment_author_id\n    assert_respond_to Comment.new, :comment_author_id=\n  end\n\n  def test_association_id_exists_for_polymorphic_has_one # fails\n    # the associations exist\n    assert_respond_to Comment.new, :attachment\n    assert_respond_to Comment.new, :attachment=\n    # but there's no _id method\n    assert_respond_to Comment.new, :attachment_id\n    assert_respond_to Comment.new, :attachment_id=\n  end\n\n  def test_association_id_exists_for_has_one_through # fails\n    # the associations exist\n    assert_respond_to Comment.new, :post\n    # but there's no _id method\n    assert_respond_to CommentAuthor.new, :post_id\n  end\n\n  def test_association_id_exists_for_belongs_to # literally an attribute the universe would have to break for this to not work\n    assert_respond_to CommentAuthor.new, :comment_id\n    assert_respond_to CommentAuthor.new, :comment_id=\n  end\n\n  def test_association_ids_exists_for_has_many\n    assert_respond_to Post.new, :comment_ids\n    assert_respond_to Post.new, :comment_ids=\n  end\n\n  def test_association_ids_exists_for_polymorphic_has_many\n    assert_respond_to Post.new, :attachment_ids\n    assert_respond_to Post.new, :attachment_ids=\n  end\n\n  def test_association_ids_exists_for_has_many_through\n    assert_respond_to Post.new, :comment_author_ids\n  end\n\n  def test_association_ids_exists_for_habtm\n    assert_respond_to Post.new, :tag_ids\n    assert_respond_to Post.new, :tag_ids=\n  end\nend", "number_of_comments": 5, "comment_authors": ["robotdana", "KapilSachdev", "vishaltelangre", "rails-bot", "marcelolx"]},
{"title": "URL helpers in mounted engine called from renderer produce incorrect paths", "link": "https://github.com/rails/rails/issues/34452", "labels": ["\n                actionpack\n", "\n                attached PR\n", "\n                engines\n", "\n                With reproduction steps\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3744838237762451, "creation_date": "2018-11-14T22:10:42Z", "issue_submitter": "Vasfed", "body": "When using url helpers in a mounted engine via renderer.render(background jobs etc.) produced paths are missing engine mount point prefix.\nSteps to reproduce\n#!/usr/bin/env ruby\n# frozen_string_literal: true\n\nbegin\n  require 'bundler/inline'\nrescue LoadError => e\n  raise 'Bundler version 1.10 or later is required. Please update your Bundler'\nend\n\ngemfile(ENV['INSTALL'] == '1') do\n  source 'https://rubygems.org'\n  rails_version = ENV['RAILS'] || '> 5'\n  if ENV['LOCAL_RAILS'] && (\n    File.directory?(local_copy = ENV['LOCAL_RAILS']) ||\n    File.directory?(local_copy = '../rails'))\n    rails_version = { path: local_copy }\n  end\n  gem 'rails', rails_version\n  gem 'minitest', '5.10.3'\nend\n\nrequire 'action_controller/railtie'\n\nmodule SomeMountedEngine\n  class Engine < ::Rails::Engine\n    # to avoid 'Could not find root path for...':\n    def self.find_root(from); from; end\n\n    isolate_namespace SomeMountedEngine\n\n    routes.draw do\n      resources :engine_resources, only: :index\n      root to: redirect('/engine_resources')\n    end\n  end\n\n  class EngineResourcesController < ActionController::Base\n    include Engine.routes.url_helpers\n\n    TEMPLATE = <<-ERB.freeze\n      main_app.root       : <%= main_app.root_path %>\n      mounted_helper.root : <%= someengine.root_path %>\n      engine root_path    : <%= root_path %>\n    ERB\n\n    EXPECTED = <<-TXT.freeze\n      main_app.root       : /\n      mounted_helper.root : /engine_mount/\n      engine root_path    : /engine_mount/\n    TXT\n\n    def index\n      render inline: TEMPLATE\n    end\n  end\nend\n\nclass TestApp < Rails::Application\n  secrets.secret_token = secrets.secret_key_base = 'secret'\n  config.logger = Rails.logger = ::Logger.new(File::NULL)\n\n  routes.draw do\n    mount SomeMountedEngine::Engine, at: '/engine_mount', as: :someengine\n    root to: redirect('/foo')\n  end\n  routes.define_mounted_helper(:main_app)\nend\n\nputs \"Rails #{Rails.version}\"\n\nrequire 'minitest/autorun'\nclass PathTest < Minitest::Test\n  include Rack::Test::Methods\n\n  def test_paths_via_plain_render\n    get '/engine_mount/engine_resources'\n    assert_equal(\n      SomeMountedEngine::EngineResourcesController::EXPECTED,\n      last_response.body\n    )\n  end\n\n  def test_paths_via_renderer\n    template = SomeMountedEngine::EngineResourcesController::TEMPLATE\n    renderer = SomeMountedEngine::EngineResourcesController.renderer\n\n    # adding this has no effect:\n    # renderer = renderer.with_defaults(script_name: '/engine_mount')\n\n    assert_equal(\n      SomeMountedEngine::EngineResourcesController::EXPECTED,\n      renderer.render(inline: template)\n    )\n  end\n\n  private\n\n  def app\n    Rails.application\n  end\nend\nExpected behavior\nhelpers produce the same result as in regular render and test above pass, that means that inside engine:\nmain_app.root_path == '/'\nsomeengine.root_path == '/engine_mount/'\nroot_path == '/engine_mount/'\nActual behavior\non rails 5.1.6, 5.2.1 and master:\nmain_app.root_path == '/'\nsomeengine.root_path == '/engine_mount/'\nroot_path == '/'\non rails 5.0.7:\nmain_app.root_path == '/'\nsomeengine.root_path == '/'\nroot_path == '/'\nSystem configuration\nRails version:\nmaster(6.0.0.alpha), 5.2.1, 5.1.6, 5.0.7\nalso tried 4.2.1 and 4.1 with gem backport_new_renderer\nRuby version:\n2.5.0, 2.3.1", "number_of_comments": 1, "comment_authors": ["Vasfed"]},
{"title": "ActiveRecord. Double validation with autosave: true on both sides", "link": "https://github.com/rails/rails/issues/34964", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3814737796783447, "creation_date": "2019-01-17T19:01:27Z", "issue_submitter": "EPecherkin", "body": "Steps to reproduce\n#!/usr/bin/env ruby\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :stories do |t|\n    t.string :type\n  end\n\n  create_table :bad_guys do |t|\n    t.references :story\n  end\nend\n\n::VALIDATED = 0\n\nclass Story < ActiveRecord::Base\n  has_one :bad_guy, foreign_key: :story_id, inverse_of: :story, autosave: true\n\n  validate { ::VALIDATED += 1 }\nend\n\nclass BadGuy < ActiveRecord::Base\n  belongs_to :story, inverse_of: :bad_guy, autosave: true\nend\n\nclass TestDoubleValidation < Minitest::Test\n  def test_validated_once\n    story = Story.new()\n    bad_guy = BadGuy.new(story: story)\n    story.save!\n    assert_equal 1, VALIDATED\n  end\nend\nExpected behavior\nStory should be validated only once\nActual behavior\nStory validated twice\nSystem configuration\nRails version: master, 5.2.0\nRuby version: 2.5.1", "number_of_comments": 5, "comment_authors": ["EPecherkin", "shime", "EPecherkin", "robertasg", "mvaragnat"]},
{"title": "The associated model became not validated", "link": "https://github.com/rails/rails/issues/38045", "labels": ["\n                activerecord\n", "\n                regression\n"], "depth": 11, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 2.8676998615264893, "creation_date": "2019-12-20T05:08:17Z", "issue_submitter": "hkdnet", "body": "After we upgraded Rails from 5.2.3 to 5.2.4, our test fails.\nI guess AR's behavior was changed through #36671.\nSteps to reproduce\nhttps://gist.github.com/hkdnet/9889e283c28f5994bd38e42c12ec3364\nThis test passes with 5.2.3, 5.1.7 and 4.2.11.1. But it fails with 5.2.4.\nExpected behavior\nThis test passes.\nActual behavior\nFails.\nF\n\nFinished in 0.013553s, 73.7844 runs/s, 73.7844 assertions/s.\n\n  1) Failure:\nT#test_case [repro.rb:69]:\nExpected: false\n  Actual: true\n\n1 runs, 1 assertions, 1 failures, 0 errors, 0 skips\n\nSystem configuration\nRails version: 5.2.4\nRuby version: ruby 2.6.3p62 (2019-04-16 revision 67580) [x86_64-darwin18]", "number_of_comments": 10, "comment_authors": ["hkdnet", "avit", "rafaelfranca", "hkdnet", "wjessop", "wjessop", "hkdnet", "pdobb", "davidrunger", "intrip"]},
{"title": "active_storage fips 140-2 issue", "link": "https://github.com/rails/rails/issues/34443", "labels": ["\n                activestorage\n", "\n                pinned\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3584868907928467, "creation_date": "2018-11-14T01:11:07Z", "issue_submitter": "da-development-id", "body": "Tried using active_storage to handle file upload, but encountered an issue when FIPS mode is enforced.\nTried the following configuration option with same issue:\nRails.application.config.active_support.use_sha1_digests = true\nrail 5.2.1\nruby 2.5.0", "number_of_comments": 8, "comment_authors": ["da-development-id", "rafaelfranca", "da-development-id", "rafaelfranca", "georgeclaghorn", "rails-bot", "deepakmahakale", "josecoelho"]},
{"title": "Additional queries when attaching files in ActiveStorage", "link": "https://github.com/rails/rails/issues/35409", "labels": ["\n                stale\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2147853374481201, "creation_date": "2019-02-25T22:46:16Z", "issue_submitter": "agborrego92", "body": "Steps to reproduce\nExpected behavior\narticle.images.attach(io: File.open(path_to_file), filename: 'file1.txt', metadata: { analyzed: true })\nThe file should be attached with no extra queries. Only 2 queries should be executed(it's this way in Rails 5.2.2), one for inserting into active_storage_blobs and the other for active_storage_attachments\nActual behavior\nTwo more queries are executed. This will become a performance issue when one model has too many attached files.\nirb(main):005:0> article.images.attach(io: File.open(path_to_file), filename: 'file1.txt', metadata: { analyzed: true })\n  ActiveStorage::Blob Load (0.5ms)  SELECT \"active_storage_blobs\".* FROM \"active_storage_blobs\" INNER JOIN \"active_storage_attachments\" ON \"active_storage_blobs\".\"id\" = \"active_storage_attachments\".\"blob_id\" WHERE \"active_storage_attachments\".\"record_id\" = ? AND \"active_storage_attachments\".\"record_type\" = ? AND \"active_storage_attachments\".\"name\" = ?  [[\"record_id\", 1], [\"record_type\", \"Article\"], [\"name\", \"images\"]]\n   (0.1ms)  begin transaction\n  ActiveStorage::Attachment Load (0.2ms)  SELECT \"active_storage_attachments\".* FROM \"active_storage_attachments\" WHERE \"active_storage_attachments\".\"record_id\" = ? AND \"active_storage_attachments\".\"record_type\" = ? AND \"active_storage_attachments\".\"name\" = ?  [[\"record_id\", 1], [\"record_type\", \"Article\"], [\"name\", \"images\"]]\n  ActiveStorage::Blob Create (1.1ms)  INSERT INTO \"active_storage_blobs\" (\"key\", \"filename\", \"content_type\", \"metadata\", \"byte_size\", \"checksum\", \"created_at\") VALUES (?, ?, ?, ?, ?, ?, ?)  [[\"key\", \"i1ynjy63h2443xyd3mla9s01h1d3\"], [\"filename\", \"file1.txt\"], [\"content_type\", \"text/plain\"], [\"metadata\", \"{\\\"analyzed\\\":true,\\\"identified\\\":true}\"], [\"byte_size\", 19], [\"checksum\", \"Ck6/YHwwp0mVwwRKAZs8sg==\"], [\"created_at\", \"2019-02-25 20:50:20.665843\"]]\n  ActiveStorage::Attachment Create (0.3ms)  INSERT INTO \"active_storage_attachments\" (\"name\", \"record_type\", \"record_id\", \"blob_id\", \"created_at\") VALUES (?, ?, ?, ?, ?)  [[\"name\", \"images\"], [\"record_type\", \"Article\"], [\"record_id\", 1], [\"blob_id\", 1], [\"created_at\", \"2019-02-25 20:50:20.669117\"]]\n  Article Update (0.1ms)  UPDATE \"articles\" SET \"updated_at\" = ? WHERE \"articles\".\"id\" = ?  [[\"updated_at\", \"2019-02-25 20:50:20.670961\"], [\"id\", 1]]\n   (2.0ms)  commit transaction\n  Disk Storage (0.7ms) Uploaded file to key: i1ynjy63h2443xyd3mla9s01h1d3 (checksum: Ck6/YHwwp0mVwwRKAZs8sg==)\n=> true\nirb(main):006:0>\n\nSystem configuration\nRails version: Rails 6.0.0.beta1\nRuby version: 2.5.1", "number_of_comments": 5, "comment_authors": ["agborrego92", "rails-bot", "krunalcp", "arr-dev", "rails-bot"]},
{"title": "ActiveStorage 5.2.3 dependent: :purge causes unexpected result", "link": "https://github.com/rails/rails/issues/36423", "labels": ["\n                activestorage\n", "\n                attached PR\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.133305311203003, "creation_date": "2019-06-06T04:21:18Z", "issue_submitter": "moveson", "body": "Steps to reproduce\nCreate a new Rails app with a User model. Set up the model to have one attached photo, and set dependent: :purge\nclass User < ApplicationRecord\n  has_one_attached :photo, dependent: :purge\nend\n\nExpected behavior\nOn deletion of a user having an attached photo, the attachment should be purged.\nActual behavior\nOn deletion of the user, the attached photo is detached, not purged. The problem occurs with both has_one_attached and has_many_attached. This violates the principle of least surprise.\nCommentary\nIn ActiveStorage, there are three ways to remove attachments: purge, purge_later, and detach. When we set up a has_one_attached or has_many_attached relationship, we have the option to specify a dependent argument. If dependent is set to :purge_later or :detach, we get the expected result. If it is set to :purge, we get an unexpected result.\nThe problem lies, at least in part, in lib/active_storage/attached/macros.rb in lines 46-50 and again in 103-107, which look like this:\n  if dependent == :purge_later\n    after_destroy_commit { public_send(name).purge_later }\n  else\n    before_destroy { public_send(name).detach }\n  end \n\nSystem configuration\nRails version: 5.2.3\nRuby version: 2.6.1", "number_of_comments": 3, "comment_authors": ["moveson", "rails-bot", "cmirnow"]},
{"title": "Unable to configure ActionMailer custom delivery methods", "link": "https://github.com/rails/rails/issues/35416", "labels": ["\n                actionmailer\n", "\n                With reproduction steps\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2295501232147217, "creation_date": "2019-02-26T07:38:08Z", "issue_submitter": "Benjamin-Dobell", "body": "Steps to reproduce\n\ngit clone https://github.com/Benjamin-Dobell/actionmailer-delivery-test.git\ncd actionmailer-delivery-test\nbundle\n\nOption A\n\nrails console\nEnter ActionMailer::Base.delivery_method\n\nOption B\n\nrails server\nVisit http://localhost:3000\n\nNote: The foomailer gem we're using for testing is available at https://github.com/Benjamin-Dobell/actionmailer-delivery-gem-test\nExpected behavior\nOption A\nExpect to see :foo printed.\nOption B\nExpect error Not a real mailer - which is intentionally raised when our test FooMailer gem is used to deliver mail.\nActual behavior\n\nNoMethodError (undefined method `foo_settings=' for ActionMailer::Base:Class)\n\nis raised. Refer to \"More details\" below for an explanation.\nSystem configuration\nRails version:\n5.2.2 (down to at least 3)\nRuby version:\n2.6.1\nMore details\nThe ActionMailer railtie looks at config.action_mailer and assigns these options to ActionMailer::Base. However, it does so as soon as ActionMailer is loaded (ActiveSupport.on_load(:action_mailer)).\nHowever, ActionMailer (and its config) is explicitly designed to be extensible, specifically ActionMailer allows third-party gems to register additional \"delivery methods\".\nDelivery methods can be registered with third-party Railtie by using:\nclass Railtie < ::Rails::Railtie\n  initializer \"foomailer.add_delivery_method\" do\n    ActiveSupport.on_load(:action_mailer) do\n      add_delivery_method :foo, FooMailer\n    end\n  end\nend\nadd_delivery_method adds support for ActionMailer::Base.foo_settings (and therefore support for config.action_mailer.foo_settings) - https://github.com/rails/rails/blob/master/actionmailer/lib/action_mailer/delivery_methods.rb#L51.\nHowever, calling add_delivery_method requires ActionMailer to be loaded, therefore the config has already have been assigned on ActionMailer::Base, so there's no opportunity to add:\nconfig.action_mailer.foo_settings = {\n  prop_test: true\n}\nIf you are to put the above directly in your environment config, you get an error when the ActionMailer is loaded (the error is within the actionmailer railtie). This is because third-party gems typically (does the gem's name come into play?!?) haven't run their initializers so undefined method 'foo_settings=' for ActionMailer::Base:Class is raised (e.g. mailgun/mailgun-ruby#104).\nInstead, if you were to move your logic into app/initializers/foomailer.rb:\nActiveSupport.on_load(:action_mailer) do\n  Rails.application.config do\n    config.action_mailer.delivery_method = :foo\n    config.action_mailer.foo_settings = {\n        prop_test: true\n    }\n  end\nend\nNote: Checkout the delayed_config branch and repeat steps 4-5.\nThis silently fails, because we're assigning the config after ActionMailer has been loaded (and the config copied across), so although we've set the config it is never used and out of sync with ActionMailer::Base, which for example still returns :smtp for ActionMailer::Base.delivery_method, even though Rails.application.config.action_mailer.delivery_method correctly returns :foo.", "number_of_comments": 5, "comment_authors": ["Benjamin-Dobell", "Benjamin-Dobell", "rails-bot", "Benjamin-Dobell", "itay-grudev"]},
{"title": "Model.new returning a pre-initialised object in class method", "link": "https://github.com/rails/rails/issues/35666", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2371599674224854, "creation_date": "2019-03-19T10:58:02Z", "issue_submitter": "sonal425chouhan", "body": "Steps to reproduce\n\nI have a Model named Project and a class method in project.rb called 'set_new_project'.\n\ndef self.set_new_project\nProject.new\nend\n\nrun the 'where' query on Project i.e a = Project.where(id: 1)\nCall  a.set_new_project\n\nExpected behaviour\nThis should return an uninitialised object i.e\n<Project id: nil, name: nil, description: nil>\nActual behaviour\nIt returns an id initialised object  i.e\n<Project id: 1, name: nil, description: nil>\nAdditional Information:\n\nif you run Project.new.reload in set_new_project then it will return an object with all fields initialised as that of 'a'\nif you run Project.all then it will return a\n\nSystem configuration\nRails version:\nRails 5.2.0.rc1\nRuby version:\n2.4.2", "number_of_comments": 5, "comment_authors": ["sonal425chouhan", "rafaelfranca", "andrehjr", "rails-bot", "st0012"]},
{"title": "counter_cache double increment", "link": "https://github.com/rails/rails/issues/36108", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2284250259399414, "creation_date": "2019-04-26T13:35:38Z", "issue_submitter": "garside", "body": "Steps to reproduce\nunless File.exist?('Gemfile')\n  File.write('Gemfile', <<-GEMFILE)\n    source 'https://rubygems.org'\n    gem 'rails', github: 'rails/rails'\n    gem 'arel', github: 'rails/arel'\n    gem 'sqlite3'\n  GEMFILE\n\n  system 'bundle install'\nend\n\nrequire 'bundler'\nBundler.setup(:default)\n\nrequire 'active_record'\nrequire 'minitest/autorun'\nrequire 'logger'\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\n# Display database and Active Record, Arel, Ruby versions.\nmessage = \"Running tests with #{ActiveRecord::Base.connection.adapter_name}, Active Record #{\nActiveRecord::VERSION::STRING}, Arel #{Arel::VERSION} and Ruby #{RUBY_VERSION}\"\nline = '=' * message.length\nputs line, message, line\n\nActiveRecord::Schema.define do\n  create_table :days, force: true do |t|\n    t.integer \"assembly_lots_count\", default: 0\n  end\n\n  create_table :expiration_days, force: true do |t|\n    t.references :day\n    t.integer \"assembly_lots_count\", default: 0\n  end\n\n  create_table :assembly_lots, force: true do |t|\n    t.references :day\n    t.references :expiration_day\n  end\nend\n\nclass Day < ActiveRecord::Base\n  has_one :expiration_day\n\n  has_many :assembly_lots\nend\n\nclass ExpirationDay < ActiveRecord::Base\n  belongs_to :day\n\n  has_many :assembly_lots\nend\n\nclass AssemblyLot < ActiveRecord::Base\n  belongs_to :day, counter_cache: true, touch: true\n  belongs_to :expiration_day, counter_cache: true, touch: true, optional: true\nend\n\nclass BugTest < ActiveSupport::TestCase\n  def test_counter_cache_from_shovel\n    today = Day.create\n    assembly_lot = today.assembly_lots.create\n\n    tomorrow = Day.create\n    expiration_day = tomorrow.build_expiration_day\n    expiration_day.save\n\n    expiration_day.assembly_lots << assembly_lot\n\n    assert_equal 1, today.assembly_lots.count\n    assert_equal 1, today.assembly_lots_count\n\n    assert_equal 0, tomorrow.assembly_lots.count\n    assert_equal 0, tomorrow.assembly_lots_count\n\n    assert_equal 1, expiration_day.assembly_lots.count\n    assert_equal 1, expiration_day.assembly_lots_count\n  end\n\n  def test_counter_cache_from_update\n    today = Day.create\n    assembly_lot = today.assembly_lots.create\n\n    tomorrow = Day.create\n    expiration_day = tomorrow.build_expiration_day\n    expiration_day.save\n\n    assembly_lot.update(expiration_day: expiration_day)\n\n    assert_equal 1, today.assembly_lots.count\n    assert_equal 1, today.assembly_lots_count\n\n    assert_equal 0, tomorrow.assembly_lots.count\n    assert_equal 0, tomorrow.assembly_lots_count\n\n    assert_equal 1, expiration_day.assembly_lots.count\n    assert_equal 1, expiration_day.assembly_lots_count\n  end\nend\nExpected behavior\n..\n\nFinished in 0.045836s, 43.6338 runs/s, 261.8030 assertions/s.\n2 runs, 12 assertions, 0 failures, 0 errors, 0 skips\n\nActual behavior\nF\n\nFailure:\nBugTest#test_counter_cache_from_shovel [run.rb:80]:\nExpected: 1\n  Actual: 2\n\n.\nFinished in 0.045836s, 43.6338 runs/s, 261.8030 assertions/s.\n2 runs, 12 assertions, 1 failures, 0 errors, 0 skips\n\nSystem configuration\nRails version: 6.1.0.alpha (also affects 5.2.3)\nRuby version: ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-darwin17]", "number_of_comments": 2, "comment_authors": ["garside", "garside"]},
{"title": "Eager load order bug", "link": "https://github.com/rails/rails/issues/36475", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.1767590045928955, "creation_date": "2019-06-13T18:28:12Z", "issue_submitter": "exseniorastronaut", "body": "Steps to reproduce\n\n\nExpected behaviour\nGet the last record for each machine\nActual behavior\nIt loads the first record for each machine. The order is not applied at all\nSystem configuration\nRails version:\n'rails', '~> 5.2.3'\nRuby version:\nruby '2.6.0'", "number_of_comments": 10, "comment_authors": ["exseniorastronaut", "rafaelfranca", "exseniorastronaut", "embs", "exseniorastronaut", "embs", "exseniorastronaut", "embs", "Drew-Goddyn", "jguecaimburu"]},
{"title": "Active Storage models ignore table_name_prefix", "link": "https://github.com/rails/rails/issues/35811", "labels": ["\n                activestorage\n", "\n                attached PR\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.240769863128662, "creation_date": "2019-03-31T21:14:52Z", "issue_submitter": "gr8bit", "body": "Steps to reproduce\n\nrails new astest\ncd astest/\nEdit config/application.rb and add set a general table prefix with config.active_record.table_name_prefix = 'abc_'\nCreate ActiveStorage models bundle exec rake active_storage:install db:migrate\n\nObserve: tables are created with prefix (abc_active_storage_attachements and *_blobs).\n\nCreate a user model via bundle exec rails generate model User name:string and attach an avatar to it\n\nclass User < ApplicationRecord\n  has_one_attached :avatar\nend\n\n\nAdd an Avatar via console\n\n2.6.1 :002 > u.avatar.attach(io: File.open(Rails.root.join('public', 'apple-touch-icon.png')))\nTraceback (most recent call last):\n        1: from (irb):2\nActiveRecord::StatementInvalid (Could not find table 'active_storage_attachments')\n\nObserve: ActiveRecord cannot find its table.\nExpected behavior\nActiveStorage::Attachment should use the prefixed table name the migration created previously.\nActual behavior\nActiveStorage::Attachment cannot find its table as it looks for the non-prefixed table name.\nWhich is hardcoded in ActiveStorage::Attachment here and in ActiveStorage::Blob here\nSystem configuration\nRails version: 5.2.3\nRuby version: 2.6.1", "number_of_comments": 13, "comment_authors": ["gr8bit", "prathamesh-sonpatki", "gr8bit", "prathamesh-sonpatki", "brendon", "zzak", "brendon", "brendon", "brendon", "brendon", "brendon", "brendon", "brendon"]},
{"title": "actriverecord 5.2.3 breaks on numeric searches for empty strings", "link": "https://github.com/rails/rails/issues/36413", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.233445167541504, "creation_date": "2019-06-05T08:12:56Z", "issue_submitter": "cork", "body": "Steps to reproduce\n\ncreate a mysql table units with a numeric column (int or bigint) tag\nrun in Unit.where(tag: \"\").to_sql in a console\nrun in Unit.where.not(tag: \"\").to_sql in a console\n\nExpected behavior\n5.2.2.1 returns \"SELECT units.* FROM units WHERE units.tag IS NULL\"\n5.2.2.1 returns \"SELECT units.* FROM units WHERE units.tag IS NOT NULL\"\nActual behavior\n5.2.3 returns \"SELECT units.* FROM units WHERE units.tag = NULL\"\n5.2.3 returns \"SELECT units.* FROM units WHERE units.tag != NULL\"\nSystem configuration\nRails version:\n5.2.3 and 5.2.2.1 or older\nRuby version:\n2.6.x\nComments\nThis makes form searches from web forms impossible for \"empty values\".", "number_of_comments": 12, "comment_authors": ["cork", "NotGrm", "michaelandhsm2", "cork", "eileencodes", "cork", "eileencodes", "eileencodes", "eileencodes", "cork", "kamipo", "cork"]},
{"title": "ActionCable.Subscription.perform: Key name \"action\" not allowed for \"data\" argument", "link": "https://github.com/rails/rails/issues/33505", "labels": ["\n                actioncable\n", "\n                attached PR\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.4483819007873535, "creation_date": "2018-08-01T16:54:35Z", "issue_submitter": "pinksynth", "body": "When the data argument to ActionCable.Subscription.perform contains a key called action, its value is replaced. Would help to throw an error here:\nExample:\nJavascript:\nApp.my_channel.my_action({ foo: 'This key name is allowed.', action: 'This key name is NOT allowed.' })\nRails server:\nMyChannel#my_action({\"foo\"=>\"This key name is allowed.\"})\n{\"foo\"=>\"This key name is allowed.\", \"action\"=>\"update_event\"}\n\nNot technically a bug, but could be clarified a little.\nActionCable.Subscription\n  # Perform a channel action with the optional data passed as an attribute\n  perform: (action, data = {}) ->\n    data.action = action\n    @send(data)", "number_of_comments": 1, "comment_authors": ["pinksynth"]},
{"title": "wrap_parameters drops attributes for has_and_belongs_to_many association", "link": "https://github.com/rails/rails/issues/32803", "labels": ["\n                attached PR\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5818126201629639, "creation_date": "2018-05-03T15:50:20Z", "issue_submitter": "eikes", "body": "When posting a flat JSON request to a controller which has wrap_parameters enabled for an associated model, the key-value for any has_and_belongs_to_many association is not present in the wrapped parameters.\nSteps to reproduce\nclass User < ActiveRecord::Base\n  has_and_belongs_to_many :roles\nend\n\nclass UsersController < ActionController::Base\n  wrap_parameters User, format: [:json]\nend\nThe role_ids are not present when posting the user data in a flat JSON request, such as:\n{\n  \"name\":     \"Doe\",\n  \"role_ids\": [1, 2]\n}\nActual behavior\nThe actual params in the controller:\n{ \"name\" => \"Doe\", \"role_ids\" => [1, 2], \"user\" => { \"name\" => \"Doe\" } }\nNote how the wrapped \"user\" params do not include the role_ids key.\nExpected behavior\nThe expected params in the controller:\n{ \"name\" => \"Doe\", \"role_ids\" => [1, 2], \"user\" => { \"name\" => \"Doe\", \"role_ids\" => [1, 2] } }\nSystem configuration\nRails version: <= v5.2.0\nRuby version: 2.5.0", "number_of_comments": 2, "comment_authors": ["eikes", "eikes"]},
{"title": "ActiveRecord doesn't correctly handle Infinity values for decimal columns with a scale", "link": "https://github.com/rails/rails/issues/32888", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3415813446044922, "creation_date": "2018-05-15T02:32:39Z", "issue_submitter": "gilmoreorless", "body": "In our codebase we use some models with decimal columns and validation for numericality and uniqueness. If the string 'Infinity' is set as the value for a decimal field, the model's save action fails with a database exception, as it's passing the unquoted value Infinity straight to the database.\nAfter digging into a root cause, I found it only happens when the decimal column has a scale parameter. ActiveRecord uses the Decimal type class for this case instead of DecimalWithoutScale. These two classes have different behaviour when handling BigDecimal values.\nSteps to reproduce\nFull script to reproduce the bug:\n# frozen_string_literal: true\n\nbegin\n  require \"bundler/inline\"\nrescue LoadError => e\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\n  raise e\nend\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"5.2.0\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# Ensure backward compatibility with Minitest 4\nMinitest::Test = MiniTest::Unit::TestCase unless defined?(Minitest::Test)\n\nActiveRecord::Base.establish_connection({\n  adapter: \"sqlite3\",\n  database: \":memory:\",\n  prepared_statements: false,\n})\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :valids, force: true do |t|\n    t.decimal :value, precision: 10\n  end\n\n  create_table :invalids, force: true do |t|\n    t.decimal :value, precision: 10, scale: 1\n  end\nend\n\nclass Valid < ActiveRecord::Base\n  validates :value, presence: true, numericality: true, uniqueness: true\nend\n\nclass Invalid < ActiveRecord::Base\n  # NOTE: Removing the uniqueness check here makes the validation work correctly\n  validates :value, presence: true, numericality: true, uniqueness: true\nend\n\nclass BugTest < Minitest::Test\n  def test_infinity_no_scale\n    valid = Valid.new(value: 'Infinity')\n    saved = valid.save\n    assert !saved\n    assert_equal valid.errors[:value], [\"is not a number\"]\n  end\n\n  def test_infinity_with_scale\n    invalid = Invalid.new(value: 'Infinity')\n    # BUG: This save will fail with an exception:\n    #   ActiveRecord::StatementInvalid: SQLite3::SQLException: no such column: Infinity:\n    #     SELECT  1 AS one FROM \"invalids\" WHERE \"invalids\".\"value\" = Infinity LIMIT 1\n    saved = invalid.save\n    assert !saved\n    assert_equal invalid.errors[:value], [\"is not a number\"]\n  end\nend\n\nExpected behavior\nWhen setting 'Infinity' as the value, saving the model should return false with a \"not a number\" error message.\nActual behavior\nIf the decimal column has a 0 scale, the 'Infinity' string is type cast to nil and the validations work as expected.\nIf the decimal column has a scale greater than 0, the numericality validation works as expect (it adds the \"not a number\" error,) but the uniqueness check passes a BigDecimal::INFINITY value to the database without quoting it. The database then returns an exception:\nActiveRecord::StatementInvalid: Mysql2::Error: Unknown column 'Infinity' in 'where clause': SELECT  1 AS one FROM `invalids` WHERE `invalids`.`value` = Infinity LIMIT 1\n\nI've seen this fail in SQLite, MySQL and SQL Server.\nFrom searching through existing issues, it seems to be related to #21262 (comment)\nSystem configuration\nRails version: 5.2.0 — but I've also seen it fail in 5.1.5 and 3.2.22\nRuby version: 2.3.4", "number_of_comments": 5, "comment_authors": ["gilmoreorless", "rails-bot", "gilmoreorless", "lxxxvi", "bobmazanec"]},
{"title": "Command Line guide is too narrative", "link": "https://github.com/rails/rails/issues/33270", "labels": ["\n                docs\n", "\n                pinned\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2395071983337402, "creation_date": "2018-07-01T12:50:32Z", "issue_submitter": "matthewd", "body": "Reading over the Command Line guide, I find it feels too concerned with its narrative structure (complete with a side-track mention of db:migrate under the rails generate heading, because that's needed for the \"next\" command to work).\nIt feels like we're rehashing a sequence already covered by the Getting Started guide (which this guide calls out as a prerequisite), while that makes it trickier to fully explore each command's options in isolation: the focus is primarily (and in some cases exclusively) on which invocations are suitable to set us up for the next step. While that provides an approachable tour, I think it leaves awkwardly mixed priorities. As the documentation for our CLI (they have their help output, but there's no second piece-by-piece source as there is for API docs), I believe we'd be better served with a series of semi-manpage-style content, either in full alphabetical order, or in grouped alphabetical order.\n(As originally discussed in and around #33229 (comment))", "number_of_comments": 3, "comment_authors": ["matthewd", "rails-bot", "azzenabidi"]},
{"title": "Parsing of Accept header in request fails on quoted-strings", "link": "https://github.com/rails/rails/issues/33980", "labels": ["\n                actionpack\n", "\n                With reproduction steps\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7960653305053711, "creation_date": "2018-09-25T13:18:13Z", "issue_submitter": "tkalliom", "body": "Steps to reproduce\n# frozen_string_literal: true\n\nrequire \"bundler/inline\"\ngemfile(true) do\n  source \"https://rubygems.org\"\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n  gem \"rails\", github: \"rails/rails\"\nend\n\nrequire \"action_controller/railtie\"\n\nclass TestApp < Rails::Application\n  config.root = __dir__\n  config.logger = Logger.new($stdout)\n  Rails.logger  = config.logger\n\n  routes.draw do\n    get \"/greet\" => \"test#greet\"\n  end\nend\n\nclass TestController < ActionController::Base\n  def greet\n    respond_to do |format|\n      format.csv {render plain: \"Hello\"}\n      format.text {render plain: \"Hello\"}\n    end\n  end\nend\n\nrequire \"minitest/autorun\"\nrequire \"rack/test\"\n\nclass BugTest < Minitest::Test\n  include Rack::Test::Methods\n\n  def test_media_type_parameters\n    get \"/greet\", nil, { 'HTTP_ACCEPT' => 'text/html; someparameter=\"a, \\\"quoted, string, text/csv, etc\", text/plain' }\n    assert last_response.ok?\n    assert_equal \"text/plain; charset=utf-8\", last_response.content_type\n    assert_equal \"Hello\", last_response.body\n  end\n\n  private\n    def app\n      Rails.application\n    end\nend\nExpected behavior\nAs per RFC 7231 sections 5.3.2 and 3.1.1.1, the header sent by the client should be understood as having two media type specifications; the first text/html with the media type parameter someparameter having the value a, \"quoted, string, text/csv, etc and the second text/plain with no media type parameters. The content negotiation should thus result in choosing text/plain.\nActual behavior\nFailure:\nBugTest#test_media_type_parameters [accepts.rb:40]:\nExpected: \"text/plain; charset=utf-8\"\n  Actual: \"text/csv; charset=utf-8\"\n\nThe header parsing fails to take quoted-strings into account, and text/csv is mistakenly interpreted as an accepted media type. The response is sent as CSV.\nSystem configuration\nRails version: 6.0.0alpha (master)\nRuby version: 2.4.1p111", "number_of_comments": 2, "comment_authors": ["tkalliom", "brendo"]},
{"title": "Incorrect polymorphic_type when STI is unused", "link": "https://github.com/rails/rails/issues/32912", "labels": ["\n                attached PR\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.343719244003296, "creation_date": "2018-05-17T03:01:22Z", "issue_submitter": "FX-HAO", "body": "I am not using STI but just inheritance. It seems that base_class returns superclass rather than subclass.\n# app/models/car.rb\nclass Car < ActiveRecord::Base\n  belongs_to :borrowable, :polymorphic => true\nend\n\n# app/models/staff.rb\nclass Staff < ActiveRecord::Base\n  has_many :cars, :as => :borrowable\nend\n\n# app/models/guard.rb\nclass Guard < Staff\n   self.table_name = \"guards\"\nend\nNote that Staff and Guard are persisted in different tables.\nirb> Guard.take.cars.to_sql\n=> \"SELECT \\\"cars\\\".* FROM \\\"cars\\\" WHERE \\\"cars\\\".\\\"borrowable_id\\\" = 1 AND \\\"cars\\\".\\\"borrowable_type\\\" = 'Staff' ORDER BY \\\"cars\\\".\\\"updated_at\\\" DESC\"\nI'll make a PR to fix the issue.", "number_of_comments": 4, "comment_authors": ["FX-HAO", "WebDevFromScratch", "FX-HAO", "WebDevFromScratch"]},
{"title": "has_one through not available on unpersisted instances", "link": "https://github.com/rails/rails/issues/33155", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2445015907287598, "creation_date": "2018-06-18T21:05:07Z", "issue_submitter": "zachwalton", "body": "Opening a new issue since the old one was marked as stale and I didn't get to it in time (doesn't seem like I can re-open it).\n#31975\n@adamlogic confirmed that this still reproduces on current master: #31975 (comment)\nNote: I believe the way that this works is by associating with post_id, so if that's the case it makes sense that this would be the behavior, and I suppose this becomes an enhancement request.\nComment knows that it has a Post associated with it as evidenced by the passed assertion on L66, so is it possible to leverage that relationship to make the through association work?\nSteps to reproduce\nScript to reproduce: https://gist.github.com/zachwalton/395412f5b7e97837e6273981dbb7faf3\nExpected behavior\nowner should be not be nil when accessed through the has_one through association\nActual behavior\nowner is nil when accessed through the has_one through association\nSystem configuration\nRails version: 5.1.2\nRuby version: 2.4.2", "number_of_comments": 8, "comment_authors": ["zachwalton", "jychen7", "liligga", "guyzmo", "jherdman", "keoghpe", "brndnwng", "rjclaasen"]},
{"title": "Cannot Serialize Object with no ActiveStorage Attachment to JSON", "link": "https://github.com/rails/rails/issues/33036", "labels": ["\n                activestorage\n", "\n                pinned\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.30086350440979, "creation_date": "2018-05-31T18:29:53Z", "issue_submitter": "CodingAnarchy", "body": "Steps to reproduce\nclass Foo\n  has_one_attached :image\nend\n\nFoo.new.as_json\nExpected behavior\nThe serialized Foo.new should have an image field that is specified as nil, signifying that it has no attached image.\nActual behavior\nModule::DelegationError: to_model delegated to attachment, but attachment is nil\nSystem configuration\nRails version: 5.2.0\nRuby version: 2.5.1", "number_of_comments": 19, "comment_authors": ["CodingAnarchy", "WilliamMaia", "CodingAnarchy", "koskoci", "georgeclaghorn", "AlexandreLage", "koskoci", "rails-bot", "navid-farjad", "edomuhardo", "egcmi", "darrenterhune", "darrenterhune", "intrip", "intrip", "intrip", "CodingAnarchy", "darrenterhune", "intrip"]},
{"title": "form_with doesn't render closing tag if no block is given (causing 'confusion' in the browser)", "link": "https://github.com/rails/rails/issues/34282", "labels": ["\n                actionview\n", "\n                attached PR\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.482454776763916, "creation_date": "2018-10-22T09:38:55Z", "issue_submitter": "koenhandekyn", "body": "Steps to reproduce\ni'm using a table with an HTML5 form in a hidden column per row and references to the form from the input elements according to the HTML5 spec. in this case no 'block' is needed as we just want to have the form tag in isolation.\nExpected behavior\nform_with should always render a proper form tag and form closing also when no block is passed\nActual behavior\nform_with renders the form tag with the standard hidden fields in the first row but it fails to render the closing tag, causing the browsers to get confused.\nnot closing the form tag\n      td.hide\n        =form_with model: window, :html => { :id => \"window_form_#{window.id}\" } \n\n\nclosing the form tag (empty block)\n      td.hide\n         =form_with model: window, :html => { :id => \"window_form_#{window.id}\" } do |f|\n\n\nkey use case\nempty forms might seem strange but in modern html it's possible to refer to a form from a button that is not nested within the form itself, which is often really handy to avoid form nesting, or have issues with form/table combinations.\nSystem configuration\nRails version: 5.2.1\nRuby version: 2.5.1\nstill an issue on\nRails version: 7.0.5\nRuby version: 3.2.2", "number_of_comments": 3, "comment_authors": ["koenhandekyn", "OvidiuToma", "koenhandekyn"]},
{"title": "URL helpers for isolated engines disregard SCRIPT_NAME when it's set by app middleware", "link": "https://github.com/rails/rails/issues/34023", "labels": ["\n                actionpack\n", "\n                pinned\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 2.232179880142212, "creation_date": "2018-09-28T19:09:57Z", "issue_submitter": "georgeclaghorn", "body": "In Basecamp, we use Rack middleware to extract an account ID from the leading segment of each request's path and move it to env['SCRIPT_NAME']. This causes Rails to prefix every generated path with the account ID, freeing us from having to pass it as an argument at every call site for every URL helper.\nHere’s a simplified example of such a middleware class:\nclass SlugExtractor\n  def initialize(app)\n    @app = app\n  end\n\n  def call(env)\n    request = ActionDispatch::Request.new(env)\n\n    # If the first path segment is an integer, pull it off of path_info and put it in script_name.\n    if request.path_info =~ /\\A(\\/(\\d+))/\n      request.script_name = $1\n      request.path_info   = $'.empty? ? '/' : $'\n    end\n\n    @app.call(env)\n  end\nend\nURL helpers for isolated Rails engines disregard env['SCRIPT_NAME'] when it’s populated by middleware like SlugExtractor. If SlugExtractor sets env['SCRIPT_NAME'] to \"/8675309\", the following erroneously generates \"/google_sign_in/authorization\" instead of \"/8675309/google_sign_in/authorization\" (assuming GoogleSignIn::Engine is mounted at /google_sign_in):\ngoogle_sign_in.authorization_path\nWhen the code below is reached, it appears that options[:script_name] is incorrectly nil. As a result, it’s set to \"/google_sign_in\" instead of \"/8675309/google_sign_in\":\n\n\n\nrails/actionpack/lib/action_dispatch/routing/routes_proxy.rb\n\n\n        Lines 38 to 41\n      in\n      9fa4342\n\n\n\n\n\n\n                 options[:script_name] = merge_script_names( \n\n\n\n                   options[:script_name], \n\n\n\n                   @script_namer.call(options) \n\n\n\n                 ) \n\n\n\n\n\nFor a failing test case, see this gist.", "number_of_comments": 3, "comment_authors": ["georgeclaghorn", "jeremy", "rails-bot"]},
{"title": "Occasional deadlocks between Dependencies::Interlock and db adapter lock", "link": "https://github.com/rails/rails/issues/34310", "labels": ["\n                pinned\n"], "depth": 12, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4831058979034424, "creation_date": "2018-10-25T06:24:54Z", "issue_submitter": "tessereth", "body": "In our rspec test environment, some feature specs occasionally hang. Generating stack traces using the sigdump gem and ActionDispatch::DebugLocks I was able to narrow it down to roughly the following.\nThere are two request threads, A and B, and another thread accessing the database C. When requests start they call ActiveSupport::Dependencies.interlock.start_sharing and if they need to autoload any files, they upgrade to interlock.exclusive. When threads use the database, they call AbstractAdapter#log which acquires a separate lock for the database connection (which is a LoadInterlockAwareMonitor). Then I have the following:\n\n\n\nThread A\nThread B\nThread C\n\n\n\n\ngets interlock share lock\n\n\n\n\n\ngets interlock share lock\n\n\n\n\n\ngets db connection lock\n\n\n\ncalls AbstractAdapter#log\n\n\n\n\nnotes it can't get db lock right away (blocked on C)\n\n\n\n\nreleases interlock share and waits on db lock\n\n\n\ntries to autoload a model\n\n\n\n\nupgrades to an exclusive interlock\n\n\n\n\n\n\nreleases the db connection lock\n\n\n\ntakes the db lock\n\n\n\n\ntries to reclaim interlock share lock\n\n\n\n\nblocked on thread A which has exclusive lock\n\n\n\nrequires a db query to load schema\n\n\n\n\ncalls AbstractAdapter#log\n\n\n\n\nnotes it can't get db lock right away (blocked on B)\n\n\n\n\ndoes not release interlock as exclusive and waits on db lock\n\n\n\n\nwaits on db connection lock\n\n\n\n\n\nAnd then A and B wait forever. Also of note, rspec cleanup requires rolling back a transaction which requires the db connection lock so rspec also hangs forever.\nSteps to reproduce\nIt's hard to actually reproduce this as it's so timing based but I created this unit test 7ab4f35. I also added the full ActionDispatch::DebugLocks output at the end.\nExpected behavior\nAll requests complete\nActual behavior\nThe test suite hangs\nSystem configuration\nRails version: 5.1.6 (the test also reproduces against master)\nRuby version: 2.3.6 (the test also reproduces against 2.5.1)\nActionDispatch::DebugLocks output\nThread 0 [0xa06e4b0 sleep]  No lock (yielded share)\n  Waiting in yield_shares\n  may be pre-empted for: \"load\", share\n  blocked by: 1\n/usr/local/lib/ruby/2.3.0/monitor.rb:111:in sleep' /usr/local/lib/ruby/2.3.0/monitor.rb:111:in wait'\n/usr/local/lib/ruby/2.3.0/monitor.rb:111:in wait' /usr/local/lib/ruby/2.3.0/monitor.rb:123:in wait_while'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/concurrency/share_lock.rb:221:in wait_for' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/concurrency/share_lock.rb:189:in block in yield_shares'\n/usr/local/lib/ruby/2.3.0/monitor.rb:214:in mon_synchronize' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/concurrency/share_lock.rb:187:in yield_shares'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/dependencies/interlock.rb:45:in permit_concurrent_loads' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/concurrency/load_interlock_aware_monitor.rb:13:in mon_enter'\n/usr/local/lib/ruby/2.3.0/monitor.rb:212:in mon_synchronize' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/connection_adapters/abstract_adapter.rb:612:in block in log'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/notifications/instrumenter.rb:21:in instrument' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/connection_adapters/abstract_adapter.rb:604:in log'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/connection_adapters/postgresql_adapter.rb:614:in exec_no_cache' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/connection_adapters/postgresql_adapter.rb:603:in execute_and_clear'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/connection_adapters/postgresql/database_statements.rb:79:in exec_query' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/connection_adapters/abstract/database_statements.rb:371:in select'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/connection_adapters/abstract/database_statements.rb:42:in select_all' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/connection_adapters/abstract/query_cache.rb:97:in select_all'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/relation/calculations.rb:176:in pluck' <app code which queries the database> /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/callbacks.rb:413:in instance_exec'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/callbacks.rb:413:in block in make_lambda' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/callbacks.rb:197:in block (2 levels) in halting'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/abstract_controller/callbacks.rb:12:in block (2 levels) in <module:Callbacks>' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/callbacks.rb:198:in block in halting'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/callbacks.rb:507:in block in invoke_before' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/callbacks.rb:507:in each'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/callbacks.rb:507:in invoke_before' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/callbacks.rb:130:in run_callbacks'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/abstract_controller/callbacks.rb:19:in process_action' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_controller/metal/rescue.rb:20:in process_action'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_controller/metal/instrumentation.rb:32:in block in process_action' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/notifications.rb:166:in block in instrument'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/notifications/instrumenter.rb:21:in instrument' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/notifications.rb:166:in instrument'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_controller/metal/instrumentation.rb:30:in process_action' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_controller/metal/params_wrapper.rb:252:in process_action'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/railties/controller_runtime.rb:22:in process_action' /usr/local/bundle/gems/actionpack-5.1.6/lib/abstract_controller/base.rb:124:in process'\n/usr/local/bundle/gems/actionview-5.1.6/lib/action_view/rendering.rb:30:in process' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_controller/metal.rb:189:in dispatch'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_controller/metal.rb:253:in dispatch' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/routing/route_set.rb:49:in dispatch'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/routing/route_set.rb:31:in serve' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/routing/mapper.rb:16:in block in class:Constraints'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/routing/mapper.rb:46:in serve' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/journey/router.rb:50:in block in serve'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/journey/router.rb:33:in each' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/journey/router.rb:33:in serve'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/routing/route_set.rb:844:in call' /usr/local/bundle/gems/warden-1.2.7/lib/warden/manager.rb:36:in block in call'\n/usr/local/bundle/gems/warden-1.2.7/lib/warden/manager.rb:35:in catch' /usr/local/bundle/gems/warden-1.2.7/lib/warden/manager.rb:35:in call'\n/usr/local/bundle/gems/rack-2.0.5/lib/rack/etag.rb:25:in call' /usr/local/bundle/gems/rack-2.0.5/lib/rack/conditional_get.rb:38:in call'\n/usr/local/bundle/gems/rack-2.0.5/lib/rack/head.rb:12:in call' /usr/local/bundle/gems/rack-2.0.5/lib/rack/session/abstract/id.rb:232:in context'\n/usr/local/bundle/gems/rack-2.0.5/lib/rack/session/abstract/id.rb:226:in call' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/cookies.rb:613:in call'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/callbacks.rb:26:in block in call' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/callbacks.rb:97:in run_callbacks'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/callbacks.rb:24:in call' /usr/local/bundle/gems/bugsnag-6.7.3/lib/bugsnag/integrations/rack.rb:46:in call'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/debug_exceptions.rb:59:in call' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/show_exceptions.rb:31:in call'\n/usr/local/bundle/gems/railties-5.1.6/lib/rails/rack/logger.rb:36:in call_app' /usr/local/bundle/gems/railties-5.1.6/lib/rails/rack/logger.rb:24:in block in call'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/tagged_logging.rb:69:in block in tagged' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/tagged_logging.rb:26:in tagged'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/tagged_logging.rb:69:in tagged' /usr/local/bundle/gems/railties-5.1.6/lib/rails/rack/logger.rb:24:in call'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/remote_ip.rb:79:in call' /usr/local/bundle/gems/request_store-1.4.1/lib/request_store/middleware.rb:19:in call'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/request_id.rb:25:in call' /usr/local/bundle/gems/rack-2.0.5/lib/rack/method_override.rb:22:in call'\n/usr/local/bundle/gems/rack-2.0.5/lib/rack/runtime.rb:22:in call' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/cache/strategy/local_cache_middleware.rb:27:in call'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/executor.rb:12:in call' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/static.rb:125:in call'\n/usr/local/bundle/gems/rack-2.0.5/lib/rack/sendfile.rb:111:in call' /usr/local/bundle/gems/rack-utf8_sanitizer-1.4.0/lib/rack/utf8_sanitizer.rb:20:in call'\n/usr/local/bundle/gems/secure_headers-6.0.0.alpha02/lib/secure_headers/middleware.rb:13:in call' /usr/local/bundle/gems/railties-5.1.6/lib/rails/engine.rb:522:in call'\n/usr/local/bundle/gems/rack-2.0.5/lib/rack/urlmap.rb:68:in block in call' /usr/local/bundle/gems/rack-2.0.5/lib/rack/urlmap.rb:53:in each'\n/usr/local/bundle/gems/rack-2.0.5/lib/rack/urlmap.rb:53:in call' /usr/local/bundle/gems/capybara-3.7.2/lib/capybara/server/middleware.rb:48:in call'\n/usr/local/bundle/gems/rack-2.0.5/lib/rack/handler/webrick.rb:86:in service' /usr/local/lib/ruby/2.3.0/webrick/httpserver.rb:140:in service'\n/usr/local/lib/ruby/2.3.0/webrick/httpserver.rb:96:in run' /usr/local/lib/ruby/2.3.0/webrick/server.rb:314:in block in start_thread'\n\nThread 1 [0x331cad8 sleep]  Exclusive (yielded share)\nblocking: 0\n/usr/local/lib/ruby/2.3.0/monitor.rb:187:in lock' /usr/local/lib/ruby/2.3.0/monitor.rb:187:in mon_enter'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/concurrency/load_interlock_aware_monitor.rb:13:in block in mon_enter' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/dependencies/interlock.rb:46:in block in permit_concurrent_loads'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/concurrency/share_lock.rb:185:in yield_shares' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/dependencies/interlock.rb:45:in permit_concurrent_loads'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/concurrency/load_interlock_aware_monitor.rb:13:in mon_enter' /usr/local/lib/ruby/2.3.0/monitor.rb:212:in mon_synchronize'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/connection_adapters/abstract_adapter.rb:612:in block in log' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/notifications/instrumenter.rb:21:in instrument'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/connection_adapters/abstract_adapter.rb:604:in log' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/connection_adapters/postgresql/database_statements.rb:59:in query'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/connection_adapters/postgresql_adapter.rb:765:in column_definitions' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/connection_adapters/abstract_adapter.rb:167:in columns'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/connection_adapters/schema_cache.rb:67:in columns' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/connection_adapters/schema_cache.rb:73:in columns_hash'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/model_schema.rb:471:in load_schema!' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/attributes.rb:233:in load_schema!'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/attribute_decorators.rb:50:in load_schema!' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/model_schema.rb:464:in block in load_schema'\n/usr/local/lib/ruby/2.3.0/monitor.rb:214:in mon_synchronize' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/model_schema.rb:461:in load_schema'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/model_schema.rb:353:in attribute_types' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/attribute_methods.rb:164:in attribute_names'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/attribute_methods.rb:62:in block in define_attribute_methods' /usr/local/lib/ruby/2.3.0/mutex_m.rb:74:in synchronize'\n/usr/local/lib/ruby/2.3.0/mutex_m.rb:74:in mu_synchronize' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/attribute_methods.rb:59:in define_attribute_methods'\n\n/usr/local/bundle/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:21:in require' /usr/local/bundle/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:21:in block in require_with_bootsnap_lfi'\n/usr/local/bundle/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/loaded_features_index.rb:65:in register' /usr/local/bundle/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:20:in require_with_bootsnap_lfi'\n/usr/local/bundle/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:29:in require' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/dependencies.rb:292:in block in require'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/dependencies.rb:258:in load_dependency' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/dependencies.rb:292:in require'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/dependencies.rb:379:in block in require_or_load' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/dependencies.rb:36:in block in load_interlock'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/dependencies/interlock.rb:12:in block in loading' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/concurrency/share_lock.rb:149:in exclusive'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/dependencies/interlock.rb:11:in loading' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/dependencies.rb:36:in load_interlock'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/dependencies.rb:357:in require_or_load' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/dependencies.rb:511:in load_missing_constant'\n/usr/local/bundle/gems/bootsnap-1.3.0/lib/bootsnap/load_path_cache/core_ext/active_support.rb:43:in load_missing_constant' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/dependencies.rb:202:in const_missing'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/inflector/methods.rb:271:in const_get' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/inflector/methods.rb:271:in block in constantize'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/inflector/methods.rb:267:in each' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/inflector/methods.rb:267:in inject'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/inflector/methods.rb:267:in constantize' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/inflector/methods.rb:312:in safe_constantize'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/dependencies.rb:589:in safe_get' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/dependencies.rb:620:in safe_constantize'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/inheritance.rb:159:in block in compute_type' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/inheritance.rb:158:in each'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/inheritance.rb:158:in compute_type' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/reflection.rb:408:in compute_class'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/reflection.rb:404:in klass' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/reflection.rb:621:in automatic_inverse_of'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/reflection.rb:609:in block in inverse_name' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/reflection.rb:609:in fetch'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/reflection.rb:609:in inverse_name' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/reflection.rb:523:in has_inverse?'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/reflection.rb:236:in check_validity_of_inverse!' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/reflection.rb:474:in check_validity!'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/associations/association.rb:25:in initialize' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/associations.rb:265:in new'\n/usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/associations.rb:265:in association' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/associations/builder/association.rb:111:in integration'\n\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_controller/metal/basic_implicit_render.rb:4:in send_action' /usr/local/bundle/gems/actionpack-5.1.6/lib/abstract_controller/base.rb:186:in process_action'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_controller/metal/rendering.rb:30:in process_action' /usr/local/bundle/gems/actionpack-5.1.6/lib/abstract_controller/callbacks.rb:20:in block in process_action'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/callbacks.rb:131:in run_callbacks' /usr/local/bundle/gems/actionpack-5.1.6/lib/abstract_controller/callbacks.rb:19:in process_action'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_controller/metal/rescue.rb:20:in process_action' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_controller/metal/instrumentation.rb:32:in block in process_action'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/notifications.rb:166:in block in instrument' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/notifications/instrumenter.rb:21:in instrument'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/notifications.rb:166:in instrument' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_controller/metal/instrumentation.rb:30:in process_action'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_controller/metal/params_wrapper.rb:252:in process_action' /usr/local/bundle/gems/activerecord-5.1.6/lib/active_record/railties/controller_runtime.rb:22:in process_action'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/abstract_controller/base.rb:124:in process' /usr/local/bundle/gems/actionview-5.1.6/lib/action_view/rendering.rb:30:in process'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_controller/metal.rb:189:in dispatch' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_controller/metal.rb:253:in dispatch'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/routing/route_set.rb:49:in dispatch' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/routing/route_set.rb:31:in serve'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/routing/mapper.rb:16:in block in <class:Constraints>' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/routing/mapper.rb:46:in serve'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/journey/router.rb:50:in block in serve' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/journey/router.rb:33:in each'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/journey/router.rb:33:in serve' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/routing/route_set.rb:844:in call'\n/usr/local/bundle/gems/warden-1.2.7/lib/warden/manager.rb:36:in block in call' /usr/local/bundle/gems/warden-1.2.7/lib/warden/manager.rb:35:in catch'\n/usr/local/bundle/gems/warden-1.2.7/lib/warden/manager.rb:35:in call' /usr/local/bundle/gems/rack-2.0.5/lib/rack/etag.rb:25:in call'\n/usr/local/bundle/gems/rack-2.0.5/lib/rack/conditional_get.rb:38:in call' /usr/local/bundle/gems/rack-2.0.5/lib/rack/head.rb:12:in call'\n/usr/local/bundle/gems/rack-2.0.5/lib/rack/session/abstract/id.rb:232:in context' /usr/local/bundle/gems/rack-2.0.5/lib/rack/session/abstract/id.rb:226:in call'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/cookies.rb:613:in call' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/callbacks.rb:26:in block in call'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/callbacks.rb:97:in run_callbacks' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/callbacks.rb:24:in call'\n/usr/local/bundle/gems/bugsnag-6.7.3/lib/bugsnag/integrations/rack.rb:46:in call' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/debug_exceptions.rb:59:in call'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/show_exceptions.rb:31:in call' /usr/local/bundle/gems/railties-5.1.6/lib/rails/rack/logger.rb:36:in call_app'\n/usr/local/bundle/gems/railties-5.1.6/lib/rails/rack/logger.rb:24:in block in call' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/tagged_logging.rb:69:in block in tagged'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/tagged_logging.rb:26:in tagged' /usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/tagged_logging.rb:69:in tagged'\n/usr/local/bundle/gems/railties-5.1.6/lib/rails/rack/logger.rb:24:in call' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/remote_ip.rb:79:in call'\n/usr/local/bundle/gems/request_store-1.4.1/lib/request_store/middleware.rb:19:in call' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/request_id.rb:25:in call'\n/usr/local/bundle/gems/rack-2.0.5/lib/rack/method_override.rb:22:in call' /usr/local/bundle/gems/rack-2.0.5/lib/rack/runtime.rb:22:in call'\n/usr/local/bundle/gems/activesupport-5.1.6/lib/active_support/cache/strategy/local_cache_middleware.rb:27:in call' /usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/executor.rb:12:in call'\n/usr/local/bundle/gems/actionpack-5.1.6/lib/action_dispatch/middleware/static.rb:125:in call' /usr/local/bundle/gems/rack-2.0.5/lib/rack/sendfile.rb:111:in call'\n/usr/local/bundle/gems/rack-utf8_sanitizer-1.4.0/lib/rack/utf8_sanitizer.rb:20:in call' /usr/local/bundle/gems/secure_headers-6.0.0.alpha02/lib/secure_headers/middleware.rb:13:in call'\n/usr/local/bundle/gems/railties-5.1.6/lib/rails/engine.rb:522:in call' /usr/local/bundle/gems/rack-2.0.5/lib/rack/urlmap.rb:68:in block in call'\n/usr/local/bundle/gems/rack-2.0.5/lib/rack/urlmap.rb:53:in each' /usr/local/bundle/gems/rack-2.0.5/lib/rack/urlmap.rb:53:in call'\n/usr/local/bundle/gems/capybara-3.7.2/lib/capybara/server/middleware.rb:48:in call' /usr/local/bundle/gems/rack-2.0.5/lib/rack/handler/webrick.rb:86:in service'\n/usr/local/lib/ruby/2.3.0/webrick/httpserver.rb:140:in service' /usr/local/lib/ruby/2.3.0/webrick/httpserver.rb:96:in run'\n/usr/local/lib/ruby/2.3.0/webrick/server.rb:314:in `block in start_thread'", "number_of_comments": 11, "comment_authors": ["tessereth", "tessereth", "matthewd", "tessereth", "tessereth", "matthewd", "tessereth", "rails-bot", "trcarden", "tessereth", "trcarden"]},
{"title": "System tests - Preventing run multiple sessions for given test", "link": "https://github.com/rails/rails/issues/32198", "labels": ["\n                actionpack\n", "\n                attached PR\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5679943561553955, "creation_date": "2018-03-08T15:45:48Z", "issue_submitter": "pavel-jurasek", "body": "Steps to reproduce\nCapybara uses default name for session as follows: Capybara.session_name = :default. This preventing Capybara to recognise multiple sessions and uses only first match.\nCapybara.session_name \n=> :default\n\nActionDispatch::SystemTestCase.driven_by :poltergeist\n\nCapybara.session_name \n=> :default\n\nActionDispatch::SystemTestCase.driven_by :selenium, using: :firefox\n\nCapybara.session_name \n=> :default\nExpected behavior\nWe would like to do things like this:\n  RSpec.configure do |config|\n     config.around(:each) do |example|\n        if example.metadata[:type] == :system \n         [:safari_mac_high_sierra, :firefox_mac_high_sierra, :chrome_mac_high_sierra, :chrome_ios_iphone_x].each do |driver|\n             ActionDispatch::SystemTestCase.driven_by :selenium, using: driver\n             example.run\n         end\n     else\n       example.run\n     end\n  end\nActual behaviour\nCapybara session name should not always use :default as session name preventing sites use multiple combination per test suite.\nSystem configuration\nRails version:\n5.1.4\nRuby version:\n2.5.0p0", "number_of_comments": 2, "comment_authors": ["pavel-jurasek", "twalpole"]},
{"title": "Has many through _ids setter raises an exception when saving safely.", "link": "https://github.com/rails/rails/issues/32276", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5600008964538574, "creation_date": "2018-03-17T14:19:05Z", "issue_submitter": "matiasgarcia", "body": "Steps to reproduce\nbegin\n  require \"bundler/inline\"\nrescue LoadError => e\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\n  raise e\nend\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  gem \"rails\", github: \"rails/rails\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n    create_table :users do |t|\n      t.string :email, null: false\n\n      t.timestamps\n    end\n\n    create_table :accounts do |t|\n      t.string :name, null: false\n\n      t.timestamps\n    end\n\n    create_table :account_users do |t|\n      t.references :user, foreign_key: true\n      t.references :account, foreign_key: true\n\n      t.timestamps\n    end\nend\n\nclass User < ApplicationRecord\n  has_many :account_users\n  has_many :accounts, through: :account_users\nend\n\nclass Account < ApplicationRecord\n  has_many :account_users\n  has_many :users, through: :account_users\nend\n\nclass AccountUser < ApplicationRecord\n  belongs_to :user\n  belongs_to :account\n\n  validate :something_goes_wrong\n\n  def something_goes_wrong\n    errors.add(:base, 'error')\n  end\nend\n\nclass BugTest < Minitest::Test\n  def test_has_many_through_ids_setter\n    user = User.create!(email: 'test@test.com')\n    account = Account.create!(name: 'Test')\n    assert_equal false, user.update(account_ids: [account.id])\n  end\nend\n\nActual behavior\nRaises an exception\n  Account Load (0.4ms)  SELECT \"accounts\".* FROM \"accounts\" WHERE \"accounts\".\"id\" = 1\n  Account Load (0.1ms)  SELECT \"accounts\".* FROM \"accounts\" INNER JOIN \"account_users\" ON \"accounts\".\"id\" = \"account_users\".\"account_id\" WHERE \"account_users\".\"user_id\" = ?  [[\"user_id\", 1]]\n   (0.2ms)  rollback transaction\nActiveRecord::RecordInvalid: Validation failed: error\n\tfrom (irb):6\n\nSystem configuration\nRails version: 5.1.5\nRuby version: 2.3.1", "number_of_comments": 8, "comment_authors": ["matiasgarcia", "michaldarda", "Bartuz", "vedant1811", "darwin67", "matiasgarcia", "f-mer", "Resetyo"]},
{"title": "has_many does not update on save if parent has not been changed", "link": "https://github.com/rails/rails/issues/32476", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7864038944244385, "creation_date": "2018-04-06T08:28:23Z", "issue_submitter": "mri-dula", "body": "Steps to reproduce\nI have the following relationship between models:\nclass Gift \n    has_and_belongs_to_many :constituents, :autosave => true\n    accepts_nested_attributes_for :constituents\nend\n\n\nclass Constituent\n    has_and_belongs_to_many :gifts\n    has_many :addresses, :autosave => true\nend\n\nclass Address \n    belongs_to :constituent\nend\n\nIn my controller, I am simply running the save! method:\ndef create\n    @gift.assign_attributes gift_params\n    p @gift.constituents[0].changed? #Should print false\n    p @gift.constituents[0].addresses[0].changed? #Should print true\n    @gift.save!\nend\n\ndef gift_params\n    params.require(:gift).permit(:amount, :constituents_attributes => [:id, :organization_name, :title_id, :first_name, :last_name, :addresses_attributes => [ :id, :address_type, :address1, :address2, :city, :country_id, :state_id, :pin_code, :constituent_id ]])\nend\n\nPass the params to the action, such that there is some change in the address record, but not in the constituent record.\nExpected behavior\nThe address record should be updated irrespective of whether or not there are changes in its constituent record.\nActual behavior\nThe address record gets updated only if there are changes in the constituent record. Otherwise, it is not updated EVEN IF there are changes in the address record.\nIt works if I add this to the action:\n@donation.constituents[0].addresses.each do |a|\n        a.save! if a.changed?\nend\n\nSystem configuration\nRails version:\n5.0.6\nRuby version:\n2.4.1p111", "number_of_comments": 11, "comment_authors": ["mri-dula", "rafaelfranca", "mri-dula", "mrageh", "danhuynhdev", "danhuynhdev", "mri-dula", "leofrozenyogurt", "ziaulrehman40", "ashkulz", "ashkulz"]},
{"title": "Record not touched when removing associated has_many through", "link": "https://github.com/rails/rails/issues/29078", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7504246234893799, "creation_date": "2017-05-14T04:38:20Z", "issue_submitter": "thomasfedb", "body": "Steps to reproduce\nhttps://gist.github.com/thomasfedb/04ca6b5d476679e6550d4b849531cf42\nclass Post < ActiveRecord::Base\n  has_many :taggings\n  has_many :tags, through: :taggings\nend\n\nclass Tagging < ActiveRecord::Base\n  belongs_to :post, touch: true\n  belongs_to :tag\nend\n\nclass Tag < ActiveRecord::Base\nend\n\nclass BugTest < Minitest::Test\n  def test_has_many_through_touch\n    post = Post.create!\n    tag = Tag.create!\n\n    updated_at_before_tag_added = post.updated_at\n    post.update(tags: [tag])\n    updated_at_after_tag_added = post.updated_at\n\n    assert_equal 1, post.tags.count\n    assert updated_at_before_tag_added < updated_at_after_tag_added\n\n    updated_at_before_tag_removed = post.updated_at\n    post.update(tags: [])\n    updated_at_after_tag_removed = post.updated_at\n\n    assert_equal 0, post.tags.count\n    assert updated_at_before_tag_removed < updated_at_after_tag_removed,\n      \"post is not touched\"\n  end\nend\nExpected behavior\nThe post record should be touched both when the tag is added and when the tag is removed, as this results in a tagging being created and destroyed, which is configured with touch: true\nActual behavior\nThe post record is touched when the tagging is created, but not when it is destroyed\nSystem configuration\nRails version: 5.1.1\nRuby version: 2.4.0", "number_of_comments": 10, "comment_authors": ["thomasfedb", "andrehjr", "thomasfedb", "andrehjr", "thomasfedb", "Nerian", "thomasfedb", "Nerian", "thomasfedb", "Hirurg103"]},
{"title": "db:structure:load broken on linux with a default postgres install", "link": "https://github.com/rails/rails/issues/29049", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                PostgreSQL\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7583949565887451, "creation_date": "2017-05-11T13:47:40Z", "issue_submitter": "djcp", "body": "Steps to reproduce\nRE this PR\n\nHave a database with installed extensions, like plpgsql\nRun a default linux postgres install - meaning, you access postgres as a non-superuser.\nAttempt to load a db/structure.sql file that includes pointless but super-user only functions like\n\nCOMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';\n\nThis is especially an issue for projects where folks work in mixed environments, say osx homebrew postgres (whjch runs all databases as a superuser for \"convenience\", I suppose) and default linux postgres installs.\nUltimately the issue is osx postgres running as superuser and creating dump files in that context, but I don't think this is going to change any time soon.\nIt'd be ideal to at least be able to disable this behavior, as it is now I can't set up a project. I imagine this is going to happen for some production / CI environments as well. I don't think the correct solution is to tell linux users to access their rails databases as superusers, that's the equivalent of running your machine as root.\nExpected behavior\nIt should work with warnings as it did on previous versions of rails.\nActual behavior\nIt fails with:\npsql:/home/dcollispuro/code/work/addons.heroku.com/db/structure.sql:27: ERROR:  42501: must be owner of extension plpgsql\nLOCATION:  aclcheck_error, aclchk.c:3367\nTime: 0.211 ms\nrake aborted!\nfailed to execute:\npsql -v ON_ERROR_STOP=1 -q -f /home/dcollispuro/code/work/addons.heroku.com/db/structure.sql addons-development\n\nPlease check the output above for any errors and make sure that `psql` is installed in your PATH and has proper permissions.\n\nSystem configuration\nRails version: 5.1.0\nRuby version: 2.3.1p112", "number_of_comments": 7, "comment_authors": ["djcp", "maclover7", "djcp", "djcp", "sfcgeorge", "misdoro", "cthorner"]},
{"title": "Issues with Associations::Preloader used as a Public API", "link": "https://github.com/rails/rails/issues/32140", "labels": ["\n                pinned\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8523998260498047, "creation_date": "2018-02-28T18:59:33Z", "issue_submitter": "xuorig", "body": "Recently @eileencodes made me aware of this PullRequest #32136 and plans to possibly make Preloader a Public API.\nWe've been using Associations:Preloader at GitHub as part of our https://github.com/Shopify/graphql-batch setup to preload associations during GraphQL queries. Over the past month we've hit some pretty nasty issues with it. I believe these may have to be fixed before making the Preloader a public concern.\nLoading already loaded records\nThe main issue is this line: https://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/preloader.rb#L180\nWhen preloading an association on a list of records, if this association is already loaded on the first record of the list, it is assumed that the whole list is loaded. In these cases, a AlreadyLoaded preloader is returned, and uses association(name).target to read the preloaded records.\nIn a public setting, I don't think we can make this assumption, in fact, using preload with a list of records might result in this scenario:\na = Record.create!\nb = Record.create!\nc = Record.create!\n\na.some_association.create!\n\npreloaders = ActiveRecord::Associations::Preloader.new.preload([a,b,c], [:some_association])\n\npreloaders.first.preloaded_records\n=> [Only the association for a is preloaded]\nAt GitHub we worked around this problem by always checking if the association was already loaded, before passing a record to Preloader, filtering them out if needed. That solved most issues until we hit issues that were out of our control.\nTake through associations for example:\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/associations/preloader/through_association.rb#L8-L14\nIf we take\nhas_many :patients, through: :appointments , source: :client\n\nFirst, appointments are preloaded on patients. Then, client is preloaded on all patients. If the first appointment's client was already loaded, we'll get back only the client.\nWhen returning the preloaded records, we'll try to get the target association on all records, but the whole tail of the list of records will be nil because they weren't actually loaded.\nIn certain versions of Rails, association.reader is used instead of target if the association is not loaded. This is almost worst because it will silently generate N+1's.\nAnother gotcha this behaviour introduces is that you cannot use Preloader with different types of records / associations.\nFor example, one issue we hit was that we were preloading an association on two different types of records at the same time:\nPreloader.new.preload([doctor, patient, patient_b], [:appointment])\n\nIn our case, appoitments on one of the records was a has_one through:, and the other one was a belongs to. During the has_one through preloading logic, an association was loaded on the other kind of record. When it was time to load the second kind of record, since the association was already loaded for the first record, Preloader was skipping the whole list again.\nIf needed, I can provide failing tests for some of these tricky scenarios.\nPreloading different object_ids\nAnother smaller issue is that the preloader currently uniq! the records before preloading them. This means that passing multiple objects for the same record will result in only the first record being preloaded.\nWe work around that by deduping the records before passing them to Preloader, and we copy over the associations after.\nTakeaways\nCurrently, Rails assumes the preloader is ran in a certain context (its a private API right now after all). It breaks quickly when its used in other ways. It would be really awesome for us to make it a Public API, and it would be great to find a way around these gotchas!\ncc @eileencodes @tenderlove", "number_of_comments": 12, "comment_authors": ["xuorig", "rafaelfranca", "matthewd", "dinahshi", "rails-bot", "stephenh", "bogdan", "stephenh", "bogdan", "stephenh", "bogdan", "michaelgpearce"]},
{"title": "build_association on belongs_to does not add the builder to has_many association", "link": "https://github.com/rails/rails/issues/32024", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0074923038482666, "creation_date": "2018-02-16T21:10:43Z", "issue_submitter": "matthee", "body": "Steps to reproduce\nWhen build_association is called on a belongs_to relation, then the model does not get added to the inverse has_many relation. This behavior can also be observed when assigning a new record directly to the belong_to association.\n# frozen_string_literal: true\n\nbegin\n  require \"bundler/inline\"\nrescue LoadError => e\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\n  raise e\nend\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n\n  git_source(:github) { |repo| \"https://github.com/#{repo}.git\" }\n\n  # Activate the gem you are reporting the issue against.\n  gem \"activerecord\", \"5.1.5\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# Ensure backward compatibility with Minitest 4\nMinitest::Test = MiniTest::Unit::TestCase unless defined?(Minitest::Test)\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true do |t|\n  end\n\n  create_table :authors, force: true do |t|\n    t.integer :post_id\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :authors\n\n  validates :authors, length: { minimum: 1 }\nend\n\nclass Author < ActiveRecord::Base\n  belongs_to :post\nend\n\nclass BugTest < Minitest::Test\n\n  def test_build_association_adds_to_inverse\n    author = Author.new\n\n    post = author.build_post\n\n    assert_equal 1, post.authors.length\n    assert_equal author, post.authors.first\n    assert_predicate author, :valid?\n    assert_predicate post, :valid?\n    assert author.save\n  end\n\n  def test_assigning_belongs_to_adds_to_inverse\n    author = Author.new\n    post = Post.new\n\n    author.post = post\n\n    assert_equal 1, post.authors.length\n    assert_equal author, post.authors.first\n    assert_predicate author, :valid?\n    assert_predicate post, :valid?\n    assert author.save\n  end\n\nend\nExpected behavior\nI expect the Post model to know about the author, through which it was built. This would match the behavior observed, when used the other way round. (post.authors.build actually assigns the inverse post and post = authors.build_post results in authors.post == post being true)\nActual behavior\nThe authors relation is blank. Hence, the validations on the Post model are failing. Neither am I able to then save Post nor the Author model, without me explicitly adding the Author model to the post.authors relation.\nSystem configuration\nRails version:\n5.1.5\nRuby version:\n2.3.6", "number_of_comments": 14, "comment_authors": ["matthee", "fragoulis", "matthee", "victorhazbun", "dzmitrys-dev", "rafaelfranca", "dzmitrys-dev", "rafaelfranca", "victorhazbun", "dzmitrys-dev", "victorhazbun", "jash-kothari", "dmitry", "kaelumania"]},
{"title": "try doesn't work with DelegateClass(x)", "link": "https://github.com/rails/rails/issues/31045", "labels": ["\n                activesupport\n", "\n                attached PR\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0466890335083008, "creation_date": "2017-11-03T20:39:59Z", "issue_submitter": "danielma", "body": "try was patched to work with delegators in af53280\nIt does work correctly with subclasses of SimpleDelegator, but not with subclasses of DelegateClass(x), even though DelegateClass(x) has ActiveSupport::Tryable in its ancestors\nReproduction Script\nbegin\n  require \"bundler/inline\"\nrescue LoadError => e\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\n  raise e\nend\n\ngemfile(true) do\n  git \"https://github.com/rails/rails.git\" do\n    gem \"activesupport\"\n  end\nend\n\nrequire \"active_support/core_ext/object/try\"\nrequire \"minitest/autorun\"\n\n# Ensure backward compatibility with Minitest 4\nMinitest::Test = MiniTest::Unit::TestCase unless defined?(Minitest::Test)\n\nclass Dog\n  def bark\n    :woof\n  end\nend\n\nclass DogDelegator < SimpleDelegator\n  def bark\n    :meow\n  end\nend\n\nclass DogDelegate < DelegateClass(Dog)\n  def bark\n    :meow\n  end\nend\n\nclass DelegatorTryTest < Minitest::Test\n  def test_simple_delegator_uses_try_correctly\n    delegator = DogDelegator.new(Dog.new)\n\n    assert_includes delegator.class.ancestors, ActiveSupport::Tryable, \"the object is Tryable\"\n\n    assert_equal :meow, delegator.bark\n    assert_equal :meow, delegator.try(:bark)\n  end\n\n  def test_delegate_class_uses_try_correctly\n    delegate_instance = DogDelegate.new(Dog.new)\n\n    assert_includes delegate_instance.class.ancestors, ActiveSupport::Tryable, \"the object is Tryable\"\n\n    assert_equal :meow, delegate_instance.bark\n    # this is where it fails\n    assert_equal :meow, delegate_instance.try(:bark)\n  end\nend\nSystem configuration\nRails version: master\nRuby version: MRI 2.3.3", "number_of_comments": 3, "comment_authors": ["danielma", "rafaelfranca", "danielma"]},
{"title": "weird behavior of per_form_csrf_tokens", "link": "https://github.com/rails/rails/issues/29085", "labels": ["\n                security\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0769495964050293, "creation_date": "2017-05-15T06:56:22Z", "issue_submitter": "apinrdw", "body": "Steps to reproduce\nI am created a demo app for testing here, and also override the RequestForgeryProtection#valid_authenticity_token? for logging.\n\nopen http://localhost:3000/posts/new\nfill and submit the form\nand see the console.\n\nExpected behavior\nper_form_csrf_tokens: true\ncompare_with_real_token: false\nvalid_per_form_csrf_token?: true\n\nActual behavior\nper_form_csrf_tokens: true\ncompare_with_real_token: true\nvalid_per_form_csrf_token?: false\n\nSystem configuration\nRails version:\n5.0.3\nRuby version:\n2.4.1", "number_of_comments": 5, "comment_authors": ["apinrdw", "ghost", "kv109", "kv109", "dillonwelch"]},
{"title": "ActiveRecord calling save on a parent with accepts_nested_attributes_for with before_destroy on child model can raise error", "link": "https://github.com/rails/rails/issues/31431", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8043501377105713, "creation_date": "2017-12-13T19:53:09Z", "issue_submitter": "rschooley", "body": "Steps to reproduce\nhave a parent model with accepts_nested_attributes_for :foos, allow_destroy: true\nhave the child model add an error and return false in a before_destroy hook\nmark the child with _destroy in a fields_for\nsave the form\nExpected behavior\nCalling save on the parent should return false.\nActual behavior\nAn unhandled exception is thrown ActiveRecord::RecordNotDestroyed\nSystem configuration\nRails version: 4.2.10\nRuby version: 2.4.1\nHere is a link to sample project reproducing it, with instructions in the Readme.  Let me know if I can add any more useful info, thanks.\nhttps://github.com/rschooley/rails_nested_sample", "number_of_comments": 8, "comment_authors": ["rschooley", "y-yagi", "rschooley", "rails-bot", "rschooley", "rafaelfranca", "why-el", "filipegiusti"]},
{"title": "Deferred fixture enrolment causes over-eager connection", "link": "https://github.com/rails/rails/issues/27581", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                pinned\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.6247227191925049, "creation_date": "2017-01-05T13:26:42Z", "issue_submitter": "matthewd", "body": "#20818 aimed to ensure we consistently apply fixture transactions to all future connections, as well as the ones that already exist during test setup.\nBut it seems to conflate the creation of the pool and the creation of the actual connections, causing an immediate connection as soon as a pool is configured -- plus missing other connections that could be established.\nUsing some mechanism, like the notification, to notice when a new pool is configured is a good plan -- but the reaction should be to enlist said pool in future transaction management of its actual connections, as & when they get created and/or checked out.\nI think we should likewise enlist the existing pools, instead of forcefully connecting them, too.\ncc @rafaelfranca @arthurnn", "number_of_comments": 6, "comment_authors": ["matthewd", "arthurnn", "arthurnn", "kaspth", "wjordan", "wjordan"]},
{"title": "Make ActiveStorage work for API only apps", "link": "https://github.com/rails/rails/issues/32208", "labels": ["\n                activestorage\n", "\n                attached PR\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.6399471759796143, "creation_date": "2018-03-08T22:18:34Z", "issue_submitter": "hector", "body": "I have a Rails API serving a React SPA. It works perfect but I had to do a modification to use ActiveStorage's direct uploads.\nThe problem appears when trying to create a direct upload (i.e. a Blob).  ActiveStorage::DirectUploadsController will fail with some errors which I believe are expected on a normal app but not on an API controllers. These are the errors:\n\nHTTP Origin header (http://localhost:3001/) didn't match request.base_url (http://localhost:3000)\nCan't verify CSRF token authenticity.\n\nMy solution has been to change this line:\n\n\n\nrails/activestorage/app/controllers/active_storage/direct_uploads_controller.rb\n\n\n         Line 6\n      in\n      4ec8bf6\n\n\n\n\n\n\n class ActiveStorage::DirectUploadsController < ActionController::Base \n\n\n\n\n\nand make:\nclass ActiveStorage::DirectUploadsController < ApplicationController\nI think the problem is solved because my ApplicationController inherits from ActionController::API.\nIf my assumptions are correct, shouldn't ActiveStorage controllers inherit from ActionController::API or ActionController::Base depending on config.api_only = true?", "number_of_comments": 33, "comment_authors": ["hector", "kstratis", "hector", "cbothner", "kstratis", "derigible", "cdesch", "cbothner", "tommotaylor", "Jarred-Sumner", "cbothner", "drale2k", "cbothner", "rodrigoHime", "krue-doug", "dagumak", "el-rotny", "robertsonsamuel", "dagumak", "robertsonsamuel", "rails-bot", "Samsinite", "mKontakis", "Jarred-Sumner", "kaka-ruto", "Samsinite", "rails-bot", "Frederik-Baetens", "aronstrandberg", "Frederik-Baetens", "rails-bot", "rails-bot", "rails-bot"]},
{"title": "STI: class names as parameters for where", "link": "https://github.com/rails/rails/issues/31100", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.221109390258789, "creation_date": "2017-11-09T09:09:51Z", "issue_submitter": "skyfmmf", "body": "Steps to reproduce\nWhile upgrading Rails to 5.1.4 I noticed the following behaviour: single class names are no longer accepted as parameters for where, but they are accepted when enclosed in an array. This makes it more difficult to use the inheritance column in queries.\nI hope the following examples show what I mean:\nAnimal.where(:type => Cat) # broken in rails 5.1.4\nAnimal.where(:type => \"Cat\") # works, but misses the check for existence of the class on autoload\nAnimal.where(:type => [Cat]) # works, but constructs a LIKE query\nExpected behavior\nI expected the where to work with class names as parameters for the inheritance column like before.\nActual behavior\nI get a TypeError: can't cast Class when executing the query.\nSystem configuration\nRails version: 5.1.4\nRuby version: 2.3.3", "number_of_comments": 21, "comment_authors": ["skyfmmf", "pixeltrix", "pixeltrix", "skyfmmf", "pixeltrix", "matthewd", "rafaelfranca", "rafaelfranca", "skyfmmf", "pixeltrix", "rafaelfranca", "rafaelfranca", "matthewd", "sgrif", "skyfmmf", "matthewd", "skyfmmf", "mayurkhatri", "msxavi", "dmitry", "marcelolx"]},
{"title": "ActiveStorage: invalid Attachment when last step of direct upload fails", "link": "https://github.com/rails/rails/issues/31985", "labels": ["\n                activestorage\n", "\n                With reproduction steps\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.028048038482666, "creation_date": "2018-02-13T17:56:05Z", "issue_submitter": "SimonFrr", "body": "I am trying to handle the case where the last step of a direct upload fails (the PATCH call to my model), and I have noticed an odd behaviour. Here goes:\nSteps to reproduce\n\nSet up the Profile model with has_one_attached :document.\nCreate an instance of Profile (referred to as profile)\nUse a direct upload form to attach a document to profile (controller and view code below)\nEverything works fine so far, I can see the image and its filename.\nForce a failure in the PATCH call to /profile/document: intentionally modify a validation in the Profile model so that any call to Profile#update fails\nUpload another document for the same Profile, and watch the PATCH fail.\n\nExpected behavior\nWhen this last step fails, I'd expect the whole state of my app to go back to its state from before the beginning of the upload process (the POST call to rails/active_storage/direct_uploads).\nI'd also expect the former file to still be there on the storage, and the new one to not be there.\nActual behavior\nThe Attachment record for my Profile is still the same, but the original Blob was destroyed, and replaced by a new one (created by the first POST to rails/active_storage/direct_uploads). The Attachment points to the destroyed Blob.\nprofile.document.attached? returns true, but other methods, e.g. filename or service_url are undefined. This breaks my views: the if passes, the statements inside break.\nS3/Disk contains the new file, and does not contain the former one.\nThe logs tell me that the first call from the client to /rails/active_storage/direct_uploads creates a Blob. Then, after the upload to S3 is done, the PATCH call to /profile/document destroys the former Attachment and creates a new one, but this is all rolled back when my validation fails. However, it also enqueues a job that purges the former Blob, instead of purging the newly created one.\nFrom my understanding, what this job does should depend upon the success of the PATCH call. Is this an actual bug, or am I supposed to handle this manually? Or maybe there's just another way to write things and make it work automagically?\nOne workaround I found is to call purge or detach on the document when the update fails. From a user's point of view it removes the former document, which isn't so nice, but at least my views don't break. The Attachment is destroyed, the Blob remains, the former file is destroyed, the new one is stored. This fix is commented out in the code sample.\nSystem configuration\nI get the bug on my local environment, both with S3 and Disk as targets.\nRails version:\nRails 5.2.0.rc1\nRuby version:\nruby 2.5.0p0 (2017-12-25 revision 61468) [x86_64-darwin17]\nCode samples\nAdapted for better readability.\nclass ProfilesController < ApplicationController\n  def update\n    if current_user.profile.update(document_params)\n      flash[:notice] = \"Your document was successfully uploaded\"\n    else\n      # current_profile.reload.identity_document.purge # The fix\n      flash[:alert] = \"Something went wrong.\"\n    end\n    redirect_to my_form_url\n  end\n\n  private\n\n  def document_params\n    params.require(:profile).permit(:document)\n  end\nend\n\n<% if @profile.document.attached? %>\n    <%= @profile.document.filename %>\n    <%= image_tag @profile.document %>\n<% else %>\n    No document yet\n<% end %>\n\n<%= form_for @profile do |f| %>\n    <%= f.file_field :document, direct_upload: true %>\n    <%= f.submit %>\n<% end %>\n\nThanks in advance for your help!", "number_of_comments": 17, "comment_authors": ["SimonFrr", "JoseMPena", "SimonFrr", "dtcristo", "martinstreicher", "CodingAnarchy", "kreintjes", "bjgaynor", "paulleoniuk", "NARKOZ", "onhout", "willy-wonka-git", "ChillyHoney", "achref-rassas", "toddhow", "tagrudev", "zzak"]},
{"title": "ActiveRecord 5.1 - #includes raises NoMethodError when case doesn't match on join columns", "link": "https://github.com/rails/rails/issues/31445", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.1951448917388916, "creation_date": "2017-12-14T14:27:15Z", "issue_submitter": "seandilda", "body": "Steps to reproduce\n(This is how my app is setup, there may be other configurations that produce the same error).\nschema.rb:\ncreate_table \"activities\"  do |t|\n  t.string 'username'\nend\ncreate_table 'users', id: false do |t|\n  t.string 'username', null: false\nend\nModels:\nclass Activity < ApplicationRecord\n  belongs_to :user, foreign_key: :username, optional: true\nend\nclass User < ApplicationRecord\n  self.primary_key = :username\n  has_many :activities\nend\nSet the username on an activity to a username that doesn't exist in the users table.\nRun:\nActivity.all.includes(:user).to_a\n(I realize this is a case of bad data consistency, but I'm dealing with data from other systems, and I don't want to lose data or generate artificial data.)\nExpected behavior\nI should get an array of all Activities with all relevant users preloaded, and the activities that don't have a valid matching user should return nil when I call activity.user.\nThis is the same behavior you'd get if you didn't use includes, except the users would be preloaded.\nActual behavior\nNoMethodError: undefined method `association' for nil:NilClass\nSystem configuration\nRails version: 5.1.4\nRuby version: 2.4.1", "number_of_comments": 12, "comment_authors": ["seandilda", "meinac", "seandilda", "rails-bot", "htanata", "rails-bot", "htanata", "jules2689", "rails-bot", "bjeanes", "Silex", "kapcod"]},
{"title": "ActiveRecord::Relation#cache_key returns same key for different records with hm:t association", "link": "https://github.com/rails/rails/issues/27570", "labels": ["\n                activerecord\n", "\n                pinned\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0338249206542969, "creation_date": "2017-01-04T14:49:24Z", "issue_submitter": "javan", "body": "has_many :through relations that return the same number of records and one common record with the max updated_at will generate the same cache_key. For example:\nclass Access < ActiveRecord::Base; end\nclass Person < ActiveRecord::Base; end\nclass Bucket < ActiveRecord::Base\n  has_many :people, through: :accesses\nend\n>> bucket.people.map(&:name)\n=> [\"Victor Cooper\", \"Jared Davis\"]\n\n>> bucket.people.cache_key\n=> \"people/query-2343a4c885c823c01ef9c2eb358b73eb-2-20161229150259317823\"\nAbove, Victor Cooper has the max updated_at (20161229150259317823). If we remove Jared Davis and add a new person who's updated_at is less than Victor's, we'll get the same cache_key:\n>> bucket.reload.people.map(&:name)\n=> [\"Victor Cooper\", \"Amy Rivera\"]\n\n>> bucket.people.cache_key\n=> \"people/query-2343a4c885c823c01ef9c2eb358b73eb-2-20161229150259317823\"\nThis was introduced in #20884. /cc @afcapel @sgrif", "number_of_comments": 3, "comment_authors": ["javan", "christos", "rails-bot"]},
{"title": "cookies.delete broken for request type other than GET in controller tests", "link": "https://github.com/rails/rails/issues/27584", "labels": ["\n                actionpack\n", "\n                attached PR\n", "\n                regression\n", "\n                With reproduction steps\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.472034215927124, "creation_date": "2017-01-05T20:21:56Z", "issue_submitter": "iamchucky", "body": "Steps to reproduce\nReproduction Script\nExpected behavior\ncookies[\"foo\"] in test cases should be nil after cookies.delete is called in controller\nActual behavior\nonly GET request has the cookies[\"foo\"] deleted while other request types still has cookies[\"foo\"]\nSystem configuration\nRails version: 5.0.1, 5-0-stable\nRuby version: 2.3.1p112\nNote that this is passing for Rails 4.2.7.1\nI've noticed that ae29142 has cookies.update res.cookies only for get but not for other request types, is that the root of the issue though?\nThis issue also seems to be related:\nrspec/rspec-rails#1574", "number_of_comments": 4, "comment_authors": ["iamchucky", "maclover7", "maclover7", "rafaelfranca"]},
{"title": "Nullify callback persists even as child class overrides association", "link": "https://github.com/rails/rails/issues/27364", "labels": ["\n                activerecord\n", "\n                needs feedback\n", "\n                pinned\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4438345432281494, "creation_date": "2016-12-15T00:14:13Z", "issue_submitter": "chrisarcand", "body": "Steps to reproduce\nbegin\n  require \"bundler/inline\"\nrescue LoadError => e\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\n  raise e\nend\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n  gem \"activerecord\", \"5.0.0.1\"\n  gem \"sqlite3\"\n  gem 'pry'\n  gem 'pry-byebug'\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# Ensure backward compatibility with Minitest 4\nMinitest::Test = MiniTest::Unit::TestCase unless defined?(Minitest::Test)\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table \"houses\", force: :cascade do |t|\n    t.integer  \"person_id\"\n    t.datetime \"created_at\", null: false\n    t.datetime \"updated_at\", null: false\n  end\n\n  create_table \"people\", force: :cascade do |t|\n    t.integer  \"parent_id\"\n    t.datetime \"created_at\", null: false\n    t.datetime \"updated_at\", null: false\n  end\nend\n\nclass House < ActiveRecord::Base\n  belongs_to :person\nend\n\nclass Person < ActiveRecord::Base\n  has_one :child, :foreign_key => 'parent_id', :foreign_type => 'Child'\n  # Houses will continue to exist, but without their owners...\n  has_many :houses, :dependent => :nullify\nend\n\nclass Child < Person\n  belongs_to :parent, :class_name => 'Person'\n  # A child's house is their parent's house!\n  has_many :houses, :through => :parent\nend\n\nclass BugTest < Minitest::Test\n  def setup\n    @parent = Person.create(:houses => [House.create, House.create], :child => Child.create)\n    @child = @parent.child\n\n    assert_equal @parent.child, @child\n    assert_equal @child.parent, @parent\n    assert_equal @parent.houses.count, 2\n  end\n\n  def test_parentless_child_houses\n    @parentless_child = Child.create\n\n    assert_equal @parentless_child.houses.count, 0 # Passes\n  end\n\n  def test_child_houses_are_their_parents_houses\n    assert_equal @parent.houses, @child.houses # Passes\n  end\n\n  def test_person_destroy\n    assert @parent.destroy # Passes\n  end\n\n  def test_child_destroy\n    assert @child.destroy # Fails!\n  end\nend\n\nExpected behavior\nI should be able to destroy the child as the association I've specified does not attempt to nullify houses.\nActual behavior\nError: BugTest#test_child_destroy:\nActiveRecord::HasManyThroughCantAssociateThroughHasOneOrManyReflection:\nCannot modify association 'Child#houses' because the source reflection class\n'House' is associated to 'Person' via :has_many.\n\nMore notes\nI've been digging in a bit trying to find the cause of this, but have started getting in over my head with callbacks. It appears on child.destroy that _destroy_callbacks from a nullify are indeed present (even though they shouldn't be), although the options within the reflection object doesn't seem to indicate that:\n> Person.reflections['houses']\n=> #<ActiveRecord::Reflection::HasManyReflection:0x007fc1703b2070\n @active_record=Person(id: integer, parent_id: integer, created_at: datetime, updated_at: datetime),\n @active_record_primary_key=\"id\",\n @association_scope_cache={},\n @automatic_inverse_of=:person,\n @class_name=\"House\",\n @constructable=true,\n @foreign_key=\"person_id\",\n @foreign_type=\"houses_type\",\n @inverse_of=\n  #<ActiveRecord::Reflection::BelongsToReflection:0x007fc1703fa3e8\n   @active_record=House(id: integer, person_id: integer, created_at: datetime, updated_at: datetime),\n   @association_scope_cache={},\n   @automatic_inverse_of=false,\n   @class_name=\"Person\",\n   @constructable=true,\n   @foreign_key=\"person_id\",\n   @foreign_type=\"person_type\",\n   @klass=Person(id: integer, parent_id: integer, created_at: datetime, updated_at: datetime),\n   @name=:person,\n   @options={},\n   @plural_name=\"people\",\n   @scope=nil,\n   @scope_lock=#<Thread::Mutex:0x007fc1703f9f60>,\n   @type=nil>,\n @inverse_which_updates_counter_cache=nil,\n @klass=House(id: integer, person_id: integer, created_at: datetime, updated_at: datetime),\n @name=:houses,\n @options={:dependent=>:nullify},\n @plural_name=\"houses\",\n @scope=nil,\n @scope_lock=#<Thread::Mutex:0x007fc1703b1d00>,\n @type=nil>\n\n> Child.reflections['houses']\n=> #<ActiveRecord::Reflection::ThroughReflection:0x007fc170388bd0\n @class_name=\"House\",\n @delegate_reflection=\n  #<ActiveRecord::Reflection::HasManyReflection:0x007fc170388888\n   @active_record=Child(id: integer, parent_id: integer, created_at: datetime, updated_at: datetime),\n   @association_scope_cache={},\n   @automatic_inverse_of=false,\n   @constructable=true,\n   @foreign_type=\"houses_type\",\n   @klass=nil,\n   @name=:houses,\n   @options={:through=>:parent},\n   @plural_name=\"houses\",\n   @scope=nil,\n   @scope_lock=#<Thread::Mutex:0x007fc170388388>,\n   @type=nil>,\n @klass=House(id: integer, person_id: integer, created_at: datetime, updated_at: datetime),\n @source_reflection_name=:houses>\n\nSystem configuration\nRails version: 5.0.0.1\nRuby version: 2.3.1\ncc/ @matthewd @durandom", "number_of_comments": 5, "comment_authors": ["chrisarcand", "maclover7", "maclover7", "rails-bot", "chrisarcand"]},
{"title": "NilClass.to_query(key) does not round-trip with Rack::Utils.parse_nested_query", "link": "https://github.com/rails/rails/issues/28322", "labels": ["\n                activesupport\n", "\n                attached PR\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0704174041748047, "creation_date": "2017-03-07T01:21:20Z", "issue_submitter": "md5", "body": "Steps to reproduce\nIt should ideally be possible to round-trip from a Hash or ActionController::Parameters object to a query string and back. Currently, this does not work when the value is nil, in which case the value round-trips to '' instead of nil.\nSee this gist: https://gist.github.com/md5/be5d072bb2c853baf2143dd5faba69cb\nExpected behavior\nHaving a nil value in the parameters hash should result in a key with no value in the query string.\nActual behavior\nCurrently, a nil value results in the same query string as a blank string, namely key=.\nSystem configuration\nRails version: Any\nRuby version: Any", "number_of_comments": 4, "comment_authors": ["md5", "al2o3cr", "md5", "md5"]},
{"title": "Memory leak in development", "link": "https://github.com/rails/rails/issues/27273", "labels": ["\n                actionview\n", "\n                attached PR\n", "\n                needs feedback\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4488306045532227, "creation_date": "2016-12-05T19:45:08Z", "issue_submitter": "printercu", "body": "Steps to reproduce\nAdd lines to ApplicationController:\n  after_action do\n    logger.info 'Leaked: ' +\n      view_paths.first.instance_variable_get(:@cache).instance_variable_get(:@data).size.to_s\n  end\nRefresh page few times. See the number is increasing.\nIt's related to #20384. Digests are cleared, but not cache objects. I haven't found easy way to clear all caches, as every controller seems to have its own.\nExpected behavior\nCache size should not be incremented infinitely.\nActual behavior\nIt's incremented infinitely.\nSystem configuration\nRails version: 5.0.0.1\nRuby version: 2.3", "number_of_comments": 17, "comment_authors": ["printercu", "rafaelfranca", "kaspth", "printercu", "matthewd", "printercu", "printercu", "kaspth", "printercu", "printercu", "printercu", "printercu", "tenderlove", "printercu", "printercu", "duyleekun", "printercu"]},
{"title": "5.0.0.1 -> 5.0.1 breaks validates uniqueness with relation", "link": "https://github.com/rails/rails/issues/27426", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                needs feedback\n", "\n                regression\n", "\n                With reproduction steps\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.422821283340454, "creation_date": "2016-12-21T17:35:49Z", "issue_submitter": "grosser", "body": "this used to work ...\nvalidates :name, uniqueness: {scope: [:user]}\n\nnow needs to be:\nvalidates :name, uniqueness: {scope: [:user_id]}\n\n... either fix or warn loudly that relations are not supported", "number_of_comments": 9, "comment_authors": ["grosser", "maclover7", "grosser", "grosser", "utilum", "grosser", "maclover7", "grosser", "matt17r"]},
{"title": "Query attribute methods behave the same as present? for all values except 0 in a number column", "link": "https://github.com/rails/rails/issues/28438", "labels": ["\n                activerecord\n", "\n                needs feedback\n", "\n                With reproduction steps\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.7362041473388672, "creation_date": "2017-03-15T21:42:49Z", "issue_submitter": "alecdotninja", "body": "Steps to reproduce\nAny model with a column with an OID that is a number? is sufficient, but I reproduce with ActiveRecord::Type::Integer below.\nbegin\n  require \"bundler/inline\"\nrescue LoadError => e\n  $stderr.puts \"Bundler version 1.10 or later is required. Please update your Bundler\"\n  raise e\nend\n\ngemfile(true) do\n  source \"https://rubygems.org\"\n  gem \"rails\", \"4.2.6\"\n  gem \"sqlite3\"\nend\n\nrequire \"active_record\"\nrequire \"minitest/autorun\"\nrequire \"logger\"\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :people, force: true do |t|\n    t.integer :age\n  end\nend\n\nclass Person < ActiveRecord::Base\nend\n\nclass BugTest < Minitest::Test\n  def test_query_attribute_method_for_number_column\n    person = Person.create!\n\n    person.age = rand(1..1000)\n    assert_equal person.age?, person.age.present?\n\n    person.age = 0\n    assert_equal person.age?, person.age.present?\n  end\nend\nExpected behavior\nSave some reasonable heuristics in the situation where the attribute's type is unknown, I expect query attribute methods like age? to be a shorthand for age.present?.\nActual behavior\nLooking at the underlying implementation in ActiveRecord::AttributeMethods::Query#query_attribute, it seems this will be exactly the case for all values except those that are zero? and whose type is number? (e.g. 0 in a ActiveRecord::Type::Integer column as above).\nSystem configuration\nRails version: 4.2.6\nRuby version: 2.3.1", "number_of_comments": 3, "comment_authors": ["alecdotninja", "alecdotninja", "dpisarewski"]},
{"title": "Setting datetime inside Time#use_zone does not work", "link": "https://github.com/rails/rails/issues/28877", "labels": ["\n                activerecord\n", "\n                regression\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7148702144622803, "creation_date": "2017-04-25T17:54:59Z", "issue_submitter": "wdruzkawiecki", "body": "Steps to reproduce\nevent = Event.new # start_at: datetime\nTime.use_zone(\"Sydney\") { event.start_at = \"2017-05-01 13:00\" }\nevent.start_at\nevent\nExpected behavior\n\nMon, 01 May 2017 13:00:00 AEST +10:00\n#<Event id: nil, name: nil, start_at: \"2017-05-01 03:00:00\", created_at: nil, updated_at: nil>\n\nActual behavior\n\nMon, 01 May 2017 13:00:00 UTC +00:00\n#<Event id: nil, name: nil, start_at: \"2017-05-01 13:00:00\", created_at: nil, updated_at: nil>\n\nSystem configuration\nRails version: Rails 5.0.2\nRuby version: ruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-linux]\nPostgresql version: psql (PostgreSQL) 9.5.6\nAdditional info\nIn my another project on ruby 2.3.0 and rails 4.2.6 it works fine.\n2.3.0 :001 > event = Event.new\n => #<Event id: nil, name: nil, start_at: nil, created_at: nil, updated_at: nil> \n2.3.0 :002 > Time.use_zone(\"Sydney\") { event.start_at = \"2017-05-01 13:00\" }\n => \"2017-05-01 13:00\" \n2.3.0 :003 > event.start_at\n => Mon, 01 May 2017 13:00:00 AEST +10:00 \n2.3.0 :004 > event\n => #<Event id: nil, name: nil, start_at: \"2017-05-01 03:00:00\", created_at: nil, updated_at: nil> \n2.3.0 :005 >", "number_of_comments": 5, "comment_authors": ["wdruzkawiecki", "pixeltrix", "smadeja", "pixeltrix", "DanielHeath"]},
{"title": "Rails form validation errors not displayed for assocation foreign key field when only presence for the association itself is validated", "link": "https://github.com/rails/rails/issues/28772", "labels": ["\n                actionview\n", "\n                attached PR\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.7333869934082031, "creation_date": "2017-04-15T19:56:28Z", "issue_submitter": "edwardmp", "body": "I stumbled upon the following quirk in Rails lately, and I discovered I am not the only one experiencing this nuisance. I will reuse some examples and text from the iada.nl blog, of which the author discussed this issue at length before I even discovered it in the first place.\nSay you have the following code contained in a form in a view:\n<div class=\"field\">\n    <%= f.label :author %>:<br />\n    <%= f.collection_select :author_id, Author.all, :id, :name %>\n</div>\n\nThe object used in this form is a Book instance:\nclass Book < ActiveRecord::Base\n  belongs_to :author\n  validates :author, presence: true\nend\nWe check the presence of the author association here, rather than checking the presence of the foreign key (which is considered bad practice by the Rails community). If the author_id is not set in the form, the validation error is correctly added to the form itself, but not associated with the author_id field in the form. This is because the select field we created is for the author_id and not the Author association itself.\nThe cause of this problem is simple, Rails sets the error for the association name, while we are displaying a field for the foreign key column (the id of the associated model).\nThe solution would be simple, and involves modifying the existing error_message method in ActionView's ActiveModelInstanceTag module. The author of aforementioned blog already has devised an effective monkey patch which could be partially reused here.\nIf the Rails core team agrees with the mentioned approach, I'd like to submit a PR for this.\nPossible caveats I can think of at this time if such behaviour would be activated in existing Rails projects:\n\nWe need to check if we are not showing duplicate error messages if someone validates the presence of both the association itself and the association's foreign key (although such practices should be discouraged, for example by displaying a warning message in the console).", "number_of_comments": 6, "comment_authors": ["edwardmp", "maclover7", "edwardmp", "edwardmp", "toomanyjoes", "anaulin"]},
{"title": "Postgresql float4 poor precision, extra_float_digits = 3", "link": "https://github.com/rails/rails/issues/28798", "labels": ["\n                activerecord\n", "\n                needs work\n", "\n                pinned\n", "\n                PostgreSQL\n"], "depth": 13, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.727271318435669, "creation_date": "2017-04-19T15:09:48Z", "issue_submitter": "ioquatix", "body": "Steps to reproduce\nCreate a table with float4 column and insert some values, e.g.\n> ue = GeoZone::UserEvent.create(user_id: 10, longitude: 1.123456789, latitude: 1.123456789, what: 'test')\n=> #<GeoZone::UserEvent:0x0055959f1471b8\n id: 2,\n user_id: 10,\n latitude: 1.123456789,\n longitude: 1.123456789,\n active: true,\n poi_id: nil,\n deal_id: nil,\n category_id: nil,\n what: \"test\",\n locale: nil,\n created_at: 2017-04-19 15:06:20 UTC,\n parameters: nil>\n[3] pry(main)> ue.reload\n=> #<GeoZone::UserEvent:0x0055959f1471b8\n id: 2,\n user_id: 10,\n latitude: 1.12346,\n longitude: 1.12346,\n active: true,\n poi_id: nil,\n deal_id: nil,\n category_id: nil,\n what: \"test\",\n locale: nil,\n created_at: 2017-04-19 15:06:20 UTC,\n parameters: nil>\n[5] pry(main)> ActiveRecord::Base.connection.execute('SET extra_float_digits = 3')\n=> #<PG::Result:0x0055959f39eda8 status=PGRES_COMMAND_OK ntuples=0 nfields=0 cmd_tuples=0>\n[6] pry(main)> ue.reload\n=> #<GeoZone::UserEvent:0x0055959f1471b8\n id: 2,\n user_id: 10,\n latitude: 1.12345684,\n longitude: 1.12345684,\n active: true,\n poi_id: nil,\n deal_id: nil,\n category_id: nil,\n what: \"test\",\n locale: nil,\n created_at: 2017-04-19 15:06:20 UTC,\n parameters: nil>\n[7] pry(main)> \n\nIn the case of longitude, latitude, the difference can be 10m - 100m.\nIt seems like extra_float_digits only affects textual output. So does that mean ActiveRecord is not using the postgres binary protocol, and parsing text? That seems really odd.", "number_of_comments": 13, "comment_authors": ["ioquatix", "maclover7", "ioquatix", "maclover7", "ioquatix", "rails-bot", "ioquatix", "sashaegorov", "ioquatix", "ioquatix", "RKushnir", "ioquatix", "ioquatix"]},
{"title": "Default disable_with on submit_tag breaks the app if the user goes back", "link": "https://github.com/rails/rails/issues/26366", "labels": ["\n                actionview\n", "\n                With reproduction steps\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8448193073272705, "creation_date": "2016-09-02T10:13:20Z", "issue_submitter": "robinwhittleton", "body": "Steps to reproduce\n\nAdd an f.submit to your app\nObserve the default data-disable-with attribute\nSubmit the form\nHit the back button\n\nExpected behavior\nThe submit button should be enabled.\nActual behavior\nThe submit button retains its disabled state due to the browser caching the state of the form.\nThis is a good thing in general – we want state to be retained as we want users to be able to edit their previous submission and resubmit. However with a disabled submit button the app is effectively broken from that point on until they know how to force a refresh (standard refresh doesn’t refresh form state) or can pop open web inspector and manually remove the disabled state.\nWhile I can see the utility of this behaviour it’s absolutely user hostile to make it a default. I note that in the PR that added this (#21135) there wasn’t any discussion of the back button issue.\nSystem configuration\nRails 5.0.0.1\nRuby 2.3.0", "number_of_comments": 7, "comment_authors": ["robinwhittleton", "maclover7", "robinwhittleton", "ain", "neilvcarvalho", "robinwhittleton", "deepakmahakale"]},
{"title": "increment! method behavior differ Rails4 and Rails5", "link": "https://github.com/rails/rails/issues/26420", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                With reproduction steps\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8557791709899902, "creation_date": "2016-09-07T09:46:29Z", "issue_submitter": "akicho8", "body": "But different in Rails4 and Rails5, and Is not it a problem?\nWhen Rails5, not created the record, I was a little confused.\nRails4\ngem \"activerecord\", \"< 5\"\nrequire \"active_record\"\nActiveRecord::VERSION::STRING   # => \"4.2.6\"\nRUBY_VERSION                    # => \"2.3.1\"\nActiveSupport::LogSubscriber.colorize_logging = false\nActiveRecord::Migration.verbose = false\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Schema.define do\n  create_table :users do |t|\n    t.integer :x\n  end\nend\nclass User < ActiveRecord::Base\nend\nActiveRecord::Base.logger = ActiveSupport::Logger.new(STDOUT)\nUser.new.increment!(:x)         # => true\n# >>    (0.0ms)  begin transaction\n# >>   SQL (0.1ms)  INSERT INTO \"users\" (\"x\") VALUES (?)  [[\"x\", 1]]\n# >>    (0.0ms)  commit transaction\nRails5\nrequire \"active_record\"\nActiveRecord::VERSION::STRING   # => \"5.0.0.1\"\nRUBY_VERSION                    # => \"2.3.1\"\nActiveSupport::LogSubscriber.colorize_logging = false\nActiveRecord::Migration.verbose = false\nActiveRecord::Base.establish_connection(adapter: \"sqlite3\", database: \":memory:\")\nActiveRecord::Schema.define do\n  create_table :users do |t|\n    t.integer :x\n  end\nend\nclass User < ActiveRecord::Base\nend\nActiveRecord::Base.logger = ActiveSupport::Logger.new(STDOUT)\nUser.new.increment!(:x)         # => #<User id: nil, x: 1>\n# >>   SQL (0.1ms)  UPDATE \"users\" SET \"x\" = COALESCE(\"x\", 0) + 1 WHERE \"users\".\"id\" IS NULL", "number_of_comments": 5, "comment_authors": ["akicho8", "matthewd", "akicho8", "akicho8", "eugeneius"]},
{"title": "Including ActionView::Rendering in API controller without jbuilder breaks render :json", "link": "https://github.com/rails/rails/issues/27211", "labels": ["\n                actionpack\n", "\n                actionview\n", "\n                needs feedback\n", "\n                With reproduction steps\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8222672939300537, "creation_date": "2016-11-29T17:14:26Z", "issue_submitter": "ghost", "body": "Including ActionView::Rendering in a controller of an API-only application breaks render :json, resulting in an ActionView::MissingTemplate error.  This is similar to #25183, except that the error occurs without using jbuilder.\nSteps to reproduce\n\nUse rails new --api to create a Rails app with jbuilder disabled by default.\nInclude ActionView::Rendering in a controller subclassed from ActionController::API, then render :json:\n\nclass TestController < ActionController::API\n  include ActionView::Rendering\n\n  def index\n    render json: {page: \"Home\"}\n  end\nend\n\nFull example failing test\nExpected behavior\nJSON response should be returned without error.  No template should be used.\nActual behavior\nActionView::MissingTemplate is raised.\nSystem configuration\nRails version: 5.0.0.1 (used rails new --api)\nRuby version: 2.3.1", "number_of_comments": 16, "comment_authors": ["ghost", "maclover7", "maclover7", "ghost", "ghost", "st0012", "ghost", "st0012", "xuanyu-h", "ghost", "rhymes", "silva96", "franzliedke", "mikkelwf", "pedrofurtado", "joallard"]},
{"title": "ActionCable Postgres adapter is ActiveRecord-specific", "link": "https://github.com/rails/rails/issues/27214", "labels": ["\n                actioncable\n", "\n                attached PR\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8298213481903076, "creation_date": "2016-11-29T19:03:54Z", "issue_submitter": "bgentry", "body": "Steps to reproduce\n\nCreate a Rails app using Sequel and sequel-rails, without ActiveRecord\nAttempt to use the ActionCable Postgres adapter\nWatch it crash trying to autoload ActiveRecord\n\nExpected behavior\nIdeally, this would support the most popular Postgres ORMs out of the box. Or at least the docs should mention that this only works with AR.\nActual behavior\nException trying to autoload ActiveRecord\nSystem configuration\nRails version: 5.0.0.1\nRuby version: 2.3.3\nIt was very easy to fork the Postgres ActionCable subscription adapter to work with Sequel. I only had to alter the with_connection method, which is even shorter with Sequel: https://gist.github.com/bgentry/5a4592dbbcc398c0ad651c53af7da51f#file-postgresql_sequel-rb-L35-L40\nI'm not sure whether the right approach is to try to support this out-of-the-box, or at least to document that the adapter is AR-specific. Thoughts?\nAs a user I'd certainly prefer not to have to maintain a fork of the subscription adapter. But I can certainly see the argument for this not being Rails' problem. I suppose I really only need to monkey-patch or refine that one method, though, so not too bad either way.", "number_of_comments": 8, "comment_authors": ["bgentry", "rafaelfranca", "bgentry", "rafaelfranca", "maclover7", "maclover7", "KarimElsayad247", "reiz"]},
{"title": "deliver_later raises unnecessarily due to overzealous mutation detection", "link": "https://github.com/rails/rails/issues/26916", "labels": ["\n                actionmailer\n", "\n                needs feedback\n", "\n                With reproduction steps\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.9044625759124756, "creation_date": "2016-10-27T19:59:05Z", "issue_submitter": "derekprior", "body": "Steps to reproduce\nI maintain an Engine that can be used in Rails 3.2 or newer. When ActionJob was introduced, we added the following code to a controller to start delivering mail in the background where possible:\nmail = ::ClearanceMailer.change_password(user)\n\n  if mail.respond_to?(:deliver_later)\n    mail.deliver_later\n  else\n    mail.deliver\n  end\nExpected behavior\nThis code should properly detect if the mail object responds to deliver_later and do the right thing. This was previously the case.\nActual behavior\nThe call to respond_to? mutates the mail object. The subsequent call to deliver_later then triggers an exception due to #24457.\nIt seems like we actually want ActionMailer objects to be immutable, but instead we try to mark mutations and are overzealous with the detection. The error message raised actually points to the uncertainty in the detection: \"you may have made local changes that would be silently lost\" (emphasis added).\nIt seems like a very helpful thing to try to catch, but I wonder if there's a more accurate way to catch it?", "number_of_comments": 5, "comment_authors": ["derekprior", "maclover7", "derekprior", "matthewd", "ghiculescu"]},
{"title": "ActionCable streaming performance", "link": "https://github.com/rails/rails/issues/26999", "labels": ["\n                actioncable\n", "\n                attached PR\n", "\n                needs feedback\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8617715835571289, "creation_date": "2016-11-09T11:55:21Z", "issue_submitter": "palkan", "body": "The current implementation of streaming has a rather poor performance (of course, you've heard about websocket shootout).\nOne of the bottlenecks is the callback hell. Instead of simply broadcasting messages to sockets we create a callback wrapped in a callback wrapped in another callback etc.\nAnd we also decode and encode message again for every socket.\nHere is the benchmark I wrote to measure the performance. The results are following:\n# Very simple transmitter: just broadcast message as is (and adds identifier)\n  SimpleSubscriberMap   239.738  (±21.3%) i/s -      1.120k in   5.003338s\n\n# Simple transmitter with JSON round-trip\nDecodingSubscriberMap   227.131  (±19.4%) i/s -      1.083k in   5.041594s\n\n# Current ActionCable implementation\n        SubscriberMap     9.040  (±11.1%) i/s -     45.000  in   5.028229s\n\n\nWebsocket Shootout benchmark also shows that callback-less version (using this very simple patch) is performing much better (see slides).\nSo, I have a couple of proposals.\nSoft Proposal\n\n\ndo not create useless callbacks when there are no user-specified handlers\n\n\ndo not decode/encode messages for each socket\n\n\nHard Proposal\nSoft Proposal +  ...\n\ndeprecate custom streaming callbacks, 'cause they influence broadcasting performance (and, IMO, they don't make any sense but provide overhead).\n\n/cc @matthewd @maclover7", "number_of_comments": 9, "comment_authors": ["palkan", "matthewd", "maclover7", "dhh", "palkan", "dhh", "NirvashPrime", "palkan", "ProGM"]},
{"title": "ActionDispatch does not understand :jsonapi mime type", "link": "https://github.com/rails/rails/issues/26309", "labels": ["\n                actionpack\n", "\n                attached PR\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.8767595291137695, "creation_date": "2016-08-28T23:25:01Z", "issue_submitter": "Ikariusrb", "body": "Steps to reproduce\nAny app, using rails generate new \"someapp\" --api +\nrails g scaffold \"somemodel\"\nw/ activemodel::serializers\nattempting to back an application sending requests as \"application/vnd.api+json\"- e.g. ember.js w/ JSONAPIAdapter for application adapter.\nExpected behavior\njson format data in request bodies (PUT, PATCH, POST) should be exposed in standard controller \"params\".\nActual behavior\nNone of the request-body data is deserialized into params.\nSystem configuration\nrails 5.0.0.1\nactivepack 5.0.0.1\nactive_model_serializers 10.0.2\nmime-types 3.1\nmime-types-data 3.2016.0521\nRuby version:\nruby 2.3.0p0\nType \"application/vnd.api+json\" was relocated from \":json\" mime type to \":jsonapi\" type. This makes sense, as there's a lot of change from one to the other, but in actionpack/lib/action_dispatch/http/parameters.rb,  because the mime type is no longer a recognized type, the JSON within the request body is no longer exposed into the params hash.\nCurrently, all json-api compliant front-ends are broken as far as rails-api deserialization goes.", "number_of_comments": 10, "comment_authors": ["Ikariusrb", "maclover7", "bf4", "bf4", "Ikariusrb", "bf4", "Ikariusrb", "bf4", "maclover7", "beauby"]},
{"title": "Dynamic :action segment deprecation forces application bloat after suggested workaround", "link": "https://github.com/rails/rails/issues/27231", "labels": ["\n                actionpack\n", "\n                needs feedback\n", "\n                pinned\n", "\n                routing\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.117931842803955, "creation_date": "2016-11-30T18:05:28Z", "issue_submitter": "Fryguy", "body": "Though I understand, and agree with, the rationale behind the removal of the dynamic :action segment in #23980, the suggested workaround to whitelist each individual action is leading to application memory bloat.\nWith a simple rails runner:\n\n\n\n\nMemory\nTime\nrails routes entries\n\n\n\n\nBefore\n166_028_629 MB\n6.142s\n656\n\n\nAfter\n187_430_229 MB\n6.838s\n3798\n\n\nChange\n~21 MB (+12.9%)\n0.7s (+11.3%)\n3142 (+479.0%)\n\n\n\nIf you want to see the workaround source, you can see it at ManageIQ/manageiq@0f6fee9  (In all fairness, the diff is backwards to the numbers above...we originally had one-route-per-whitelist-entry and are trying to move towards the dynamic :action with a Regexp whitelist in order to decrease our process memory.  It wasn't until I wrote the change to use the dynamic :action that I ran into this deprecation.)\n\nMemory analysis\nUsing the allocation tracer from this gist (Thanks @jrafanie!), you can see that the majority of our boot time retained allocations are in action_dispatch/routing and action_dispatch/journey with a bonus ~53k strings from somewhere else (NOTE: These are the top 10 entries, but note that there are many more journey and routing lines after these)\nBefore (dynamic :action)\nm:   4,001,968 | c:  34,507 | String\t/Users/jfrey/.gem/ruby/2.3.3/gems/actionpack-5.0.0.1/lib/action_dispatch/routing/mapper.rb\nm:   2,795,971 | c:  40,516 | String\t/Users/jfrey/.gem/ruby/2.3.3/gems/activesupport-5.0.0.1/lib/active_support/dependencies.rb\nm:   1,590,197 | c:  19,996 | String\nm:   1,050,224 | c:       1 | Thread\nm:   1,031,028 | c:  13,000 | String\t/Users/jfrey/.gem/ruby/2.3.3/gems/mime-types-2.6.2/lib/mime/type.rb\nm:     878,323 | c:   9,916 | String\t/Users/jfrey/.gem/ruby/2.3.3/gems/actionpack-5.0.0.1/lib/action_dispatch/journey/scanner.rb\nm:     795,753 | c:   1,373 | Regexp\t/Users/jfrey/.gem/ruby/2.3.3/gems/activesupport-5.0.0.1/lib/active_support/dependencies.rb\nm:     783,666 | c:   8,546 | String\t/Users/jfrey/.gem/ruby/2.3.3/gems/activesupport-5.0.0.1/lib/active_support/file_update_checker.rb\nm:     724,594 | c:   6,196 | String\t/Users/jfrey/.rubies/ruby-2.3.3/lib/ruby/2.3.0/racc/parser.rb\nm:     716,112 | c:   3,642 | Hash\t/Users/jfrey/.gem/ruby/2.3.3/gems/actionpack-5.0.0.1/lib/action_dispatch/routing/mapper.rb\n\nAfter (one-route-per-whitelist-entry)\nm:   5,488,795 | c:  53,801 | String\nm:   2,945,515 | c:  28,409 | String\t/Users/jfrey/.gem/ruby/2.3.3/gems/actionpack-5.0.0.1/lib/action_dispatch/routing/mapper.rb\nm:   2,128,864 | c:  12,364 | Hash\t/Users/jfrey/.gem/ruby/2.3.3/gems/actionpack-5.0.0.1/lib/action_dispatch/routing/mapper.rb\nm:   2,116,517 | c:  34,803 | String\t/Users/jfrey/.gem/ruby/2.3.3/gems/activesupport-5.0.0.1/lib/active_support/dependencies.rb\nm:   1,633,744 | c:  36,181 | Array\t/Users/jfrey/.gem/ruby/2.3.3/gems/actionpack-5.0.0.1/lib/action_dispatch/journey/visitors.rb\nm:   1,312,363 | c:  24,171 | String\t/Users/jfrey/.gem/ruby/2.3.3/gems/actionpack-5.0.0.1/lib/action_dispatch/journey/scanner.rb\nm:   1,144,800 | c:   4,610 | Hash\nm:   1,104,080 | c:  27,602 | ActionDispatch::Journey::Nodes::Cat\t/Users/jfrey/.gem/ruby/2.3.3/gems/actionpack-5.0.0.1/lib/action_dispatch/journey/parser.rb\nm:   1,050,224 | c:       1 | Thread\nm:   1,031,028 | c:  13,000 | String\t/Users/jfrey/.gem/ruby/2.3.3/gems/mime-types-2.6.2/lib/mime/type.rb\n\n\nI think there are three ways forward with this, so I was hoping to discuss that here.\n\nInstead of deprecating the :action segment entirely, only deprecate it if there isn't a qualifier (in our case, we have a Regex whitelist).  If a Regex isn't acceptable, perhaps create a specific \"whitelist\" constraint on the :action segment, and don't allow dynamic :actions without the whitelist constraint.\nFigure out how we can reduce the memory overhead of the routing.  Additionally, we pay the penalty of setting up the routes even when we don't need them in console or runner, so perhaps we can dynamically resolve them when needed?\nJust accept that my process will be ~10% heavier (please don't pick this one 😄 )\n\ncc @pixeltrix @tenderlove @matthewd", "number_of_comments": 23, "comment_authors": ["Fryguy", "pixeltrix", "matthewd", "pixeltrix", "Fryguy", "stale", "Fryguy", "TheR2", "Fjan", "pixeltrix", "Fjan", "matthewd", "Fjan", "rails-bot", "lunaru", "pixeltrix", "Fjan", "pixeltrix", "Fjan", "lunaru", "timscott", "TylerRick", "fxgallego"]},
{"title": "Cable: Should error on double-subscribe", "link": "https://github.com/rails/rails/issues/24875", "labels": ["\n                actioncable\n", "\n                attached PR\n", "\n                needs work\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.1651246547698975, "creation_date": "2016-05-06T01:41:55Z", "issue_submitter": "jeremy", "body": "When a client subscribes to a channel that it's already subscribed to, the server no-ops. Subscribe hooks and callbacks don't run.\nWhen is this ever normal? The only case is if the client thinks it unsubscribed from a channel but the server didn't get the memo.\nIn these cases, we'd be better off treating a duplicate subscribe as an unsubscribe + subscribe from the server's perspective.\nPragmatically, we should gauge whether this is actually desirable behavior. It may be better for the server to error on a duplicate subscription attempt and delegate the decisionmaking about how to proceed back to the client.", "number_of_comments": 6, "comment_authors": ["jeremy", "maclover7", "maclover7", "kaspth", "jeremy", "kaspth"]},
{"title": "Reordering issue in find_in_batches and find_each", "link": "https://github.com/rails/rails/issues/26006", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.154223918914795, "creation_date": "2016-07-31T12:14:58Z", "issue_submitter": "vinay-mittal", "body": "Steps to reproduce\nUser.order(:updated_at).find_in_batches(start: 2000, finish: 5000, batch_size: 500) { |batch| do_something }\nExpected behavior\nThe records must have been ordered by column 'updated_at'.\nExpected Queries:\nSELECT  `users`.* FROM `users` ORDER BY `users`.`updated_at` ASC LIMIT 500 OFFSET 2000\nSELECT  `users`.* FROM `users` ORDER BY `users`.`updated_at` ASC LIMIT 500 OFFSET 2500\nSELECT  `users`.* FROM `users` ORDER BY `users`.`updated_at` ASC LIMIT 500 OFFSET 3000\nSELECT  `users`.* FROM `users` ORDER BY `users`.`updated_at` ASC LIMIT 500 OFFSET 3500\nSELECT  `users`.* FROM `users` ORDER BY `users`.`updated_at` ASC LIMIT 500 OFFSET 4000\nSELECT  `users`.* FROM `users` ORDER BY `users`.`updated_at` ASC LIMIT 500 OFFSET 4500\nActual behavior\nThe records are always order by the primary key(id by default) no matter how user wants them to be ordered.\nQueries:\nSELECT  `users`.* FROM `users` WHERE (`users`.`id` >= 2000) AND (`users`.`id` <= 5000) ORDER BY `users`.`id` ASC LIMIT 500\nSELECT  `users`.* FROM `users` WHERE (`users`.`id` >= 2000) AND (`users`.`id` <= 5000) AND (`users`.`id` > 2499) ORDER BY `users`.`id` ASC LIMIT 500\nSELECT  `users`.* FROM `users` WHERE (`users`.`id` >= 2000) AND (`users`.`id` <= 5000) AND (`users`.`id` > 2999) ORDER BY `users`.`id` ASC LIMIT 500\nSELECT  `users`.* FROM `users` WHERE (`users`.`id` >= 2000) AND (`users`.`id` <= 5000) AND (`users`.`id` > 3499) ORDER BY `users`.`id` ASC LIMIT 500\nSELECT  `users`.* FROM `users` WHERE (`users`.`id` >= 2000) AND (`users`.`id` <= 5000) AND (`users`.`id` > 3999) ORDER BY `users`.`id` ASC LIMIT 500\nSELECT  `users`.* FROM `users` WHERE (`users`.`id` >= 2000) AND (`users`.`id` <= 5000) AND (`users`.`id` > 4499) ORDER BY `users`.`id` ASC LIMIT 500\nSELECT  `users`.* FROM `users` WHERE (`users`.`id` >= 2000) AND (`users`.`id` <= 5000) AND (`users`.`id` > 4999) ORDER BY `users`.`id` ASC LIMIT 500\nRails Version: Rails 5.1.0.alpha\nRuby Version: 2.2.3\nI've customized the method in_batches which is called from both find_in_batches and find_each for now to solve my problem.\nAlso I've attached a PR having the permanent fix for this issue. Please review it and let me know if any change is required.", "number_of_comments": 4, "comment_authors": ["vinay-mittal", "Loriowar", "zhisme", "fwolfst"]},
{"title": "code in test_case messes up encoding of hashes in routes if that hash is set as a defaults option on the route.", "link": "https://github.com/rails/rails/issues/24778", "labels": ["\n                actionpack\n", "\n                With reproduction steps\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2539212703704834, "creation_date": "2016-04-28T20:12:56Z", "issue_submitter": "urkle", "body": "Steps to reproduce\nin routes.rb\n  get '/reports/daily' => 'reports#custom', as: :daily_reports, defaults: {group_by: 'date', template_report: true, filters: { archived: true, show_notes: true }\nin controller spec\n        it 'should return filter[:organizations] as array' do\n          get  :custom, {date: \"2013-05-01\", date_end: \"2013-05-03\",\n                               filters: {\n                                   show_notes: true,\n                                   organizations: [@organization.id],\n                                   projects: [@project_1.id],\n                                   users: [@user.id]\n                               } }\n          expect(assigns(:filters)[:organizations]).to be_an Array\n        end\nExpected behavior\nThe test to pass\nActual behavior\nThe code blows up in our controller code when params[:filters][anything] is accessed..\nReason?  the params[:filters] is set to a string of \"show_notes=1&organization[0]=1&projects[0]=1&users[0]=1\"\nWhy? Because of code in action_controller/test_case.rb runs the parameter through to_param if it seems to be a core param of the route. (which the \"defaults\" are being treated as such)\nhttps://github.com/rails/rails/blob/4-2-stable/actionpack/lib/action_controller/test_case.rb#L227\nAdditional notes\nThis did not occur with Rails 3.2.x but was introduced sometime during the 4.x development cycle.\nthe controller code works perfectly fine.. it is only the tests that blow up incorrectly.   So what we had to do to workaround this issue was remove the \"filters\" default from our routes and add extra logic in our controller to setup defaults based on routes. (which was not ideal)\nSystem configuration\nRails version:\n4.2.5.1\nRuby version:\n2.1.5", "number_of_comments": 4, "comment_authors": ["urkle", "maclover7", "maclover7", "urkle"]},
{"title": "When default_url_options is called within I18n.with_locale, locale is leaked to further url helpers", "link": "https://github.com/rails/rails/issues/26040", "labels": ["\n                actionpack\n", "\n                routing\n", "\n                With reproduction steps\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.0108792781829834, "creation_date": "2016-08-03T13:16:04Z", "issue_submitter": "ybart", "body": "Steps to reproduce\nWhen default_url_options is implemented like in the documentation sample (http://edgeguides.rubyonrails.org/action_controller_overview.html#default-url-options). One might experience a hard to debug problem.\nWhen calling a url helper while in a I18n.with_locale block, the default_url_options, is called at most once according to the documentation. This causes default_url_options being set with the locale from the block to be leaked outside the block, and any further called url helpers will have an unexpected default.\nSuch a problem could become unnoticed because an url helper could be called before this block, and only appear when url helpers called before I18n.with_locale are removed.\nTest case gist:\nhttps://gist.github.com/ybart/dc901bd1f9b0cb1e948d641f295542ce\nExpected behavior\nlocale in default_url_options should match current locale, or an exception should be thrown indicating this is not supported.\nActual behavior\nlocale in default_url_options is the first called locale.\nSystem configuration\nRails version: 5.0.0\nRuby version: 2.3.1", "number_of_comments": 5, "comment_authors": ["ybart", "pixeltrix", "ybart", "henrik", "henrik"]},
{"title": "Setting self.response_body = nil no longer prevents DoubleRenderError", "link": "https://github.com/rails/rails/issues/25106", "labels": ["\n                actionpack\n", "\n                regression\n", "\n                With reproduction steps\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.200059175491333, "creation_date": "2016-05-22T01:17:53Z", "issue_submitter": "kdough", "body": "Steps to reproduce\nI am attempting to prevent a AbstractController::DoubleRenderError in a controller by setting self.response_body = nil before a second call to render.  The reason that multiple renders occur is that I have after_action callbacks that call render after the action itself has already rendered its response.\nIt is my understanding that self.response_body = nil should drop the previously-rendered body to allow a subsequent render call to succeed without causing a DoubleRenderError.\nThis works in Rails 4.2.6 but it no longer appears prevent double rendering exceptions in Rails 5+ (including current master).\nThis simplified example shows a scenario that properly renders 'something else' in Rails 4.2.6 but fails in 5.0.0.rc1 (and master):\n# Rails 4.2.6\ndef should_prevent_double_render\n  render json: { foo: 'something' }\n  self.response_body = nil\n  performed? # => false\n  render json: { foo: 'something else' }\nend\n\n# Rails 5.0.0.rc1\ndef should_prevent_double_render\n  render json: { foo: 'something' }\n  self.response_body = nil\n  performed? # => [\"{\\\"foo\\\":\\\"something\\\"}\"]\n  render json: { foo: 'something else' }\n  # ... AbstractController::DoubleRenderError is raised\nend\nComplete gist with tests replicating this issue is available here: https://gist.github.com/kdough/c797c25088331ffc275bb2aa6159bde9\nExpected behavior\nSetting self.response_body = nil before a subsequent call to render should drop a previously-rendered response body.\nActual behavior\nAs of Rails 5+, a AbstractController::DoubleRenderError exception is raised when a second call to render is made.  The previously-rendered content remains in the result of performed?\nIn Rails 4.2.6, the second call to render succeeds as expected.\nSystem configuration\n\nWorking Setup:\n\nRails version:  4.2.6\nRuby version:  2.3.1p112\n\n\nBroken Setup:\n\nRails version:  5.0.0.rc1\nRuby version:  2.3.1p112", "number_of_comments": 16, "comment_authors": ["kdough", "sevaorlov", "matthewd", "maclover7", "kdough", "rafaelfranca", "rthbound", "kdough", "matthewd", "rthbound", "toupeira", "tomrossi7", "saiqulhaq", "MacksMind", "MacksMind", "intrip"]},
{"title": "Cable: Robust unsubscribe", "link": "https://github.com/rails/rails/issues/24874", "labels": ["\n                actioncable\n", "\n                attached PR\n", "\n                needs work\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2530438899993896, "creation_date": "2016-05-06T01:38:30Z", "issue_submitter": "jeremy", "body": "If an error occur for some reason while removing a subscription, the exception is swallowed and the connection may left in an inconsistent state, e.g. still be subscribed to the channel but no longer streaming.\nActionCable::Connection::Subscriptions#remove_subscription must give a much stronger guarantee that unsubscribing absolutely closes the channel and removes the subscription if errors occur.\nUnsubscribing from a channel doesn't give any acknowledgement that it succeeded, either, so a client may think it's disconnected when the server doesn't. If the client resubscribes, the server already has a live channel (possibly in an inconsistent state), so it does nothing.", "number_of_comments": 9, "comment_authors": ["jeremy", "maclover7", "kaspth", "kaspth", "jeremy", "kaspth", "wpp", "wpp", "NirvashPrime"]},
{"title": "ActionCable: consider deferring transmits until after confirm_subscription", "link": "https://github.com/rails/rails/issues/25333", "labels": ["\n                actioncable\n", "\n                needs feedback\n", "\n                With reproduction steps\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.1613225936889648, "creation_date": "2016-06-09T04:23:23Z", "issue_submitter": "machty", "body": "Steps to reproduce\nCreate an ActionCable channel that transmits data within subscribed, which seems like a reasonable place to send an initial payload upon subscription (e.g. if you're subscribing to a TweetsChannel, this could send the most recent 15 tweets).\nclass MyChannel < ApplicationCable::Channel\n  def subscribed\n    transmit({ foo: 123 })\n  end\nend\n\nExpected behavior\nThe confirm_subscription websocket event should arrive before the transmitted payload.\nActual behavior\nThe payload is sent before the confirm_subscription message is sent. Given that the above pattern feels very natural and correct, it seems like Rails should internally defer transmits until the confirm_subscription is sent since the present behavior is confusing and it complicates the logic on the client side of things (FYI I'm integrating with a JS app).\nSystem configuration\nRails version: 5.0.0.rc1\nRuby version: 2.3.0", "number_of_comments": 14, "comment_authors": ["machty", "maclover7", "machty", "andreychernih", "wpp", "pacop", "csenszike", "arkty", "molfar", "joequincy", "summera", "sdrioux", "denys-medynskyi", "vertfin"]},
{"title": "has_many :through **validate=>false** not being obeyed during association update", "link": "https://github.com/rails/rails/issues/25718", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.156360387802124, "creation_date": "2016-07-06T14:53:47Z", "issue_submitter": "marcalc", "body": "Steps to reproduce\nBug report script attached\nExpected behavior\nAs per docs, when setting the option has_many :validate => false, the associated objects will not be validated when saving the object.\n4.1.2.11 :validate\nIf you set the :validate option to true, then associated objects will be validated whenever you save this object. By default, this is false: associated objects will not be validated when this object is saved.\nActual behavior\nWhen updating the association, using #role_ids=, the associated object is being validated.\nSystem configuration\nRails version: 5.0.0\nRuby version: 2.3.1\nhttps://gist.github.com/marcalc/a370674c040bd2122da729b904557c08#file-bug-report-rb\n\nbegin\n  require 'bundler/inline'\nrescue LoadError => e\n  $stderr.puts 'Bundler version 1.10 or later is required. Please update your Bundler'\n  raise e\nend\n\ngemfile(true) do\n  source 'https://rubygems.org'\n  # Activate the gem you are reporting the issue against.\n  gem 'activerecord', '5.0.0'\n  gem 'sqlite3'\nend\n\nrequire 'active_record'\nrequire 'minitest/autorun'\nrequire 'logger'\n\n# Ensure backward compatibility with Minitest 4\nMinitest::Test = MiniTest::Unit::TestCase unless defined?(Minitest::Test)\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table \"roles\", force: :cascade do |t|\n    t.string   \"name\"\n    t.datetime \"created_at\", null: false\n    t.datetime \"updated_at\", null: false\n  end\n\n  create_table \"user_roles\", force: :cascade do |t|\n    t.integer  \"user_id\"\n    t.integer  \"role_id\"\n    t.datetime \"created_at\", null: false\n    t.datetime \"updated_at\", null: false\n    t.index [\"role_id\"], name: \"index_user_roles_on_role_id\"\n    t.index [\"user_id\"], name: \"index_user_roles_on_user_id\"\n  end\n\n  create_table \"users\", force: :cascade do |t|\n    t.string   \"name\"\n    t.datetime \"created_at\", null: false\n    t.datetime \"updated_at\", null: false\n  end\nend\n\nclass Role < ActiveRecord::Base\n  validates_presence_of :name\nend\n\nclass User < ActiveRecord::Base\n  has_many :user_roles\n  has_many :roles, through: :user_roles, validate: false\nend\n\nclass UserRole < ActiveRecord::Base\n  belongs_to :user\n  belongs_to :role\nend\n\nclass BugTest < Minitest::Test\n  def test_association_stuff\n    Role.new(name: nil).save(validate: false) # deliberately creating an invalid nameless role\n\n    u = User.create!(role_ids: [\"1\"]) # OK\n    u.update!(role_ids: nil) # OK\n    u.update!(role_ids: [\"1\"]) # FAILS\n  end\nend", "number_of_comments": 17, "comment_authors": ["marcalc", "mrgilman", "marcalc", "marcalc", "marcalc", "jeppeliisberg", "frenkel", "leesmith", "Extrapolator214", "rubiii", "rocketblr", "tfwright", "skcc321", "arkhamRejek", "magicbusworld", "commuun", "eikes"]},
{"title": "Eager compute template digests in production", "link": "https://github.com/rails/rails/issues/23901", "labels": ["\n                actionview\n", "\n                pinned\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.6345880031585693, "creation_date": "2016-02-26T09:30:38Z", "issue_submitter": "dhh", "body": "Computing digests for templates at run-time risks burdening individual requests with that work, which may well take tens of milliseconds. We should have an option, and it should probably be default, to preload all template digests at server boot.", "number_of_comments": 19, "comment_authors": ["dhh", "dhh", "saiqulhaq", "dhh", "saiqulhaq", "kaspth", "st0012", "kaspth", "st0012", "matthewd", "st0012", "matthewd", "st0012", "matthewd", "st0012", "matthewd", "st0012", "st0012", "kaspth"]},
{"title": "ActionView 'form cannot contain nil' after rails 5 scaffold generation", "link": "https://github.com/rails/rails/issues/24573", "labels": ["\n                actionview\n", "\n                attached PR\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.565056562423706, "creation_date": "2016-04-16T03:01:36Z", "issue_submitter": "kallisti5", "body": "Steps to reproduce\nrails g scaffold user email:uniq password:digest\nrails g scaffold image --api name:string version:string cost:float public:bool memory:integer\nrails g scaffold container --api name:string image_id:integer user_id:integer memory:integer\nExpected behavior\nNot error on image#new\nActual behavior\n_form.html.erb where line #1 raised:\n\nFirst argument in form cannot contain nil or be empty\nExtracted source (around line #1):\n\n<%= form_for(container) do |f| %>\n  <% if container.errors.any? %>\n    <div id=\"error_explanation\">\n      <h2><%= pluralize(container.errors.count, \"error\") %> prohibited this container from being saved:</h2>\n\n      <ul>\n\nTrace of template inclusion: app/views/containers/new.html.erb\n\nSystem configuration\nRails version: Rails 5.0.0.beta3\nRuby version: 2.3.0p0", "number_of_comments": 15, "comment_authors": ["kallisti5", "kallisti5", "Edouard-chin", "maclover7", "prathamesh-sonpatki", "prathamesh-sonpatki", "sgrif", "prathamesh-sonpatki", "jmbejar", "rafaelfranca", "fxn", "kallisti5", "jeremy", "sgrif", "jeremy"]},
{"title": "What's the way forward for streaming and exceptions?", "link": "https://github.com/rails/rails/issues/23856", "labels": ["\n                actionpack\n", "\n                needs feedback\n", "\n                pinned\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.6395699977874756, "creation_date": "2016-02-24T16:38:32Z", "issue_submitter": "nateberkopec", "body": "Most exception notification gems, such as Sentry's sentry-raven or Honeybadger, hook into the ShowExceptions middlewares. Here's where Honeybadger does it, for example.\nSetting stream: true to stream requests with ActionController::Streaming however means that these middlewares get bypassed when exceptions occur. Here's what happens when an exception happens in a streaming template - we just log it and redirect to 500.html\nThe comments mention this Exceptron thing, which was never merged. So what's the way forward here? Obviously re-using ShowExceptions makes no sense, but is there anything better we can do?\nHappy to work on this with a PR once a decision is made.\nCurious to hear if other exception notifiers have ever noticed this problem and what they've done about it.", "number_of_comments": 10, "comment_authors": ["nateberkopec", "maclover7", "nateberkopec", "nateberkopec", "maclover7", "rails-bot", "stale", "nateberkopec", "rails-bot", "nateberkopec"]},
{"title": "index_errors does not consider indexes of correct existing sub records", "link": "https://github.com/rails/rails/issues/24390", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.5775537490844727, "creation_date": "2016-04-01T10:29:10Z", "issue_submitter": "justedd", "body": "Steps to reproduce\nUpdating existing record with accept_nested_attributes_for with existing sub-records. (Order - Entries), with index_errors: true.\nSo, i have existing Order, with 2 existing entries, and try to update it with nested attributes\nExpected behavior\nSame indexes all times\nActual behavior\nIf im not changing entry_1, and change entry_2(with incorrect attributes) i got this response:\nentries[0].title: ['some errors']\n\nIf im changing entry_1(correct attributes) and change entry_2(incorrect attributes) i got response\nentries[1].title: ['some errors']\n\nSystem configuration\nRails 5.0.0.beta3\nruby 2.2.3", "number_of_comments": 24, "comment_authors": ["justedd", "maclover7", "justedd", "maclover7", "xw19", "zhufenggood", "utilum", "vipulnsward", "tijwelch", "mrageh", "AkshayGoyal022", "tijwelch", "AkshayGoyal022", "pacop", "AkshayGoyal022", "heaven", "aenain", "antoinematyja", "cnhuye", "javinto", "askrynnikov", "rikardwissing", "defaye", "lulalala"]},
{"title": "has_many through validation error when foreign_key is specified", "link": "https://github.com/rails/rails/issues/24527", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                With reproduction steps\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.5685813426971436, "creation_date": "2016-04-12T19:32:50Z", "issue_submitter": "dkniffin", "body": "Steps to reproduce\nGist\nWhen I create some models with a has_many :through association, with a foreign_key, and I add validation on the join table, I get a validation failure. It appears to me that the issue is AR is trying to save the join model (ProductCategory) before the parent model (Product).\nclass Product < ActiveRecord::Base\n  has_many :product_categories, foreign_key: :product_id\n  has_many :categories, through: :product_categories\nend\n\nclass Category < ActiveRecord::Base\n  has_many :product_categories, dependent: :destroy\n  has_many :products, through: :product_categories\nend\n\nclass ProductCategory < ActiveRecord::Base\n  belongs_to :product, foreign_key: 'product_id', inverse_of: :product_categories\n  belongs_to :category, inverse_of: :product_categories\n\n  validates :product, :category, presence: true\nend\nIf it helps, I've also uploaded a bare-bones rails project that also reproduces the issue: https://github.com/dkniffin/rails_bug_has_many_through_with_foreign_key\nExpected behavior\nThe model should save succesfully.\nActual behavior\nIt errors with \"Product categories is invalid\"\nSystem configuration\nRails version:  Rails 4.2.6\nRuby version: ruby 2.2.3p173 (2015-08-18 revision 51636) [x86_64-darwin14]", "number_of_comments": 9, "comment_authors": ["dkniffin", "vipulnsward", "crslade", "elfassy", "vipulnsward", "sevaorlov", "sevaorlov", "sevaorlov", "titan2gman"]},
{"title": "ActiveRecord::Associations::CollectionProxy#clear doesn't call remove callback with has many through", "link": "https://github.com/rails/rails/issues/23977", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.6275908946990967, "creation_date": "2016-03-01T03:23:37Z", "issue_submitter": "authorNari", "body": "Steps to reproduce\nThis test case is failed. Is it intended?\ndiff --git a/activerecord/test/cases/associations/has_many_through_associations_test.rb b/activerecord/test/cases/associations/has_many_through_associations_test.rb\nindex bb8c9fa..a4ad266 100644\n--- a/activerecord/test/cases/associations/has_many_through_associations_test.rb\n+++ b/activerecord/test/cases/associations/has_many_through_associations_test.rb\n@@ -724,6 +724,27 @@ class HasManyThroughAssociationsTest < ActiveRecord::TestCase\n     ], log.last(4)\n   end\n\n+  def test_association_callback_clear\n+    Post.reset_log\n+    log = Post.log\n+    post = posts(:thinking)\n+    post.people.push(people(:david))\n+    post.people_with_callbacks = []\n+    assert_equal [\n+      [:removed, :before, \"David\"],\n+      [:removed, :after, \"David\"],\n+    ], log.last(2)\n+\n+    Post.reset_log\n+    log = Post.log\n+    post.people.push(people(:david))\n+    post.people_with_callbacks.clear\n+    assert_equal [\n+      [:removed, :before, \"David\"],\n+      [:removed, :after, \"David\"],\n+    ], log.last(2)\n+  end\n+\n   def test_dynamic_find_should_respect_association_include\n     # SQL error in sort clause if :include is not included\n     # due to Unknown column 'comments.id'\n% bundle exec ruby -I./activerecord/test activerecord/test/cases/associations/has_many_through_associations_test.rb -n /test_association_callback_clear/\nUsing sqlite3\nRun options: -n /test_association_callback_clear/ --seed 18595\n\n# Running:\n\nF\n\nFinished in 0.230421s, 4.3399 runs/s, 8.6797 assertions/s.\n\n  1) Failure:\nHasManyThroughAssociationsTest#test_association_callback_clear [activerecord/test/cases/associations/has_many_through_associations_test.rb:742]:\n--- expected\n+++ actual\n@@ -1 +1 @@\n-[[:removed, :before, \"David\"], [:removed, :after, \"David\"]]\n+[]\n\n\n1 runs, 2 assertions, 1 failures, 0 errors, 0 skips\n\nExpected behavior\nI think after_removed should be fired.\nActual behavior\nbefore_removed and after_removed don't call.\nSystem configuration\nRails version:\nrails 5.0.0.beta3\nRuby version:\n% ruby -v\nruby 2.2.3p173 (2015-08-18 revision 51636) [x86_64-linux]", "number_of_comments": 7, "comment_authors": ["authorNari", "sevaorlov", "rails-bot", "rails-bot", "RFLaum", "benkimball", "afdev82"]},
{"title": "ActiveRecord::Base.table_name_prefix / suffix schema dumper allows for conflicts with unprefixed tables", "link": "https://github.com/rails/rails/issues/24528", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.5620481967926025, "creation_date": "2016-04-12T20:59:47Z", "issue_submitter": "Empact", "body": "Steps to reproduce\nWhen ActiveRecord::Base.table_name_prefix/suffix are used the schema dumper intentionally avoids printing the prefix and suffix in the schema dump. This means that if the database also includes tables of the same name sans prefix/suffix, there will be a conflict between them when attempting to set up the test database, etc.\nExpected behavior\nGiven a table \"accounts\" and a table \"my_app_accounts\", with a table_name_prefix of \"my_app_\", I expect the schema dumper to either:\n\nOutput the tables with non-conflicting naming, e.g. their actual table names, or with adjusted names + some option signifying the table is prefixed/suffixed and therefore enabling the full table name to be generated.\nNot output the non-prefixed/suffixed table. This would be consistent with a general view of ActiveRecord prefixing that assumes only the prefixed/suffixed tables are relevant to ActiveRecord.\n\nI tend to think that 2) is not a good assumption (as it's possible for other tables to be relied on indirectly, e.g. through explicit statements) so I propose some version of 1) be adopted.\nActual behavior\nGiven a table \"accounts\" and a table \"my_app_accounts\", with a table_name_prefix of \"my_app_\", the schema dumper will output two tables named \"accounts\".\nSystem configuration\nRails version: 5.0.0.beta3\nRuby version: 2.3.0p0 (2015-12-25 revision 53290) [x86_64-darwin15]", "number_of_comments": 5, "comment_authors": ["Empact", "maclover7", "tomash", "vipulnsward", "tomash"]},
{"title": "Polymorphic has_one has_many issue", "link": "https://github.com/rails/rails/issues/23266", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3435695171356201, "creation_date": "2016-01-26T16:11:28Z", "issue_submitter": "benliscio", "body": "Hi,\nPlease see the following gist for details: https://gist.github.com/benliscio/9ad3fb597b04b2cb9f05\nI'm not sure if the bug is:\n\ncomment.subject_id should update\ncomment.subject_type is not updating.\n\nThanks!", "number_of_comments": 4, "comment_authors": ["benliscio", "maclover7", "piotrj", "hahmed"]},
{"title": "#as_json omits output from relations following the usage of a config hash", "link": "https://github.com/rails/rails/issues/22563", "labels": ["\n                activemodel\n", "\n                attached PR\n", "\n                With reproduction steps\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3662750720977783, "creation_date": "2015-12-12T02:17:36Z", "issue_submitter": "kenaniah", "body": "https://github.com/rails/rails/blob/4-2-stable/activemodel/lib/active_model/serializers/json.rb#L88 eventually calls https://github.com/rails/rails/blob/4-2-stable/activemodel/lib/active_model/serialization.rb#L124, which exhibits an edge case when hashes are used to describe includes.\nExample 1:\nMyModel.first.as_json(include: [\n    :tags,\n    user: {\n        only: [:first_name, :last_name]\n    }, # BUG: rails doesn't return anything after the first hash config\n    card: {\n        only: [:name, :rp_name]\n    }\n])\nIn the above case, only data for :tags and :user associations are returned.\nExample 2:\nMyModel.first.as_json(include: [\n    :tags,\n    :user,\n    card: {\n        only: [:name, :rp_name]\n    }\n])\nIn this example, data for all three associations is returned (since the first hash config appears at the end.\nExample 3:\nMyModel.first.as_json(include: [\n    tags: {}, # BUG: rails doesn't return anything after the first hash config\n    user: {},\n    card: {\n        only: [:name, :rp_name]\n    }\n])\nIn this example, only data for the :tags association is returned.\nExample 4:\nMyModel.first.as_json(include: [\n    :tags,\n    :user,\n    :card\n])\nWorks as expected.\n\nIn all cases, behavior does not appear to change depending on whether or not #includes was called before #as_json was attempted.", "number_of_comments": 3, "comment_authors": ["kenaniah", "pehrlich", "rafal-brize"]},
{"title": "Cannot validate associated model on custom context", "link": "https://github.com/rails/rails/issues/23261", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.372586727142334, "creation_date": "2016-01-26T11:24:37Z", "issue_submitter": "RagunovichVlad", "body": "When we try to validate associated model with validates_associated on custom context, we get true on the first call of method valid?(:my_context) and get false on the second call method valid?(:my_context).\nIf we place accepts_nested_attributes_for before validation validation works wrong, but if we place  accepts_nested_attributes_for after validation validation works good.\nbegin\n  require 'bundler/inline'\nrescue LoadError => e\n  $stderr.puts 'Bundler version 1.10 or later is required. Please update your Bundler'\n  raise e\nend\n\ngemfile(true) do\n  source 'https://rubygems.org'\n  gem 'activerecord', '4.2.5'\n  gem 'sqlite3'\nend\n\nrequire 'active_record'\nrequire 'minitest/autorun'\nrequire 'logger'\n\nMinitest::Test = MiniTest::Unit::TestCase unless defined?(Minitest::Test)\n\nActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :users, force: true do |t|\n  end\n\n  create_table :profiles, force: true do |t|\n    t.integer :user_id\n    t.string :info\n  end\nend\n\nclass User < ActiveRecord::Base\n  has_one :profile\n\n  accepts_nested_attributes_for :profile, allow_destroy: true\n\n  validates_presence_of :profile, on: :my_context\n  validates_associated :profile, on: :my_context\nend\n\nclass Profile < ActiveRecord::Base\n  belongs_to :user\n  validates :info, presence: true, on: :my_context\nend\n\nclass BugTest < Minitest::Test\n  def test_context_validation_stuff\n    user = User.create\n    user.create_profile(info: nil)\n\n    user = User.last\n\n    assert !user.valid?(:my_context) #=> false\n    assert !user.valid?(:my_context) #=> true\n  end\nend", "number_of_comments": 5, "comment_authors": ["RagunovichVlad", "vipulnsward", "RagunovichVlad", "vipulnsward", "rafal-brize"]},
{"title": "Cache digest  bug?", "link": "https://github.com/rails/rails/issues/21951", "labels": ["\n                actionview\n", "\n                attached PR\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.399303674697876, "creation_date": "2015-10-13T12:59:37Z", "issue_submitter": "blackspace", "body": "In my welcome/index.html.erb file, there are some lines:\n<script type=\"text/javascript\">\n/*\n$(document).ready(function(){\n$(\"a.factory\").on(\"ajax:success\",function(event,data){\nhtml=$(\"#template\").render(data.auto_kinds);\n$($(this).parent()).children(\".auto_kind_list\").html(html);\n});\n});\n*/\n</script>\nWhen I execute the below command:\n$ rake cache_digests:nested_dependencies TEMPLATE=welcome/index\n[\n\"auto_kinds/auto_kind\"\n]\nIf I remove the script code, I execute the command:\n$ rake cache_digests:nested_dependencies TEMPLATE=welcome/index\n[\n]", "number_of_comments": 4, "comment_authors": ["blackspace", "atul-shimpi", "blackspace", "romaimperator"]},
{"title": "In date_select tags, :include_blank should not override :default", "link": "https://github.com/rails/rails/issues/23091", "labels": ["\n                actionview\n", "\n                attached PR\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4096238613128662, "creation_date": "2016-01-17T20:04:37Z", "issue_submitter": "jkopczyn", "body": "This is a long-standing issue, complained about in several other places, but for some reason never on rails directly. See here and here.\nIt makes sense for include_blank and prompt to include an implicit default, but if default is set explicitly, :include_blank or :prompt should not override it.", "number_of_comments": 3, "comment_authors": ["jkopczyn", "jguthrie100", "jkopczyn"]},
{"title": "Prevent jobs from being scheduled within transactions", "link": "https://github.com/rails/rails/issues/26045", "labels": ["\n                activejob\n", "\n                activerecord\n", "\n                pinned\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.600883960723877, "creation_date": "2016-08-03T17:21:16Z", "issue_submitter": "dhh", "body": "This is a common source of job errors:\nclass Project < ApplicationRecord\n  after_create -> { NotifyProjectParticipants.perform_later self }\nend\n\nclass NotifyProjectParticipants < ApplicationJob\n  def perform(project)\n    # This will explode with a ActiveJob::DeserializationError,\n    #  if the job runs before the INSERT transaction for the new project completes.\n  end\nend\nIt's insidious too. Because it'll often work in development, then fail in production, when your job queue is really fast, and your database might be bogged down.\nThe proper way is of course:\nclass Project < ApplicationRecord\n  after_create_commit -> { NotifyProjectParticipants.perform_later self }\nend\nBut that's easy to forget. So I suggest that we create a new default that disallow jobs from being scheduled within transactions. You should be able to turn that off, but it would be a better default, since it would catch this class for errors for more people before they deploy to production.", "number_of_comments": 7, "comment_authors": ["dhh", "cristianbica", "rails-bot", "senny", "cristianbica", "MarkMurphy", "ghiculescu"]},
{"title": "unable to re-insert middleware that was previously deleted with middleware.delete", "link": "https://github.com/rails/rails/issues/26303", "labels": ["\n                actionpack\n", "\n                attached PR\n", "\n                needs feedback\n"], "depth": 14, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.622276782989502, "creation_date": "2016-08-28T00:13:19Z", "issue_submitter": "naw", "body": "Occasionally there may be a need to change the order of the middleware stack. In Rails 4.2 I did this by deleting a given middleware and adding it back in the new desired location.  In Rails 5, it is not possible to add a previously deleted middleware, since the delete operations run after all other operations, regardless of the actual order the operations are specified. I believe this is an unintended consequence from #18994.\nSteps to reproduce\n\nDelete a middleware: config.middleware.delete SomeMiddleware\nRe-insert the middleware somewhere else: config.middleware.use SomeMiddleware\n\nExpected behavior\nSomeMiddleware should be part of the middleware stack.\nActual behavior\nSomeMiddleware is not part of the middleware stack.\nSystem configuration\nRails version: 5.0.0.1\nRuby version: 2.2.5", "number_of_comments": 16, "comment_authors": ["naw", "maclover7", "rajcybage", "tgxworld", "naw", "tgxworld", "matthewd", "naw", "sirupsen", "naw", "sirupsen", "benlangfeld", "benlangfeld", "naw", "camertron", "st0012"]},
{"title": "model.associations.reload.last is not deterministic", "link": "https://github.com/rails/rails/issues/22129", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4092750549316406, "creation_date": "2015-10-30T19:57:04Z", "issue_submitter": "aripollak", "body": "model.associations.last and model.associations.reload.last behave differently; the former gets the last record deterministically by ordering by the primary key automatically, but the latter does not order at all. This is surprising and seems like a bug. Failing reproduction test case:\n\n\ntest.rb\nbegin\n  require 'bundler/inline'\nrescue LoadError => e\n  $stderr.puts 'Bundler version 1.10 or later is required. Please update your Bundler'\n  raise e\nend\n\ngemfile(true) do\n  source 'https://rubygems.org'\n  gem 'rails', '4.2.4'\n  gem 'sqlite3'\nend\n\nrequire 'active_record'\nrequire 'minitest/autorun'\nrequire 'logger'\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')\nActiveRecord::Base.logger = Logger.new(STDOUT)\nActiveSupport::LogSubscriber.colorize_logging = false\n\nActiveRecord::Schema.define do\n  create_table :posts, force: true  do |t|\n  end\n\n  create_table :comments, force: true  do |t|\n    t.integer :post_id\n  end\nend\n\nclass Post < ActiveRecord::Base\n  has_many :comments\nend\n\nclass Comment < ActiveRecord::Base\n  belongs_to :post\nend\n\nclass BugTest < Minitest::Test\n  def setup\n    @post = Post.create!\n    @original_logger = ActiveRecord::Base.logger\n    @output = StringIO.new\n    ActiveRecord::Base.logger = Logger.new(@output)\n    ActiveRecord::Base.logger.datetime_format = ''\n  end\n\n  def teardown\n    ActiveRecord::Base.logger = @original_logger\n  end\n\n  def test_reload_first\n    @post.comments.first\n    @post.comments.reload.first\n    first, reload_first = @output.string.split(\"\\n\")\n    assert_equal first, reload_first\n  end\n\n  def test_reload_last\n    @post.comments.last\n    @post.comments.reload.last\n    last, reload_last = @output.string.split(\"\\n\")\n    assert_equal last, reload_last\n  end\nend\n\n\n\nTest output\n  1) Failure:\nBugTest#test_reload_first [active_record_master.rb:57]:\n--- expected\n+++ actual\n@@ -1 +1 @@\n-\"D, [#2266] DEBUG -- :   Comment Load (0.1ms)  SELECT  \\\"comments\\\".* FROM \\\"comments\\\" WHERE \\\"comments\\\".\\\"post_id\\\" = ?  ORDER BY \\\"comments\\\".\\\"id\\\" ASC LIMIT 1  [[\\\"post_id\\\", 1]]\"\n+\"D, [#2266] DEBUG -- :   Comment Load (0.1ms)  SELECT \\\"comments\\\".* FROM \\\"comments\\\" WHERE \\\"comments\\\".\\\"post_id\\\" = ?  [[\\\"post_id\\\", 1]]\"\n\n\n\n  2) Failure:\nBugTest#test_reload_last [active_record_master.rb:64]:\n--- expected\n+++ actual\n@@ -1 +1 @@\n-\"D, [#2266] DEBUG -- :   Comment Load (0.1ms)  SELECT  \\\"comments\\\".* FROM \\\"comments\\\" WHERE \\\"comments\\\".\\\"post_id\\\" = ?  ORDER BY \\\"comments\\\".\\\"id\\\" DESC LIMIT 1  [[\\\"post_id\\\", 2]]\"\n+\"D, [#2266] DEBUG -- :   Comment Load (0.0ms)  SELECT \\\"comments\\\".* FROM \\\"comments\\\" WHERE \\\"comments\\\".\\\"post_id\\\" = ?  [[\\\"post_id\\\", 2]]\"", "number_of_comments": 6, "comment_authors": ["aripollak", "pixeltrix", "aripollak", "pixeltrix", "rails-bot", "aripollak"]},
{"title": "Inverse association is not being set before after_create", "link": "https://github.com/rails/rails/issues/19614", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3165135383605957, "creation_date": "2015-04-01T18:16:55Z", "issue_submitter": "afn", "body": "In some cases, explicitly specifying an inverse relationship causes associations to be missing in after_create callbacks.  Take the following example:\nclass User < ActiveRecord::Base\nend\n\nclass AdminUser < User\n  has_one :profile, foreign_key: :user_id, inverse_of: :user\nend\n\nclass Profile < ActiveRecord::Base\n  belongs_to :user, inverse_of: :profile, class_name: AdminUser\n  after_create :do_some_post_processing\n\n  cattr_accessor :instance_for_testing\n\n  def do_some_post_processing\n    self.class.instance_for_testing = self.user.profile\n  end\nend\nThe following test will fail:\n  test \"inverse relationship works as expected\" do\n    user = AdminUser.create!\n    user.profile = Profile.new\n    assert_equal user.profile, Profile.instance_for_testing\n  end\nbecause user.profile is nil when do_some_post_processing is called.  But, if we remove inverse_of: :user from AdminUser and remove inverse_of: :profile, class_name: AdminUser from Profile, then the test will pass.\nThis looks somewhat similar to #9157, but the corresponding PR does not resolve this issue.  Confirmed the behavior on Rails 4.0.13 and 4.2.1.", "number_of_comments": 5, "comment_authors": ["afn", "rafaelfranca", "afn", "palkan", "lingceng"]},
{"title": "Dependency Tracker finds dependencies in HTML tags and incorrectly in render calls", "link": "https://github.com/rails/rails/issues/23536", "labels": ["\n                actionview\n", "\n                attached PR\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4165046215057373, "creation_date": "2016-02-07T03:42:33Z", "issue_submitter": "romaimperator", "body": "I'm not sure that this is technically a bug but it does list extra dependencies for templates that are not actually dependencies. This occurs because of how the dependency tracker looks for render calls in templates.\nI ran into this bug when I was using a decorator object that defined to_partial_path. I had in my view a render call like this <%= render MyDecorator.new(model_object) %> and I also had calls to the cache helper in the same template. When the cache helper was getting the dependencies to use for digesting, I saw in the log Couldn't find template for digesting: news/new. I was able to track this down to how the dependency tracker finds render calls and then processes them. The relevant code is here https://github.com/rails/rails/blob/v5.0.0.beta2/actionview/lib/action_view/dependency_tracker.rb#L118.\nI am also going to submit a pull request with a fix for this issue. I believe this issue #21951 is related and is also will be fixed by the pull request.\nTo reproduce this problem:\n\n\ncreate a new rails project\n\n\ncreate a controller with an action (name doesn't matter) and the corresponding view template\n\n\nin the view template add the following erb:\n<script>\n  var render = document.getElementById('#render');\n  render(data.autokinds);\n</script>\n\n<div id=\"render\" data-auto_kinds=\"value\">\n  <h1>hello</h1>\n</div>\n\n<%= render ApplicationHelper::ClassWithPartialPath.new %>\n<%= render ClassWithPartialPath.new %>\n<%= render ApplicationHelper::employee %>\n\n\nrun bundle exec rake cache_digests:dependencies TEMPLATE=that_template_name\n\n\n=> [\n  \"autokinds/autokind\",\n  \"static/ data-auto_kinds=\", # static is the name of the controller I chose\n  \"ApplicationHelpers/ApplicationHelper\",\n  \"news/new\"\n]\nAfter the fix, running the cache_digests command on the same template will produce:\n=> [\n  \"employees/employee\"\n]\nThis is matching the last render call, the scoped access of a record in the ApplicationHelper. I'm not sure that anyone actually uses that but it is a side-effect fix to prevent the 3rd dependency, \"ApplicationHelpers/ApplicationHelper\", from showing as a dependency.", "number_of_comments": 2, "comment_authors": ["romaimperator", "gmcnaughton"]},
{"title": "Refactor ActionView::TestCase to use ActionView::Base", "link": "https://github.com/rails/rails/issues/23820", "labels": ["\n                actionview\n", "\n                pinned\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3944969177246094, "creation_date": "2016-02-23T02:29:53Z", "issue_submitter": "maclover7", "body": "Instead of using ActionView::Base, ActionView::TestCase has a giant Behavior module which contains some, but not all of ActionView::Base's behavior. This is causing issues like #7218 to appear, because since AV::TestCase doesn't use the true AV::Base, some bugs (in this case, relating to the asset pipeline) are introduced. The long term fix for this is to do a large refactoring of AV::TestCase, and to change it to use AV::Base. I was going to take a look into doing this, but if anyone else would like to claim this, go right ahead. :)", "number_of_comments": 6, "comment_authors": ["maclover7", "kaspth", "arthurnn", "st0012", "maclover7", "utilum"]},
{"title": "Weird handling of nested association error messages when assigned to :base attribute", "link": "https://github.com/rails/rails/issues/19863", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3305022716522217, "creation_date": "2015-04-22T20:50:41Z", "issue_submitter": "ramsdenct", "body": "Typically when an error is assigned to the :base attribute the message will not be prepended with the humanized class name. In the case of associations where a child class assigns an error to :base and the parent attempts to save the item the child item will instead return the error in the format: \"{Child class} base {message}\".\nContrived Example\nclass Container < ActiveRecord::Base\n  has_many :items\n  accepts_nested_attributes_for :items\nend\n\nclass Item < ActiveRecord::Base\n  belongs_to :containers\n\n  validate do |item|\n    item.errors.add(:base, 'An item must have a name.') unless item.name?\n  end\nend\n\nc = Container.new(name: 'Magic Box')\nc.items << Item.new\nc.save\nc.errors\nc.errors.full_messages\nOutput\nirb(main):016:0> c = Container.new(name: 'Magic Box')\n=> #<Container id: nil, name: \"Magic Box\", created_at: nil, updated_at: nil>\nirb(main):017:0> c.items << Item.new\n=> #<ActiveRecord::Associations::CollectionProxy [#<Item id: nil, name: nil, created_at: nil, updated_at: nil, container_id: nil>]>\nirb(main):018:0> c.save\n   (0.1ms)  begin transaction\n   (0.1ms)  rollback transaction\n=> false\nirb(main):019:0> c.errors\n=> #<ActiveModel::Errors:0x0000010b019aa8 @base=#<Container id: nil, name: \"Magic Box\", created_at: nil, updated_at: nil>, @messages={:\"items.base\"=>[\"An item must have a name.\"]}>\nirb(main):020:0> c.errors.full_messages\n=> [\"Items base An item must have a name.\"]\nirb(main):021:0> \n\nI believe this can be corrected by a small change to ActiveRecord::AutosaveAssociation::association_valid?:\nattribute = \"#{reflection.name}.#{attribute}\"\nbecomes\nattribute = \"#{reflection.name}.#{attribute}\" unless attribute == :base\nThough I'm not sure whether there would be unanticipated effects from this change or whether the existing behavior is intended for some reason.", "number_of_comments": 9, "comment_authors": ["ramsdenct", "derekprior", "imanel", "rails-bot", "lukeredpath", "dzmitrys-dev", "imanel", "lulalala", "spaghetticode"]},
{"title": "Please do check if group value is not empty", "link": "https://github.com/rails/rails/issues/19873", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.3345139026641846, "creation_date": "2015-04-23T11:25:36Z", "issue_submitter": "parol-peter", "body": "If somehow query method group is being called with nil param this value goes to group_values and then sql built with ActiveRecord::Calculations.execute_grouped_calculation breaks up\ncheck code like this: Model.group('id').group(nil).count\nquick fix is\n(\"#{field} AS #{aliaz}\" if field and aliaz) in ActiveRecord::Calculations line 312", "number_of_comments": 19, "comment_authors": ["parol-peter", "rafaelfranca", "parol-peter", "rafaelfranca", "meinac", "parol-peter", "rafaelfranca", "rafaelfranca", "meinac", "senny", "parol-peter", "senny", "parol-peter", "rafaelfranca", "parol-peter", "senny", "meinac", "matthewd", "rails-bot"]},
{"title": "ActionController::Streaming doesn't stream", "link": "https://github.com/rails/rails/issues/23828", "labels": ["\n                actionpack\n", "\n                With reproduction steps\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.393528938293457, "creation_date": "2016-02-23T19:37:47Z", "issue_submitter": "nateberkopec", "body": "ActionController::Streaming appears to not actually stream anything on Rails master.\nReproduction script here. Run it as a rack app with puma config.ru.\nWhat I Expect\nViewing this page in the browser should immediately show \"Starting...\" and then \"1\", \"2\", \"3\" etc should appear gradually as the bytes are streamed to the browser.\nWhat Actually Happens\nNothing is displayed until the entire response has completed rendering.\nThis can be confirmed in Chrome's net-internals tab. The request is sent at 3507 milliseconds, and even the headers are not received until 9528 milliseconds.\n\n\nI've tried a lot of different permutations of this. At first I thought maybe it was my webserver - nope, same behavior with Puma, Webrick and Unicorn (even with the fancy config or whatever you're supposed to use). Then I thought it was because Rails might be rendering the layout, then flushing, then rendering the view template, then flushing, then back to the layout before flushing again - but no combination of sleeps anywhere produced streaming output.", "number_of_comments": 23, "comment_authors": ["nateberkopec", "nateberkopec", "maclover7", "maclover7", "nateberkopec", "tenderlove", "nateberkopec", "tenderlove", "tenderlove", "nateberkopec", "nateberkopec", "PikachuEXE", "seanlinsley", "PikachuEXE", "nateberkopec", "PikachuEXE", "seanlinsley", "seanlinsley", "sfcgeorge", "jakeNiemiec", "sfcgeorge", "ioquatix", "ioquatix"]},
{"title": "Active Record Object Equality doesn't handle STI", "link": "https://github.com/rails/rails/issues/23760", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4055132865905762, "creation_date": "2016-02-18T17:41:30Z", "issue_submitter": "CyborgMaster", "body": "Based on the comments on the definition of the ActiveRecord equality method, it seems like two ActiveRecord objects are considered equal if they point to the same record in the database.  The current implementation works great, as long as STI classes are not involved.  If you use STI, then the restriction that the objects be instances of the exact same class is too restrictive.  For example the following code causes serious problems:\nclass CommunicationSetting < ActiveRecord::Base\n  has_many :filters\nend\n\nclass Filter < ActiveRecord::Base\n  belongs_to :communication_setting\nend\n\nclass AppointmentResourceFilter < Filter\nend\n\nclass AppointmentTypeFilter < Filter\nend\n\nc = CommunicationSetting.first\nc.filters # => [#<AppointmentResourceFilter:0x007f9ac80d2c70 id: 1, type: \"AppointmentResourceFilter\">]\n\nf1 = c.filters.first\nf1 # => #<AppointmentResourceFilter:0x007f9ac80d2c70 id: 1, type: \"AppointmentResourceFilter\">\n\nf2 = f1.becomes!(AppointmentTypeFilter)\nf2 # => #<AppointmentTypeFilter:0x007f9ac804e560 id: 1, type: \"AppointmentTypeFilter\">\n\nf1 == f2 # => false\n\nc.filters = [f2]\nNormally if you replace the association on an active record object it realizes if records are the same (based on having the same primary key) and then executes an update query.  If there are removed records, it deletes them and if there are new ones, it inserts them.\nHowever in this case it is very, very confused.  Because the == operator returns false, ActiveRecord thinks that the \"old\" record needs to be deleted.  Then it tries to save the new record, which reports that is has already been persisted because it was loaded from the database, so ActiveRecord tries to perform an update query, which doesn't work:\nDELETE FROM `filters` WHERE `filters`.`id` = 1\nUPDATE `filters` SET `type` = 'AppointmentTypeFilter', `updated_at` = '2016-02-18 17:20:07' WHERE `filters`.`id` = 1\nAs you can see from the above, it deletes record 1 and then tries to update record 1, which now doesn't exist.\nI believe I have a solution (but I'm not an expert in the internals of ActiveRecord so I'm not sure, which is why this isn't a pull request).  Right now the implementation of == looks like this:\n    def ==(comparison_object)\n      super ||\n        comparison_object.instance_of?(self.class) &&\n        !id.nil? &&\n        comparison_object.id == id\n    end\nYou can see that the instance_of? check limits the objects to the same class.  I propose we change it to this:\n  def ==(comparison_object)\n    super ||\n      comparison_object.is_a?(self.class.base_class) &&\n        !id.nil? &&\n        comparison_object.id == id\n  end\nclass.base_class allows us to retrieve the base of the STI inheritance chain, is_a? instead of instance_of? will check for any compatible STI class instead of limiting it to the same exact class.\nWhat do you guys think?  If people think this is the right approach, I am happy to open a pull request.", "number_of_comments": 8, "comment_authors": ["CyborgMaster", "maclover7", "CyborgMaster", "maclover7", "CyborgMaster", "CyborgMaster", "chumakoff", "CyborgMaster"]},
{"title": "Strong parameters doesn't permit array of arrays (nested arrays)", "link": "https://github.com/rails/rails/issues/23640", "labels": ["\n                actionpack\n", "\n                attached PR\n", "\n                With reproduction steps\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4135098457336426, "creation_date": "2016-02-12T18:21:58Z", "issue_submitter": "leonardoprg", "body": "Hey guys,\nWhen I tried to permit params that contains an Array of Array, strong parameters permit is ignoring the second Array and returning an empty Array.\nExample:\n\nController\n\nparams.permit(param1: [param2: [[[:attr, :op, :val]]]])\n\nSent Parameters\n\n\"param1\": {\"param2\": [[{\"attr\": \"1\", \"op\": \"<\", \"val\": \"2\"}]]}\nRails will ignore the nested Arrays and will return only the\n{param1: [] }", "number_of_comments": 29, "comment_authors": ["leonardoprg", "leonardoprg", "maclover7", "leonardoprg", "diego-silva", "maclover7", "alexanderfrankel", "leonardoprg", "lgrains", "waleedasif322", "arthurnn", "MohammadHabbab", "diofeher", "amrrbakry", "leonardoprg", "jpkalbacher", "leonardoprg", "polyglot0027", "danhart", "akhmel", "tilo", "rafaelfranca", "leonardoprg", "rafaelfranca", "leonardoprg", "st0012", "st0012", "mahfuz10", "tke578"]},
{"title": "Unnecessary/faulty downcase on record inside has_one, has_many restrict_with_error control structure", "link": "https://github.com/rails/rails/issues/21064", "labels": ["\n                pinned\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4368443489074707, "creation_date": "2015-07-30T00:59:25Z", "issue_submitter": "cseelus", "body": "Inside the has_one_association.rb and has_many_association.rb occurs a seemingly unnecessary (also untested) downcasing on the associated class' human_attribute_name:\nrecord = klass.human_attribute_name(reflection.name).downcase\nThis leads to undesired and strange looking error messages for restrict_with_error dependencies for class names which should not be downcased.\nHere is one example out of a Rails 4.2.3 application, which is localized with Rails-i18N (screenshot shows German language and text says \"Record can't be deleted, as dependent buildings exist\":\n\nI've fixed it in my local copy of Rails, and the result is a correct spelled error message without downcasing:\n\nI can of course provide a PR if necessary.", "number_of_comments": 6, "comment_authors": ["cseelus", "pixeltrix", "rails-bot", "arthurnn", "dennis95stumm", "alexkuebo"]},
{"title": "ActiveRecord has_many association with dependent: :delete_all is cached when destroy is cancelled", "link": "https://github.com/rails/rails/issues/20954", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4688243865966797, "creation_date": "2015-07-20T15:03:56Z", "issue_submitter": "exciton", "body": "When a has_many association is configured with dependent delete_all, there is a bug in the way the association is cached following a delete call on the owner.\nThe following gist shows a simple failing case.\nThe expected behaviour is that if destroy fails, and rolls back the transaction (therefore rolling back the DELETE ALL) the association is not cached as empty.\nhttps://gist.github.com/exciton/f75f658b8ac5471abb07#file-delete_all_cached_bug", "number_of_comments": 7, "comment_authors": ["exciton", "rails-bot", "exciton", "chumakoff", "vishalzambre", "chumakoff", "aalvrz"]},
{"title": "Autosaving associations ignores validate: false", "link": "https://github.com/rails/rails/issues/21058", "labels": ["\n                activerecord\n", "\n                attached PR\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4748303890228271, "creation_date": "2015-07-29T17:05:58Z", "issue_submitter": "dfyx", "body": "Assume I have the following code:\nclass Parent < ActiveRecord::Base\n  has_many :children\nend\n\nclass Child < ActiveRecord::Base\n  belongs_to :parent\n  validates_presence_of :name\nend\n\nparent = Parent.new(...)\nchild = parent.children.build(...)\nparent.save(validate: false)\nIn this case validate: false only skips the validation for parent but still runs the validations on child. When any validation on child fails, only parent gets saved into the database while child gets thrown away.\nEdit: tested with Rails 4.2.1 and 4.2.3\nEdit 2: Together with the bug I mentioned in the comments of #20676 (scoped uniqueness validator doesn't get parent's id), this results in some very strange behavior.", "number_of_comments": 5, "comment_authors": ["dfyx", "rails-bot", "gmcnaughton", "dmitry", "SerkanSipahi"]},
{"title": "Subclass misses association defined on parent", "link": "https://github.com/rails/rails/issues/20678", "labels": ["\n                activerecord\n", "\n                attached PR\n", "\n                pinned\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.46683669090271, "creation_date": "2015-06-23T22:23:40Z", "issue_submitter": "matthewd", "body": "If an association is defined on the superclass after a subclass has been given an association of its own, the subclass will have the association methods present, but calling them will raise AssociationNotFoundError.\nhttps://gist.github.com/matthewd/8b88b7356d4076fe6a10", "number_of_comments": 8, "comment_authors": ["matthewd", "thedarkone", "akihiro17", "rails-bot", "dguettler", "maclover7", "joenio", "brauliobo"]},
{"title": "Do not use BASE58 for has_secure_token", "link": "https://github.com/rails/rails/issues/20133", "labels": ["\n                activerecord\n", "\n                pinned\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.523822546005249, "creation_date": "2015-05-13T01:03:30Z", "issue_submitter": "kenn", "body": "With this commit 47316fe , SecureRandom.hex is replaced with SecureRandom.base58 but I'd point out problems with it.\n\nBy default, MySQL uses case-insensitive collation like utf8_general_ci. Which means, 4kUgL2pdQMSCQtjE and 4KUGL2PDQMSCQTJE are considered the same token even with a unique index.\n\nWhich not only means that added entropy by case-sensitivity is useless (it is now equivalent to base35), but that could potentially bring in an attack vector.\nIf we want to support any case-sensitive encodings (base58, base62, etc.), we need to specify t.column  :token, 'VARCHAR(24) CHARACTER SET utf8 COLLATE utf8_bin' in migrations, which I don't think is realistic.\n\n\nBase58 works best when it is a \"public\" address that can be read by human and orally spelled. I don't think secure_token is or should be. If the goal is to make the best use of string length, there are less controversial options like Base62 or Base64, but I don't think Base58 makes sense.\n\nI would revert to SecureRandom.hex for compatibility with MySQL.\nLet me know if I should create a PR for this.", "number_of_comments": 14, "comment_authors": ["kenn", "rafaelfranca", "matthewd", "kenn", "rails-bot", "kuboon", "kenn", "kuboon", "rafaelfranca", "sblackstone", "kenn", "sudhirj", "kenn", "nanaya"]},
{"title": "Engine path helpers don't always return URLs that match routes", "link": "https://github.com/rails/rails/issues/20738", "labels": ["\n                engines\n", "\n                With reproduction steps\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4668188095092773, "creation_date": "2015-06-29T23:54:28Z", "issue_submitter": "Ravenstine", "body": "We have a web app that we recently converted to Rails v4.2.1 from v4.0.10.  As a result, we are having an issue where an engine that is mounted in the app isn't returning the correct URLs when the user navigates to a deeper level of the route hierarchy.\nFor example, there's a logout_path method that should return /outpost/logout.  Outpost being the name of our engine.  This works correctly when the user visits /outpost.\nWhen the user visits a deeper path, say /outpost/news_stories, logout path instead returns /logout with no prefix.  This fails because our routes don't actually resolve to that path.  The same thing also seems to happen for root_path, which ends up returning \"/\" in the same circumstance.\nI've been trying to solve this issue for a long time but to no real avail.  So far, I've come across two work-arounds:\n\nInstead of outpost.logout_path, using outpost.logout_path(script_name: 'outpost').\nMonkeypatching actionpack/lib/action_dispatch/url_for.rb to ignore the same_origin and request.script_name and just use env[\"ROUTES_#{_routes.object_id}_SCRIPT_NAME\"].\n\nBoth of those are non-solutions, IMO.\nSince I am not terribly familiar with the internals of Rails, I am having difficulty easily tracking down why this happens or if this is even expected behavior(it doesn't seem like it from the docs, unless I am mistaken).\nThe issue can be reproduced with this example app:\nhttps://github.com/Ravenstine/engine-routes-problem-example\nThe engine it uses is called Outpost:\nhttps://github.com/SCPR/outpost\nJust bundle install, create/migrate the database, rake db:seed, and run the server. (I'm sure you know the drill anyway)\nThe sessions in the app don't really work, but I'm a bit rushed for time at the moment.  Though it does indeed reproduce the problem I describe.\nWhen a user attempts to view a resources page, such as \"/outpost/news_stories\", without a session, the expected behavior is the user being redirected to \"/outpost/login\".  Instead of being redirected to \"/outpost/login\", the user is redirected to \"/login\", which fails because there is no route for it.", "number_of_comments": 6, "comment_authors": ["Ravenstine", "francisco-rojas", "the-undefined", "rails-bot", "Ravenstine", "jeffreyguenther"]},
{"title": "Escaped entities in requests are not properly decoded", "link": "https://github.com/rails/rails/issues/21224", "labels": ["\n                actionpack\n", "\n                With reproduction steps\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4755895137786865, "creation_date": "2015-08-13T15:56:03Z", "issue_submitter": "stevenkaras", "body": "Reproduced here: https://gist.github.com/stevenkaras/042ca66a61b3aea40a83\nThe problem is that some clients will escape more entities than they need to, and routing will fail to unescape them. I've observed this in several cases where automated crawlers will escape the at symbol \"@\" to \"%40\". A workaround is to do the following:\nget ':at:user_name', to: \"test#foobar\", constraints: { at: /@|%40/ }, defaults: { at: \"@\" }\nDespite these being horribly misconfigured clients that shouldn't be escaping the @ in the path, they are, and there is no way to directly match against an escaped sequence in Rails' router (get '%40:user_name' would match a literal '%2540foobar', but not '%40foobar') without using the workaround above.", "number_of_comments": 5, "comment_authors": ["stevenkaras", "atul-shimpi", "stevenkaras", "atulatgithub", "rails-bot"]},
{"title": "accepts_nested_attributes_for breaks the uniqueness with scope validation", "link": "https://github.com/rails/rails/issues/20676", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.8678257465362549, "creation_date": "2015-06-23T20:46:13Z", "issue_submitter": "spurnaye", "body": "Hi All,\nI think for the following configuration  accepts_nested_attributes_for + validation seems to be broken!!\nRails 4.2.1\nRuby 2.1.3\nclass Country < ActiveRecord::Base\n  has_many :cities, dependent: :destroy\n  accepts_nested_attributes_for :cities\nend\n\nclass City < ActiveRecord::Base\n  belongs_to :country\n  validates :language , uniqueness: { scope: :country_id }\nend\n\ncountry = Country.new(description:'abc', language: 'en-US', cities:[City.new(language: 'en-US', text: 'abc'), City.new(language: 'en-US', text: 'abc')])\ncountry.save!\n\nworks!!\nc1 = City.new(language: 'en-US', text: 'abc', country_id: 1)\nc1.save!\n\nc2 = City.new(language: 'en-US', text: 'xyz', country_id: 1)\nc2.save! #does not work\n\n\nHere is executable report https://gist.github.com/spurnaye/0ab33d62dc1f12751ee0\nAppreciate efforts on this!", "number_of_comments": 50, "comment_authors": ["spurnaye", "meinac", "al2o3cr", "meinac", "spurnaye", "meinac", "dmitry", "dfyx", "dfyx", "dmitry", "dfyx", "dmitry", "rails-bot", "chirag7jain", "maclover7", "bluehallu", "lucassch", "dyoganand", "Jaroost", "vspar", "Jaroost", "Jaroost", "vspar", "nminhduc", "mateusdeap", "lethunder", "dfyx", "lethunder", "tbsvttr", "seliverstov-maxim", "kimmy", "anhkhang2304", "1v", "catogonzalez", "kofiasare", "dben89x", "tbsvttr", "SylarRuby", "letiesperon", "YassineDM", "YassineDM", "helenatxu", "BSorbus", "thomasfedb", "anew-bhav", "intrip", "sharvy", "jish0desarkar", "david-mears-2", "david-mears-2"]},
{"title": "In Rails 4.2 passing ActionDispatch::Http::UploadedFile into a model's Hash serialized params raises \"IOError: uninitialized stream\" when trying to read the file.", "link": "https://github.com/rails/rails/issues/21574", "labels": ["\n                activerecord\n", "\n                pinned\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.497574806213379, "creation_date": "2015-09-10T10:00:38Z", "issue_submitter": "SixiS", "body": "This is a bit of an obscure bug. It may not be worth really looking into but it used to work in Rails 4.1 so I decided to create a bug report for it.\nWhy I am doing this\nIn my case I am passing uploaded files to a model in serialized parameters (Hash).\nIt is coming from a form (fields_for) which creates a hash with files.\nI then have a before_save filter which uploads and converts the files from ActionDispatch::Http::UploadedFile objects into identifiers I can use later to retrieve the files.\nThe bug\nThis worked fine in Rails 4.1 but in Rails 4.2 trying to run #read on the ActionDispatch::Http::UploadedFile object raises \"IOError: uninitialized stream\"\nI suspect it has to do with the way the serialize works now, it rebuilds the UploadedFile object but does not correctly initialize the stream. Using File.open(file_from_params.tempfile.path).read works.\nReproducing\nI created a basic repo to reproduce the error:\nIt takes the file in from nested params, passes it to the model (FileUpload.new) and then tries to render out the uploaded files length.\nhttps://github.com/SixiS/http_upload_bug\nWith the Rails version set to 4.1.11 in the Gemfile the single test passes, with 4.2.4 it fails with the error mentioned above.\nMy first Rails bug report, sorry if something is wrong or if this is not the right place - just let me know and I'll fix it.", "number_of_comments": 5, "comment_authors": ["SixiS", "matthewd", "rails-bot", "solojavier", "Geesu"]},
{"title": "Threading error when using ActiveRecord with_connection do & ActionController::Live", "link": "https://github.com/rails/rails/issues/21209", "labels": ["\n                actionpack\n", "\n                pinned\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.5006067752838135, "creation_date": "2015-08-12T12:59:53Z", "issue_submitter": "duttski", "body": "Source: http://stackoverflow.com/questions/31535545/threading-error-when-using-activerecord-with-connection-do-puma , puma/puma#758\nSummary:  When using Puma and running long-running connections I am consistently receiving errors related to ActiveRecord connections crossing threads. This manifests itself in message like message type 0x## arrived from server while idle and a locked (crashed) server.\n** Edit: ** Added OS X and Rainbows to applicable versions\nWhat isn't clear is what conditions could cause the connection to be crossed between threads, i.e. am I, or is Puma, doing something wrong and needs correcting, or is the connection_pool getting confused. If you think this is better placed somewhere else then please let me know. I'm trying to do leg work on this but pretty much out of ideas!\n\nThe set up:\n\nUbuntu 15 / OS X Yosemite\nPostgreSQL (9.4) / MySQL (mysqld 5.6.25-0ubuntu0.15.04.1)\nRuby - MRI 2.2.2p95 (2015-04-13 revision 50295) [x86_64-linux] / Rubinius rbx-2.5.8\nRails (4.2.3, 4.2.1)\nPuma (2.12.2, 2.11) / Rainbows\npg (pg-0.18.2) / mysql2\n\nNote, not all combinations of the above versions have been tried. First listed version is what I'm currently testing against.\n\nrails new issue-test\nAdd a route get 'events' => 'streaming#events'\nAdd a controller streaming_controller.rb\nSet up database stuff (pool: 2, but seen with different pool sizes)\n\nCode:\nclass StreamingController < ApplicationController\n\n  include ActionController::Live\n\n  def events\n    begin\n      response.headers[\"Content-Type\"] = \"text/event-stream\"\n      sse = SSE.new(response.stream)\n      sse.write( {:data => 'starting'} , {:event => :version_heartbeat})\n      ActiveRecord::Base.connection_pool.release_connection\n      while true do\n        ActiveRecord::Base.connection_pool.with_connection do |conn|\n          ActiveRecord::Base.connection.query_cache.clear\n          logger.info 'START'\n          conn.execute 'SELECT pg_sleep(3)'\n          logger.info 'FINISH'\n          sse.write( {:data => 'continuing'}, {:event => :version_heartbeat})\n          sleep 0.5\n         end\n      end\n    rescue IOError\n    rescue ClientDisconnected\n    ensure\n      logger.info 'Ensuring event stream is closed'\n      sse.close\n    end\n    render nothing: true\n  end\nend\n\nPuma configuration:\nworkers 1\nthreads 2, 2\n#...\nbind \"tcp://0.0.0.0:9292\"\n\n#...\nactivate_control_app\n\non_worker_boot do\n  require \"active_record\"\n  ActiveRecord::Base.connection.disconnect! rescue ActiveRecord::ConnectionNotEstablished\n  ActiveRecord::Base.establish_connection(YAML.load_file(\"#{app_dir}/config/database.yml\")[rails_env])\nend\n\n\nRun the server puma -e production -C path/to/puma/config/production.rb\n\nTest script:\n#!/bin/bash\n\ntimeout 30 curl -vS http://0.0.0.0/events &\ntimeout 5 curl -vS http://0.0.0.0/events &\ntimeout 30 curl -vS http://0.0.0.0/events\n\nThis reasonably consistently results in a complete lock of the application server (in PostgreSQL, see notes). The scary message comes from libpq:\nmessage type 0x44 arrived from server while idle\nmessage type 0x43 arrived from server while idle\nmessage type 0x5a arrived from server while idle\nmessage type 0x54 arrived from server while idle\n\nIn the 'real-world' I have quite a few extra elements and the issue presents itself at random. My research indicates that this message comes from libpq and is subtext for 'communication problem, possibly using connection in different threads'. Finally, while writing this up, I had the server lock up without a single message in any log.\n\nI don't see the issue happen if I change the controller block to look like:\nbegin\n  #...\n  while true do\n    t = Thread.new do #<<<<<<<<<<<<<<<<<\n        ActiveRecord::Base.connection_pool.with_connection do |conn|\n            #...\n        end\n     end\n     t.join #<<<<<<<<<<<<<<<<<\n  end\n  #...\nrescue IOError\n#...\n\nBut I don't know whether this has actually solved the problem or just made it extremely unlikely. Nor can I really fathom why this would make a difference.\n\nMySQL\nIf running MySQL, the message is a bit different, and the application recovers (though I'm not sure if it is then in some undefined state):\nF, [2015-07-30T14:12:07.078215 #15606] FATAL -- : \nActiveRecord::StatementInvalid (Mysql2::Error: This connection is in use by: #<Thread:0x007f563b2faa88@/home/dev/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/actionpack-4.2.3/lib/action_controller/metal/live.rb:269 sleep>: SELECT  `tasks`.* FROM `tasks`  ORDER BY `tasks`.`id` ASC LIMIT 1):", "number_of_comments": 10, "comment_authors": ["duttski", "duttski", "matthewd", "duttski", "scambra", "duttski", "scambra", "rails-bot", "scambra", "lloeki"]},
{"title": "autosave on has_many relation doesn't save updated collection objects all the time", "link": "https://github.com/rails/rails/issues/17466", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.124603271484375, "creation_date": "2014-10-31T21:14:29Z", "issue_submitter": "mkanoor", "body": "I am using Rails 3.2.17\nWhen the objects in a collection are updated and the parent object is saved it works when the objects in the relationship are updated via the relationship. If the children objects are retrieved using the find methods and then updated and assigned back to the relation, the parent doesn’t save the updated children.\ne.g.\nWe have a customer object which is the parent and it has many orders.\nhas_many   :orders, :autosave => true\nThis scenario works\ncustomer = Customer.find(some_id)\ncustomer.orders.each do |o|\no.status = “completed\"\nend\ncustomer.save!\nBut if we build the orders by fetching the records individually using the find AR methods and update them\nthen set the collection to the new update collection, by saving the parent the children don't get updated.\ne.g.\ncustomer = Customer.find(some_id)\norders = Orders.find_all_by_customer_id(customer.id)\norders.each do |o|\no.status = “completed\"\nend\ncustomer.orders = orders\ncustomer.save!", "number_of_comments": 25, "comment_authors": ["mkanoor", "mkanoor", "matthewd", "tenderlove", "merongivian", "sgrif", "mkanoor", "rails-bot", "obfuscoder", "obfuscoder", "obfuscoder", "obfuscoder", "obfuscoder", "davidcpell", "bluehallu", "vandamon", "mstroming", "al2o3cr", "mstroming", "al2o3cr", "mstroming", "InteNs", "fschwahn", "c-moyer", "fabriziobertoglio1987"]},
{"title": "ActionView Erubis rendering is ten times slower than plain Erubis", "link": "https://github.com/rails/rails/issues/17565", "labels": ["\n                actionview\n", "\n                pinned\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.102609634399414, "creation_date": "2014-11-09T16:58:41Z", "issue_submitter": "brauliobo", "body": "Hello all,\nI wanted to know what is the overhead of ActionView and modified slim's benchmarks. See the results below.\n1000 Iterations\nRehearsal ----------------------------------------------------------------\n(1) erb                        0.010000   0.000000   0.010000 (  0.017649)\n(1) erubis                     0.020000   0.000000   0.020000 (  0.015099)\n(1) fast erubis                0.020000   0.000000   0.020000 (  0.014776)\n(1) rails erubis               0.010000   0.000000   0.010000 (  0.015612)\n(1) actionview locals erubis   0.170000   0.010000   0.180000 (  0.168290)\n(1) actionview vars erubis     0.150000   0.000000   0.150000 (  0.155732)\n(1) temple erb                 0.020000   0.000000   0.020000 (  0.023802)\n(1) slim pretty                0.040000   0.000000   0.040000 (  0.040340)\n(1) slim ugly                  0.020000   0.000000   0.020000 (  0.019859)\n(1) haml pretty                0.100000   0.000000   0.100000 (  0.095830)\n(1) haml ugly                  0.080000   0.000000   0.080000 (  0.084720)\n(2) erb                        0.030000   0.000000   0.030000 (  0.029845)\n(2) erubis                     0.020000   0.000000   0.020000 (  0.025605)\n(2) temple erb                 0.030000   0.000000   0.030000 (  0.027858)\n(2) slim pretty                0.050000   0.000000   0.050000 (  0.046810)\n(2) slim ugly                  0.030000   0.000000   0.030000 (  0.025806)\n(2) haml pretty                0.100000   0.000000   0.100000 (  0.100112)\n(2) haml ugly                  0.080000   0.000000   0.080000 (  0.088057)\n------------------------------------------------------- total: 0.990000sec\n\nTo reproduce checkout https://github.com/brauliobo/slim and run TASK=bench bundle exec rake bench iterations=1000", "number_of_comments": 11, "comment_authors": ["brauliobo", "tgxworld", "rud", "brauliobo", "brauliobo", "thedarkone", "brauliobo", "brauliobo", "brauliobo", "rails-bot", "rails-bot"]},
{"title": "Two association records created for has_many through", "link": "https://github.com/rails/rails/issues/17599", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.1345751285552979, "creation_date": "2014-11-12T20:42:49Z", "issue_submitter": "daveroberts", "body": "I'd like to revisit issue #3798.  In this issue, @rafaelfranca offers the following recommendation\n\nI don't think this is an issue. Associations defines callbacks. Callback order is important since they are executed in the correct order. That said you should not place callbacks before the associations. This is even documented\n\nI believe I have come up with an example where the callback is defined after the associations as Rafael recommends, but the problem is still occurring.  In this case, is there a valid workaround, or is this buggy behavior?\nclass Audit < ActiveRecord::Base\nend\nclass AuditAssignment < ActiveRecord::Base\n  belongs_to :audit\n  belongs_to :item, polymorphic: true\nend\nclass Group < ActiveRecord::Base\n  has_many :roles\n  has_many :users, through: :roles\nend\nclass Role < ActiveRecord::Base\n  belongs_to :user\n  belongs_to :group\n\n  after_create :audit_creation\n  def audit_creation\n    a = Audit.new(message: \"User added to group\")\n    self.user.audits << a\n  end\nend\nclass User < ActiveRecord::Base\n  has_many :roles\n  has_many :groups, through: :roles\n  has_many :audits, through: :audit_assignments\n  has_many :audit_assignments, -> {where(item_type: 'User')}, foreign_key: :item_id\nend\nGiven this model, the following test will fail:\ntest \"creates only one audit assignment\" do\n    g = Group.create(name: \"Administrators\")\n    u = User.new(name: \"Admin\", groups: [g])\n    u.save\n    assert AuditAssignment.count == 1\n  end\nNotice the after_create hook of AuditAssignment is placed after all associations in that class.\nI have reproduced the problem in a minimal Rails project, based on 4.1.7, that has a single failing test.", "number_of_comments": 16, "comment_authors": ["daveroberts", "jvanbaarsen", "tarasmatsyk", "rafaelfranca", "tarasmatsyk", "rafaelfranca", "tarasmatsyk", "rafaelfranca", "tarasmatsyk", "tarasmatsyk", "tarasmatsyk", "daveroberts", "tarasmatsyk", "al2o3cr", "tarasmatsyk", "arknamal"]},
{"title": "Ruby process hangs when calling generator from after_bundle hook in Rails template", "link": "https://github.com/rails/rails/issues/21700", "labels": ["\n                railties\n", "\n                With reproduction steps\n"], "depth": 15, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.4576077461242676, "creation_date": "2015-09-21T14:08:37Z", "issue_submitter": "jensljungblad", "body": "If I do the following in a Rails template:\nafter_bundle do\n  generate(:model, \"article title:string\")\nend\nAnd run it with\n$ rails new sandbox -m template.rb\nThe two ruby processes still hangs around afterwords. It crashes if I, for instance, run the template a second time unless I first force quit those two processes. For the record, I'm not trying to generate a model, but I'm trying to run a generator that comes from a gem that I'm adding in the template as well.", "number_of_comments": 10, "comment_authors": ["jensljungblad", "zerothabhishek", "jensljungblad", "rails-bot", "maclover7", "VishalRocks", "CharlieHawker", "danielricecodes", "viktorianer", "gerrywastaken"]},
{"title": "self-referential templates blow up rake task but not server", "link": "https://github.com/rails/rails/issues/18667", "labels": ["\n                actionview\n", "\n                With reproduction steps\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.7914502620697021, "creation_date": "2015-01-23T23:25:43Z", "issue_submitter": "jjb", "body": "I have two partials which refer to one another. When I calculate nested dependencies in the console like so:\nfinder = ApplicationController.new.lookup_context\nActionView::Digestor.new(name: \"posts/show\", finder: finder).nested_dependencies\nor via the rake task like so:\nrake cache_digests:nested_dependencies TEMPLATE=posts/show\nI get a short list of initial dependencies, and then this in an infinite loop, until the ruby stack is full (I have some debug code outputting which template is being loaded):\n...\n>>>>>>> users/foo\n>>>>>>> users/bar\n>>>>>>> users/baz\n>>>>>>> users/bip\n>>>>>>> users/foo\n>>>>>>> users/bar\n>>>>>>> users/baz\n>>>>>>> users/bip\nSystemStackError: stack level too deep\n\nHowever, when I run the app server and request the template, things run just fine, no infinite loops.\nHere are my settings in all of the above cases:\nconfig.action_controller.perform_caching = true\nconfig.cache_store = :file_store, Rails.root.to_s + '/tmp/cache/stuff'\nActionView::Base.cache_template_loading = true\nThe code indicates that it does have recursive reference protection: https://github.com/rails/rails/blob/v4.1.8/actionview/lib/action_view/digestor.rb#L35\nI'm not really groking that code. It seems like the recursive reference protection is working in the server environment but not in console or the rake task.\n(also a SO question http://stackoverflow.com/questions/28018187)", "number_of_comments": 12, "comment_authors": ["jjb", "jjb", "jjb", "jjb", "jiripospisil", "jjb", "jiripospisil", "jjb", "jjb", "rails-bot", "jjb", "rafaelfranca"]},
{"title": "AR attribute lookup performed incorrectly if records are instantiated from cache", "link": "https://github.com/rails/rails/issues/19318", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.7684245109558105, "creation_date": "2015-03-13T10:24:56Z", "issue_submitter": "enthrops", "body": "Background: A table named people with columns format and name, along with a corresponding ActiveRecord model and a sample row in the table.\nSTR:\n\nOpen up rails console and execute Rails.cache.fetch('whatever') { Person.all.load }. This will return all people and generate the cache entry.\nQuit and open rails console again\nExecute Rails.cache.fetch('whatever') { Person.all.load }[0].name. You will get the sample name back\nExecute Rails.cache.fetch('whatever') { Person.all.load }[0].format. You will get NoMethodError: private method `format' called for ...\nIf you then execute Person.new, step 4 will work as expected\nThis is probably related to the fact that format is a method in Kernel, so I suppose something goes wrong with the AR lookup chain", "number_of_comments": 8, "comment_authors": ["enthrops", "enthrops", "Qianfinland", "enthrops", "rafaelfranca", "enthrops", "palkan", "enthrops"]},
{"title": "AR is erroneously validating existing records on a has_many :through", "link": "https://github.com/rails/rails/issues/17621", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.8605046272277832, "creation_date": "2014-11-14T16:17:16Z", "issue_submitter": "uberllama", "body": "Its Friday, so entirely possible I just need a drink and some sleep. But after upgrading a legacy app to the latest and greatest, I've started to see unexpected validations when creating new records with existing associations on a has_many :through.\nSee attached gist: https://gist.github.com/uberllama/1d0323438700d4f23bbb\nI have a Conversation class, which has many :users through :conversation_users. When a user creates a new Conversation, they specify which Users they want to include in the Conversation. This boils down to:\nclass Conversation < ActiveRecord::Base\n  has_many :conversation_users\n  has_many :users, through: :conversation_users\nend\n\nclass ConversationUser < ActiveRecord::Base\n  belongs_to :conversation\n  belongs_to :user\nend\n\nclass User < ActiveRecord::Base\n  has_many :conversation_users\n  has_many :conversations, through: :conversation_users\n  validates :name, presence: true\nend\n\nconversation = Conversation.new(user_ids: [1,2,3])\nconversation.save\nWhen calling save on the new Conversation instance, AR is validating the associated Users even though they are existing, non-dirty objects. This results in huge amounts of unnecessary weight on every Conversation save. It should not be the responsibility of a model to validate its associated objects unless those objects are being created or modified along with the parent model.\nWhat am I missing?", "number_of_comments": 14, "comment_authors": ["uberllama", "jcutrell", "uberllama", "tenderlove", "uberllama", "brainopia", "uberllama", "eileencodes", "uberllama", "uberllama", "eileencodes", "bigmountainben", "alfie-max", "cdimitroulas"]},
{"title": "JSON requests with Chunked encoding are not handled correctly", "link": "https://github.com/rails/rails/issues/15079", "labels": ["\n                actionpack\n", "\n                With reproduction steps\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.7584185600280762, "creation_date": "2014-05-12T23:15:04Z", "issue_submitter": "xaviershay", "body": "(Continuation of #7556, since that ticket became confusing.)\nOn Rails 4.1.1 (and current master), posting a JSON body with chunked transfer encoding, the body is ignored and no params are accessible in the controller.\nHere is a repro: https://github.com/xaviershay/chunked_repro (see README)\nHere is a proof-of-concept fix: https://github.com/xaviershay/rails/tree/chunked-fix\nIf the fix is directionally correct, I can try to clean it up into a PR.", "number_of_comments": 11, "comment_authors": ["xaviershay", "rails-bot", "eval", "rails-bot", "mattbornski", "trostli", "mchapman17", "trostli", "coorasse", "thom-nic", "thom-nic"]},
{"title": "Allow variants to be set through the URL", "link": "https://github.com/rails/rails/issues/18818", "labels": ["\n                actionpack\n", "\n                pinned\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.7954213619232178, "creation_date": "2015-02-05T04:15:45Z", "issue_submitter": "dhh", "body": "Accessing http://example.com/posts.html+partial should set both format: :html and variant: :partial automatically. This will make it easier to supply multiple variants of the same format without needing before filters to determine the variant.", "number_of_comments": 15, "comment_authors": ["dhh", "angdev", "dhh", "angdev", "dhh", "angdev", "kaspth", "angdev", "pierre-pretorius", "dhh", "pierre-pretorius", "dhh", "rails-bot", "dhh", "klondikemarlen"]},
{"title": "Activerecord DISTINCT ON for json data type in postgresql", "link": "https://github.com/rails/rails/issues/17706", "labels": ["\n                activerecord\n", "\n                PostgreSQL\n", "\n                With reproduction steps\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.8584189414978027, "creation_date": "2014-11-21T20:05:24Z", "issue_submitter": "3zcurdia", "body": "When a field on postgres is json type, and you make a call to uniq or distinct, the query generates SELECT DISTINCT  but in order to work with json type on postgres it should be SELECT DISTINCT ON (), Also you can check more details here", "number_of_comments": 23, "comment_authors": ["3zcurdia", "namxam", "mess110", "jgrannas", "indaso", "sgrif", "mikeatlas", "Fire-Dragon-DoL", "parubets", "seanlinsley", "alecdotninja", "dijonkitchen", "GregT-home", "seanlinsley", "calin-ciobanu", "seanlinsley", "aforty", "aliismayilov", "hrdwdmrbl", "machty", "hrdwdmrbl", "machty", "hrdwdmrbl"]},
{"title": "Possible circular references bug", "link": "https://github.com/rails/rails/issues/19548", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.7804040908813477, "creation_date": "2015-03-27T13:11:05Z", "issue_submitter": "nesrual", "body": "UPDATE: Code to reproduce the problem is in comments\nI have a Rails project with the following models:\naccount\nusername\nuser\naddress\n\nWith the following associations:\nclass Account < ActiveRecord::Base\n  has_many :users, :inverse_of => :account\n  has_many :addresses, :inverse_of => :account\n  has_many :usernames, :inverse_of => :account\n\n  accepts_nested_attributes_for :usernames\n  accepts_nested_attributes_for :users\n  accepts_nested_attributes_for :addresses\nend\n\nclass Username < ActiveRecord::Base\n  belongs_to :account\nend\n\nclass User < ActiveRecord::Base\n  belongs_to :account\n  belongs_to :username\nend\n\nclass Address < ActiveRecord::Base\n  belongs_to :account\nend\n\nI build a new account:\naccount = Account.new(params.require(:account).permit(\n    usernames_attributes: [:username], \n    users_attributes: [:password, :firstname, :lastname, :phone, :mobile, :fax],\n    addresses_attributes: [:address_line_1, :address_line_2, :city, :zipcode, :state, :country]))\n\nwhich validates and saves fine under Rails 4.2.0, however with Rails 4.2.1 I get the following error returned from PostgreSQL:\n ActiveRecord::StatementInvalid:\n   PG::NotNullViolation: ERROR:  null value in column \"account_id\" violates not-null constraint\n\nThe error is on the username model when trying to save it. Seems like the reference to the account is missing when saving.", "number_of_comments": 15, "comment_authors": ["nesrual", "nesrual", "dgmstuart", "prakashmurthy", "nesrual", "prakashmurthy", "rafaelfranca", "nesrual", "meinac", "nesrual", "meinac", "nesrual", "meinac", "rails-bot", "p8"]},
{"title": "Wrong instance object passed to lambda on has_one :through", "link": "https://github.com/rails/rails/issues/17887", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.8444116115570068, "creation_date": "2014-12-02T20:27:25Z", "issue_submitter": "haruska", "body": "UPDATE: Checked against latest master (April 2016). Still an issue. Updated bug template and output below. Also simplified the issue to 3 classes with associations.\nSee the active_record_master.rb test below for details. You have a has_many :through and a lambda (class A.) Another object attempts to access that relationship through another has_many (class C.)\nThe result is an instance of class B getting passed into the lambda.\nThe expected result would be an instance of class A getting passed into the lambda.\nactive_record_master.rb\nbegin\n  require 'bundler/inline'\nrescue LoadError => e\n  $stderr.puts 'Bundler version 1.10 or later is required. Please update your Bundler'\n  raise e\nend\n\ngemfile(true) do\n  source 'https://rubygems.org'\n  gem 'rails', github: 'rails/rails'\n  gem 'arel', github: 'rails/arel'\n  gem 'sqlite3'\nend\n\nrequire 'active_record'\nrequire 'minitest/autorun'\nrequire 'logger'\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :as do |t|\n    t.integer :b_id\n    t.string :a_value\n  end\n\n  create_table :bs do |t|\n    t.string :b_value\n  end\n\n  create_table :cs do |t|\n    t.integer :a_id\n    t.string :c_value\n  end\nend\n\nclass A < ActiveRecord::Base\n  belongs_to :b\n  has_one :c, ->(a) { where(c_value: a.a_value) }\nend\n\nclass B < ActiveRecord::Base\n  has_one :a\n  has_one :c, through: :a\nend\n\nclass C < ActiveRecord::Base\n  belongs_to :a\nend\n\n\nclass BugTest < Minitest::Test\n  def test_has_many_through_proc\n    b = B.create!\n    a = A.create!(b: b)\n\n    assert_equal a.c, b.c\n  end\nend\noutput\n  1) Error:\nBugTest#test_has_many_through_proc:\nNoMethodError: undefined method `a_value' for #<B id: 1, b_value: nil>\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activemodel/lib/active_model/attribute_methods.rb:433:in `method_missing'\n    active_record_master.rb:41:in `block in <class:A>'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/association_scope.rb:162:in `instance_exec'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/association_scope.rb:162:in `eval_scope'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/association_scope.rb:140:in `block (2 levels) in add_constraints'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/association_scope.rb:139:in `each'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/association_scope.rb:139:in `block in add_constraints'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/association_scope.rb:127:in `loop'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/association_scope.rb:127:in `add_constraints'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/association_scope.rb:28:in `scope'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/association_scope.rb:5:in `scope'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/association.rb:97:in `association_scope'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/association.rb:86:in `scope'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/singular_association.rb:48:in `get_records'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/singular_association.rb:63:in `find_target'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/association.rb:138:in `load_target'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/association.rb:53:in `reload'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/singular_association.rb:15:in `reader'\n    /Users/haruska/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/rails-4440df10a051/activerecord/lib/active_record/associations/builder/association.rb:111:in `c'\n    active_record_master.rb:60:in `test_has_many_through_proc'", "number_of_comments": 8, "comment_authors": ["haruska", "al2o3cr", "haruska", "rails-bot", "haruska", "haruska", "haruska", "haruska"]},
{"title": "Error is rescued in routes if controller doesn't exist, and masked as a RoutingError", "link": "https://github.com/rails/rails/issues/14567", "labels": ["\n                actionpack\n", "\n                pinned\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5688984394073486, "creation_date": "2014-04-02T13:48:43Z", "issue_submitter": "dragosmiron", "body": "Hello,\nI discovered this 'problem' (in apostrophes as it might not be a problem from your perspective) by chance and is as follows:\nIf you are defining a route with a bad controller name (maybe misspelled), the error is rescued and raised again as a RoutingError. Sometimes as I see the error is silenced completely but I don't know the exact internals.\nIt all happens here: https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/routing/route_set.rb#L68\nI personally consider this as a real error, something that I should have seen reported by airbrake. While it can be considered a routing error, I would like it to be a distinction between stuff entered randomly by users in the addressbar, and how that stuff maps afterwards to controllers and actions.\nI don't understand why they both get put in this pool of Routing Errors", "number_of_comments": 6, "comment_authors": ["dragosmiron", "dragosmiron", "robin850", "matthewd", "dragosmiron", "rails-bot"]},
{"title": "Rails 4: Cache Digests not resolving a render layout: do block", "link": "https://github.com/rails/rails/issues/14991", "labels": ["\n                actionview\n", "\n                pinned\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 0.5688803195953369, "creation_date": "2014-05-06T12:24:26Z", "issue_submitter": "spodlecki", "body": "Rails 4 Cache Digests is not resolving dependancies properly, in this specific case. I am using a render block to share html layouts (such as runner modules that use the same classes, different titles, and so on)\nIt does calculate the hash, but it is still looking for files that don't exist -- and it does not digest the parent layout.\nthe block:\n=render layout: 'shared/runner_module', locals: {title: title} do\n    <..... html ....>\n\nIf I remove the block, the notifications below do not occur. While I doubt we'd ever actually change the parent html, it would still cause a problem until the cache drops.\nNotifications in log:\nCouldn't find template for digesting: layouts/layout.html.haml", "number_of_comments": 9, "comment_authors": ["spodlecki", "rafaelfranca", "rafaelfranca", "rails-bot", "lustremedia", "rafaelfranca", "lustremedia", "jrreed", "karray"]},
{"title": "assert_recognizes and assert_routing don't take route constraints into account", "link": "https://github.com/rails/rails/issues/15589", "labels": ["\n                actionpack\n", "\n                pinned\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2960524559020996, "creation_date": "2014-06-09T14:39:03Z", "issue_submitter": "bmironov", "body": "Hello,\nI'm in process of migration of my app from Rails 3.2 to 4.1. I just hit an issue in my tests where application works fine with my routes but assert_recognizes does not.\nHere are my routes and snippet of test:\n  put 'scheduled_jobs/:id/unlock' =>   'scheduled_jobs#unlock',       as: :unlock_scheduled_job\n  get 'scheduled_jobs/queue_status' => 'scheduled_jobs#queue_status', as: :queue_status,         constraints: {:ip => /^127\\.\\d+\\.\\d+\\.\\d+$/}\n  get 'scheduled_jobs/dequeue' =>      'scheduled_jobs#dequeue',      as: :dequeue,              constraints: {:ip => /^127\\.\\d+\\.\\d+\\.\\d+$/}\n\n  resources :scheduled_jobs, only: [:show, :index, :destroy]\n\nTest:\nassert_recognizes({:controller => 'scheduled_jobs', :action => 'queue_status'},\n                      {:path => \"/scheduled_jobs/queue_status\", :method => :get}, {}, 'Routing to ScheduledJobs#queue_status is not recognized')\n\nError message:\nRouting to ScheduledJobs#queue_status is not recognized\nThe recognized options <{\"action\"=>\"show\", \"controller\"=>\"scheduled_jobs\", \"id\"=>\"queue_status\"}> did not match <{\"controller\"=>\"scheduled_jobs\", \"action\"=>\"queue_status\"}>, difference:.\n--- expected\n+++ actual\n@@ -1 +1 @@\n-{\"controller\"=>\"scheduled_jobs\", \"action\"=>\"queue_status\"}\n+{\"action\"=>\"show\", \"controller\"=>\"scheduled_jobs\", \"id\"=>\"queue_status\"}\n\nBest regards,\nBoris", "number_of_comments": 15, "comment_authors": ["bmironov", "bmironov", "al2o3cr", "bmironov", "al2o3cr", "bmironov", "al2o3cr", "rafaelfranca", "bmironov", "rafaelfranca", "matthewd", "rails-bot", "Edouard-chin", "matthewd", "Edouard-chin"]},
{"title": "Explicit transactions not rolling back when validation fails on nested attributes", "link": "https://github.com/rails/rails/issues/14698", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.8539514541625977, "creation_date": "2014-04-11T02:30:50Z", "issue_submitter": "lcreid", "body": "In certain situations, when a validation fails on a model referenced in nested attributes, when the update attributes is executed inside an explicit transaction, the transaction is not rolled back, and the database is left in a state that's different than it was before the transaction.\nExample:\nIn the controller:\n    User.transaction do\n      user.update(email: nil, user_setting_attributes: {favourite_color: 'red'})\n    end\nNote that user.update! does not cause the issue.\nThe models:\nclass User < ActiveRecord::Base\n  has_one :user_setting\n  accepts_nested_attributes_for :user_setting\n  validates_presence_of :email\nend\n\nclass UserSetting < ActiveRecord::Base\n  belongs_to :user\nend\nA complete file that shows a case that causes, and some cases that are similar but don't cause the issue:\nunless File.exist?('Gemfile')\n  File.write('Gemfile', <<-GEMFILE)\nsource 'https://rubygems.org'\ngem 'activerecord', '4.1.0'\ngem 'sqlite3'\nGEMFILE\n\n  system 'bundle'\nend\n\nrequire 'bundler'\nBundler.setup(:default)\n\n# Activate the gem you are reporting the issue against.\nrequire 'active_record'\nrequire 'minitest/autorun'\nrequire 'logger'\n\n# Ensure backward compatibility with Minitest 4\nMinitest::Test = MiniTest::Unit::TestCase unless defined?(Minitest::Test)\n\n# This connection will do for database-independent bug reports.\nActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')\nActiveRecord::Base.logger = Logger.new(STDOUT)\n\nActiveRecord::Schema.define do\n  create_table :users do |t|\n    t.string :email\n  end\n\n  create_table :user_settings do |t|\n    t.integer :user_id\n    t.string :favourite_color\n  end\nend\n\nclass User < ActiveRecord::Base\n  has_one :user_setting\n  accepts_nested_attributes_for :user_setting\n  validates_presence_of :email\nend\n\nclass UserSetting < ActiveRecord::Base\n  belongs_to :user\nend\n\nclass BugTest < Minitest::Test\n  def test_update_without_transaction\n    user = User.create!(email: 'godfrey@example.com', user_setting_attributes: {favourite_color: 'orange'})\n    assert_equal 'orange', user.user_setting.favourite_color\n\n    assert ! user.update(email: nil, user_setting_attributes: {favourite_color: 'red'})\n\n    user.reload\n\n    assert user.user_setting.present?\n    assert_equal 'orange', user.user_setting.favourite_color\n  end\n\n  def test_update_with_transaction\n    user = User.create!(email: 'godfrey@example.com', user_setting_attributes: {favourite_color: 'orange'})\n    assert_equal 'orange', user.user_setting.favourite_color\n\n    User.transaction do\n      assert ! user.update(email: nil, user_setting_attributes: {favourite_color: 'red'})\n    end\n\n    user.reload\n\n    assert user.user_setting.present?\n    assert_equal 'orange', user.user_setting.favourite_color\n  end\n\n  def test_update_without_transaction!\n    user = User.create!(email: 'godfrey@example.com', user_setting_attributes: {favourite_color: 'orange'})\n    assert_equal 'orange', user.user_setting.favourite_color\n\n    assert_raises(ActiveRecord::RecordInvalid) do\n      user.update!(email: nil, user_setting_attributes: {favourite_color: 'red'})\n    end\n\n    user.reload\n\n    assert user.user_setting.present?\n    assert_equal 'orange', user.user_setting.favourite_color\n  end\n\n  def test_update_with_transaction!\n    user = User.create!(email: 'godfrey@example.com', user_setting_attributes: {favourite_color: 'orange'})\n    assert_equal 'orange', user.user_setting.favourite_color\n\n    assert_raises(ActiveRecord::RecordInvalid) do\n      User.transaction do\n        assert ! user.update!(email: nil, user_setting_attributes: {favourite_color: 'red'})\n      end\n    end\n\n    user.reload\n\n    assert user.user_setting.present?\n    assert_equal 'orange', user.user_setting.favourite_color\n  end\nend\nIf the above is in a file called repro.rb, then:\nruby repro.rb\nshould produce output ending in:\n4 runs, 15 assertions, 1 failures, 0 errors, 0 skips\n\nThe issues has been observed in 4.1 master and 4.0 master. I haven't yet checked how far back it might go.\nThe issue was shown to my by @chancancode . I'm documenting the issue here without much further research yet because I didn't want it to get dropped.", "number_of_comments": 15, "comment_authors": ["lcreid", "chancancode", "chancancode", "matthewd", "chancancode", "evtuhovich", "chancancode", "evtuhovich", "chancancode", "evtuhovich", "chancancode", "chancancode", "rails-bot", "robzolkos", "guigs"]},
{"title": "rails on live stream seems to expires with error on server", "link": "https://github.com/rails/rails/issues/13873", "labels": ["\n                actionpack\n", "\n                With reproduction steps\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.8789637088775635, "creation_date": "2014-01-29T16:29:44Z", "issue_submitter": "u007", "body": "ive rescue_from right at the very top of application_controller,\nand i'am still getting this error when my browser session expired after long inactivity.\nit does not occur if i clear my browser cache.\nthe exception is handled properly if my browser cache is cleared by force.\nrescue_from CanCan::AccessDenied do |exception|\n    ....\nend\n\n#and this before action is below rescue:\nbefore_action :invalidate_simultaneous_user_session, :unless => Proc.new {|c| c.controller_name == 'sessions' }\ninclude ActionController::Live\nerror:\nNoMethodError (undefined method `call' for nil:NilClass):\n  /home/mysite/vendor/bundle/ruby/2.0.0/gems/actionpack-4.0.2/lib/action_controller/metal/live.rb:67:in `call_on_error'\n  /home/mysite/vendor/bundle/ruby/2.0.0/gems/actionpack-4.0.2/lib/action_controller/metal/live.rb:137:in `rescue in block in process'\n  /home/mysite/vendor/bundle/ruby/2.0.0/gems/actionpack-4.0.2/lib/action_controller/metal/live.rb:146:in `block in process'\n\n\n\nArgumentError (uncaught throw :warden):\n  /home/mysite/vendor/bundle/ruby/2.0.0/bundler/gems/devise-6d2992189cee/lib/devise/hooks/timeoutable.rb:21:in `throw'\n  /home/mysite/vendor/bundle/ruby/2.0.0/bundler/gems/devise-6d2992189cee/lib/devise/hooks/timeoutable.rb:21:in `block in <top (required)>'\n  /home/mysite/vendor/bundle/ruby/2.0.0/gems/warden-1.2.3/lib/warden/hooks.rb:14:in `call'\n  /home/mysite/vendor/bundle/ruby/2.0.0/gems/warden-1.2.3/lib/warden/hooks.rb:14:in `block in _run_callbacks'\n  /home/mysite/vendor/bundle/ruby/2.0.0/gems/warden-1.2.3/lib/warden/hooks.rb:9:in `each'\n  /home/mysite/vendor/bundle/ruby/2.0.0/gems/warden-1.2.3/lib/warden/hooks.rb:9:in `_run_callbacks'\n  /home/mysite/vendor/bundle/ruby/2.0.0/gems/warden-1.2.3/lib/warden/manager.rb:53:in `_run_callbacks'\n  /home/mysite/vendor/bundle/ruby/2.0.0/gems/warden-1.2.3/lib/warden/proxy.rb:179:in `set_user'\n  /home/mysite/vendor/bundle/ruby/2.0.0/gems/warden-1.2.3/lib/warden/proxy.rb:217:in `user'\n  /home/mysite/vendor/bundle/ruby/2.0.0/gems/warden-1.2.3/lib/warden/proxy.rb:318:in `_perform_authentication'\n  /home/mysite/vendor/bundle/ruby/2.0.0/gems/warden-1.2.3/lib/warden/proxy.rb:104:in `authenticate'\n  /home/mysite/vendor/bundle/ruby/2.0.0/bundler/gems/devise-6d2992189cee/lib/devise/controllers/helpers.rb:58:in `current_user'\n  /home/mysite/app/controllers/application_controller.rb:97:in `invalidate_simultaneous_user_session'", "number_of_comments": 9, "comment_authors": ["u007", "rafaelfranca", "pivotalshiny", "rails-bot", "u007", "rafaelfranca", "jamo", "rails-bot", "tbcooney"]},
{"title": "Undocumented behaviour in _path helpers", "link": "https://github.com/rails/rails/issues/15097", "labels": ["\n                actionpack\n", "\n                docs\n", "\n                pinned\n", "\n                With reproduction steps\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.8469367027282715, "creation_date": "2014-05-13T21:51:48Z", "issue_submitter": "gadtfly", "body": "When generating a new URL, missing values may be filled in from the current request’s parameters.\n\nThis seems to have last appeared in the Rails 2 documentation, for ActionController::Base#url_for.\nurl_for has since been extensively refactored and scattered into many different versions, and none of those versions mention anything like this in their documentation. Nor is this described in the Rails Guides (at least as far as I can find).\nHere is a gist lightly sketching out the now-undocumented implicit behaviour (which still works as of Rails 4.1.1).\nConsidering how easily this can be invoked (omitting arguments from a _path helper), by a noob or otherwise, it probably warrants some explanation (and might even be considered a feature, and debatably consistent with other rails idioms).", "number_of_comments": 9, "comment_authors": ["gadtfly", "rafaelfranca", "gadtfly", "matthewd", "tenderlove", "rails-bot", "morgoth", "magikid", "p8"]},
{"title": "Setting config.log_formatter results in console not matching log files.", "link": "https://github.com/rails/rails/issues/15470", "labels": ["\n                railties\n", "\n                With reproduction steps\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.8419573307037354, "creation_date": "2014-06-02T16:24:57Z", "issue_submitter": "JacobEvelyn", "body": "I've defined this custom formatter:\nclass GeneralFormatter < Logger::Formatter\n  def call(severity, time, program_name, message)\n    puts \"Checkpoint 1\"\n    \"Checkpoint 2\\n\"\n  end\nend\n\nand enabled it with config.log_formatter = GeneralFormatter.new\nBut when I run Rails.logger.warn(\"Checkpoint 0\") in the Rails console I see:\nCheckpoint 0\nCheckpoint 1\n\nas opposed to the expected:\nCheckpoint 1\nCheckpoint 2\n\nWhile the actual log file is just:\nCheckpoint 2\n\nIt looks like the issue is that when the STDOUT logger and formatter are set (https://github.com/rails/rails/blob/master/railties/lib/rails/commands/server.rb#L142), the console variable's formatter is somehow not getting set to the correct formatter, though offhand I can't see how that would happen.", "number_of_comments": 11, "comment_authors": ["JacobEvelyn", "JacobEvelyn", "JacobEvelyn", "rails-bot", "rafaelfranca", "JacobEvelyn", "rails-bot", "avit", "rafaelfranca", "kamipo", "p8"]},
{"title": "Eager loading associations that use limit, group, and offset produces incorrect results", "link": "https://github.com/rails/rails/issues/15854", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.2920489311218262, "creation_date": "2014-06-22T04:04:53Z", "issue_submitter": "jturkel", "body": "Eager loading any of the following associations will products incorrect results:\nclass Blog < ActiveRecord::Base\n  has_many :limited_posts, -> { order(:id).limit(2) }, class_name: 'Post'\n  has_many :grouped_posts, -> { group(:blog_id) }, class_name: 'Post'\n  has_many :offset_posts, -> { offset(2) }, class_name: 'Post'\nend\n\nTest case can be found in https://gist.github.com/jturkel/1e6355e8de2bf9953945.\nProbably best to just disallow eager loading in these cases.", "number_of_comments": 17, "comment_authors": ["jturkel", "jturkel", "rails-bot", "jturkel", "magikid", "rthbound", "rafaelfranca", "jturkel", "nickborromeo", "jturkel", "nickborromeo", "jturkel", "nickborromeo", "jturkel", "nickborromeo", "jturkel", "afdev82"]},
{"title": "Rack::ETag middleware doesn't play nice with Live streaming when commit! is called before write", "link": "https://github.com/rails/rails/issues/14358", "labels": ["\n                actionpack\n", "\n                pinned\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 1.8719463348388672, "creation_date": "2014-03-12T12:03:50Z", "issue_submitter": "rosenfeld", "body": "This is similar to #9713, except that that code doesn't fix the issue I'm experiencing.\nCurrently that middleware will only skip the body digest (and not call body.each) if Cache-Control header is set to no-cache:\nhttps://github.com/rack/rack/blob/master/lib/rack/etag.rb#L56\nSo, unless you set that header explicitly in the controller's action streaming won't work out of the box. I spent several hours yesterday digging in several gem sources (railties, actionpack, active_support, rack) to find out what was preventing streaming from working in my application, so I would appreciate if Rails could make this work transparently if possible.\nMy first proposal is for Rails to automatically add Cache-Control: no-cache on the first commit! call to the response object, so that ETag will skip the digest. This should work since the action will wait for the first commit before returning to the dispatch method.\nIf that's not possible for some reason, then it would be great if we could flag actions which are supposed to be used with live streaming. Something like:\ndef my_action\n # this would set the Cache-Control header and do whatever else is needed to make streaming just work.\n  enable_streaming!\n  # ...\nend", "number_of_comments": 46, "comment_authors": ["rosenfeld", "judofyr", "rosenfeld", "rosenfeld", "matthewd", "rosenfeld", "rosenfeld", "matthewd", "rosenfeld", "rosenfeld", "matthewd", "rosenfeld", "rosenfeld", "matthewd", "rosenfeld", "isaiah", "matthewd", "rosenfeld", "rosenfeld", "rosenfeld", "matthewd", "rosenfeld", "isaiah", "rosenfeld", "rosenfeld", "rosenfeld", "matthewd", "rosenfeld", "rosenfeld", "isaiah", "rosenfeld", "isaiah", "rails-bot", "rosenfeld", "rafaelfranca", "rosenfeld", "rafaelfranca", "rosenfeld", "rafaelfranca", "rosenfeld", "rafaelfranca", "rosenfeld", "jefflasslett", "colinxfleming", "lzap", "ioquatix"]},
{"title": "Fix the callback order problem with associations", "link": "https://github.com/rails/rails/issues/16823", "labels": ["\n                activerecord\n", "\n                pinned\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 2.3555381298065186, "creation_date": "2014-09-05T22:17:25Z", "issue_submitter": "rafaelfranca", "body": "This is related to: #3798\nAssociations code in Active Record use callbacks to implement some behaviours like the autosave and the dependent options. Depending on how users use callbacks in their models the order of the callbacks definition and the association definition can give them surprising results like records being created twice.\nSome things we can do:\n\nImprove the documentation about this problem\nWarn users about existence of callbacks defined before the association definition\nStop of relying in callbacks to implement association behaviour\nDefine an internal set of callbacks\n\nMore suggestions are welcome.\ncc @matthewd", "number_of_comments": 6, "comment_authors": ["rafaelfranca", "Bounga", "fxn", "Bounga", "rails-bot", "al2o3cr"]},
{"title": ":multiple option turns email_field name into an array", "link": "https://github.com/rails/rails/issues/17225", "labels": ["\n                actionview\n", "\n                pinned\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 2.3485124111175537, "creation_date": "2014-10-10T04:54:28Z", "issue_submitter": "bughit", "body": "def tag_name(multiple = false)\n  \"#{@object_name}[#{sanitized_method_name}]#{\"[]\" if multiple}\"\nend\nThis makes no sense. :multiple does not mean there will be many input fields with the same name, which would justify an array, but that the single input filed can hold a comma separated list of values.", "number_of_comments": 6, "comment_authors": ["bughit", "Bounga", "bughit", "rails-bot", "amitpatelx", "blairanderson"]},
{"title": "ActiveRecord relation with an aliased model doesn't work", "link": "https://github.com/rails/rails/issues/16452", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 2.430544853210449, "creation_date": "2014-08-10T18:35:37Z", "issue_submitter": "haggen", "body": "Gist with working test code: https://gist.github.com/haggen/58b5c6daab243f002b54\nThe code is pretty obvious, but anyway, consider two models Post and User.\nPost belongs to an author which corresponds to a user instance, but instead of using the option class_name I tried to put an alias like this Author = User and saved it to author.rb inside my models directory.\nEverything works fine except for the relation. It always returns uninitialized constant Post::Author. Even when I declared a constant Author inside Post model. (which can be seen in code above)\nThe trace ended here:\nhttps://github.com/rails/rails/blob/master/activerecord/lib/active_record/inheritance.rb#L142\nMy point is, it may not even work afterall, but throwing uninitialized constant is very misleading.", "number_of_comments": 6, "comment_authors": ["haggen", "agis", "haggen", "rails-bot", "yasyf", "p8"]},
{"title": "Building a has_one association fails on save if target has a validation on foreign_key", "link": "https://github.com/rails/rails/issues/17325", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 2.377540349960327, "creation_date": "2014-10-19T17:58:52Z", "issue_submitter": "why-el", "body": "Hello,\nA gist for the busy can be found here\nAssuming the following:\nclass Post < ActiveRecord::Base\n  has_one :comment\nend\n\nclass Comment < ActiveRecord::Base\n  validates_presence_of :post_id\n  belongs_to :post\nend\n\nThis script:\n    post = Post.create!\n    post.comment = Comment.create!({post_id: post.id})\n    post.build_comment\n\nwill fail because build is trying to delete the original comment, but that one can't\nbe deleted because there is a validation on post_id.\nThis is because prior to deleting, the foreign key of the target association is set to nil and a save operation is performed on the target. I am not sure why this is done. Per my use case, I no longer need the associated target prior to building a new one, and therefore a destroy call should succeed without the need to save, ideally, but not setting the foreign_key to nil will also work.\nFurthermore, this could be (accidentally, I should say) mitigated by passing a dependent: :destroy to the Post model. In other words, this:\nclass Post < ActiveRecord::Base\n  has_one :comment, dependent: :destroy\nend\n\nwill make the build operation successful. There is nothing in the semantics of dependent: :destroy that should affect a target association without affecting the owner, but in this case it does.\nThe issue is with this particular method, which is called prior to a saving the target association (in our case, the comment instance).\nI can submit a PR if this is a clear issue for everyone.", "number_of_comments": 18, "comment_authors": ["why-el", "rebyn", "why-el", "rebyn", "why-el", "rebyn", "why-el", "rebyn", "why-el", "al2o3cr", "why-el", "petewest", "aravindgd", "kaikuchn", "Xanthus", "p8", "joeadcock", "lazaronixon"]},
{"title": "image_tag in ActionView::TestCase not respecting asset pipeline", "link": "https://github.com/rails/rails/issues/7218", "labels": ["\n                actionview\n", "\n                pinned\n"], "depth": 17, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 2.094200611114502, "creation_date": "2012-07-31T21:30:49Z", "issue_submitter": "Mandaryn", "body": "While testing helper methods that use image_tag\nmodule SomeHelper\n  def using_image_tag\n    image_tag(\"rails.png\")\n  end\nend\nthe helper returns the image path starting with '/images' even though the asset pipeline is turned on\nrequire 'test_helper'\n\nclass SomeHelperTest < ActionView::TestCase\n  test \"should resolve src to /assets/rails.png\" do\n    assert_equal \"<img alt=\\\"Rails\\\" src=\\\"/assets/rails.png\\\" />\", using_image_tag\n  end\nend\ngiving\n  1) Failure:\ntest_should_resolve_src_to_/assets/rails.png(SomeHelperTest) [/Users/manda/projects/demo/test/unit/helpers/some_helper_test.rb:5]:\n<\"<img alt=\\\"Rails\\\" src=\\\"/assets/rails.png\\\" />\"> expected but was\n<\"<img alt=\\\"Rails\\\" src=\\\"/images/rails.png\\\" />\">.\n\na repo with new app showing the problem, just run rake test: git://github.com/Mandaryn/action_view_test_case_problem_with_image_tag_and_asset_pipeline.git", "number_of_comments": 21, "comment_authors": ["Mandaryn", "schneems", "pixeltrix", "rafaelfranca", "pixeltrix", "ayrton", "pixeltrix", "senny", "jfeaver", "alex88", "alex88", "rails-bot", "guilleiguaran", "rails-bot", "guilleiguaran", "claudiob", "maclover7", "rafaelfranca", "maclover7", "davesag", "sheldond"]},
{"title": "update_all behavior is different between mysql and the other databases", "link": "https://github.com/rails/rails/issues/13496", "labels": ["\n                activerecord\n", "\n                With reproduction steps\n"], "depth": 17, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 2.152226209640503, "creation_date": "2013-12-26T17:13:49Z", "issue_submitter": "such", "body": "I'm trying to copy one column from one table to another. It does not work with Postgresql.\nI'm not sure if this is a bug or if this works by luck in MySQL but here is my case:\nI execute\nModelA.join(:modelB).update_all('modelA.column = modelB.column')\n\nThat fails with:\nActiveRecord::StatementInvalid: PG::UndefinedTable: ERROR:  missing FROM-clause entry for table \"modelBs\"\nLINE 1: ...\" SET modelAs.column = modelBs...\n                                                         ^\nUPDATE \"modelAs\" SET modelAs.column = modelBs.column WHERE \"modelAs\".\"id\" IN (\n  SELECT \"modelAs\".\"id\" FROM \"modelAs\" INNER JOIN \"modelBs\" ON \"modelBs\".\"id\" = \"modelAs\".\"modelB_id\"\n)\n\nIt succeeds with MySQL, the following SQL query being generated:\nUPDATE \"modelAs\" INNER JOIN \"modelBs\" ON \"modelBs\".\"id\" = \"modelAs\".\"modelB_id\" SET modelAs.column = modelBs.column\n\nThanks to AbstractMysqlAdapter redefining join_for_update from the DatabaseStatements module.\nFor this to work with Postgresql, we would need to generate:\nUPDATE \"modelAs\" SET modelAs.column = modelBs.column FROM ModelAs, ModelBs WHERE modelBs\".\"id\" = \"modelAs\".\"modelB_id\"", "number_of_comments": 21, "comment_authors": ["such", "robin850", "such", "robin850", "maxrossello", "rafaelfranca", "robin850", "joseluistorres", "joseluistorres", "rails-bot", "stormsilver", "Fire-Dragon-DoL", "vnavkal", "Soleone", "joseluistorres", "Soleone", "geralddzx", "CodingAnarchy", "sergioisidoro", "msakr21", "gap777"]},
{"title": "Optional parameters in routes", "link": "https://github.com/rails/rails/issues/7047", "labels": ["\n                actionpack\n", "\n                pinned\n"], "depth": 17, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 2.1052169799804688, "creation_date": "2012-07-13T18:30:14Z", "issue_submitter": "woto", "body": "Hello, sorry for Bad English.\nToday i updated from 3.1.3 to 3.2.6 and found that my routes doesn't work correct. I'm absolutely sure that it's because of update. But i'm not sure that this is documented feature.\nmy route looks like\n  resources :searches do \n    match '(/:catalog_number(/:manufacturer(/:replacements)))' => \"searches#index\", :on => :collection, :as => :search, :via => :get\n  end\n\nand I call it so\n<%= link_to 'Посмотреть аналоги всех найденных номеров', search_searches_path(params[:catalog_number], nil, \"1\"), :remote => true, :class => 'ajax-search' %>\n\nto get url's that's i need\n.../searches/catalog_number/manufacturer/1\n.../searches/catalog_number/manufacturer/\n.../searches/catalog_number?replacements=1\nfor now it's always looks like if i add nil to :manufacturer parameter\n.../searches/catalog_number\nI can write more cleanly examples but especially copy-paste to reproduce error.", "number_of_comments": 26, "comment_authors": ["woto", "kytrinyx", "carlosantoniodasilva", "woto", "kytrinyx", "pixeltrix", "woto", "pixeltrix", "woto", "pixeltrix", "georgeselkhoury", "georgeselkhoury", "stephenmckinney", "avit", "pixeltrix", "willbryant", "willbryant", "willbryant", "pixeltrix", "rafaelfranca", "rails-bot", "wied03", "wied03", "maclover7", "ngw", "bobmazanec"]},
{"title": "NoMethodError - undefined method `build' on ActiveRecord::PredicateBuilder (Class)", "link": "https://github.com/rails/rails/issues/17091", "labels": ["\n                activerecord\n", "\n                pinned\n"], "depth": 16, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 2.3805363178253174, "creation_date": "2014-09-28T23:41:23Z", "issue_submitter": "ghazel", "body": "ActveRecord bug, or rubinius bug?\nI'm using rbx with Puma, so there are threads involved.\nArgumentError - A copy of ActiveRecord::PredicateBuilder has been removed from the module tree but is still active!:\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activesupport-4.1.5/lib/active_support/dependencies.rb:465:in `load_missing_constant'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activesupport-4.1.5/lib/active_support/dependencies.rb:180:in `const_missing'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/predicate_builder.rb:113:in `__script__'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/predicate_builder.rb:2:in `__script__'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/predicate_builder.rb:1:in `__script__'\n        kernel/common/code_loader.rb:243:in `require'\n        kernel/common/autoload.rb:55:in `resolve'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/query_methods.rb:569:in `where!'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/query_methods.rb:559:in `where'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/finder_methods.rb:81:in `find_by'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/querying.rb:7:in `find_by'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/dynamic_matchers.rb:70:in `find_by_id'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/dynamic_matchers.rb:24:in `find_by_id (method_missing)'\n\nLater:\nNameError - uninitialized constant ActiveRecord::PredicateBuilder::RelationHandler:\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/predicate_builder.rb:113:in `__script__'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/predicate_builder.rb:2:in `__script__'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/predicate_builder.rb:1:in `__script__'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/query_methods.rb:569:in `where!'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/query_methods.rb:0:in `where'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/finder_methods.rb:81:in `find_by'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/querying.rb:7:in `find_by'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/dynamic_matchers.rb:70:in `find_by_id'\n\nLater and then continuously:\nNoMethodError - undefined method `build' on ActiveRecord::PredicateBuilder (Class):\n        kernel/delta/kernel.rb:78:in `build (method_missing)'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/predicate_builder.rb:66:in `expand'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/predicate_builder.rb:43:in `build_from_hash'\n        kernel/common/hash.rb:342:in `each'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/predicate_builder.rb:21:in `build_from_hash'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/query_methods.rb:950:in `build_where'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/query_methods.rb:572:in `where!'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/query_methods.rb:559:in `where'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/relation/finder_methods.rb:81:in `find_by'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/querying.rb:7:in `find_by'\n        /home/ghazel/.rvm/gems/rbx-2.2.10/gems/activerecord-4.1.5/lib/active_record/dynamic_matchers.rb:70:in `find_by_id'", "number_of_comments": 51, "comment_authors": ["ghazel", "rafaelfranca", "rafaelfranca", "ghazel", "rafaelfranca", "ghazel", "rafaelfranca", "ghazel", "fxn", "ghazel", "fxn", "ghazel", "fxn", "ghazel", "fxn", "ghazel", "fxn", "ghazel", "ghazel", "fxn", "rafaelfranca", "fxn", "fxn", "fxn", "ghazel", "fxn", "ghazel", "fxn", "ghazel", "fxn", "ghazel", "fxn", "ghazel", "fxn", "thedarkone", "fxn", "fxn", "thedarkone", "fxn", "fxn", "headius", "fxn", "thedarkone", "al2o3cr", "thedarkone", "headius", "thedarkone", "rails-bot", "p8", "fxn", "p8"]},
{"title": "assert_recognizes don't aware of constraints", "link": "https://github.com/rails/rails/issues/8679", "labels": ["\n                actionpack\n", "\n                pinned\n"], "depth": 17, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 2.068246841430664, "creation_date": "2013-01-01T22:48:56Z", "issue_submitter": "mmontossi", "body": "I notice in the method recognized_request_for used in assert_recognizes that it's not aware of the constraints of a route, so will always trigger an RoutingError exception.\nhttps://github.com/rails/rails/blob/v3.2.9.rc3/actionpack/lib/action_dispatch/testing/assertions/routing.rb#L210", "number_of_comments": 13, "comment_authors": ["mmontossi", "senny", "mmontossi", "JonRowe", "betesh", "pixeltrix", "pixeltrix", "rafaelfranca", "rails-bot", "jensb", "jensb", "dmitry", "maclover7"]},
{"title": "Railties::Engine.isolate_namespace leaks host application's url_helpers into action_methods for that engine's controllers.", "link": "https://github.com/rails/rails/issues/12940", "labels": ["\n                engines\n", "\n                With reproduction steps\n"], "depth": 17, "download_timeout": 180.0, "download_slot": "github.com", "download_latency": 2.058245897293091, "creation_date": "2013-11-18T17:04:55Z", "issue_submitter": "ReneB", "body": "I am not 100% sure if this is a bug or a feature I am misunderstanding but it seems inconsistent, especially since routes that are defined after mounting the Engine does not add those helpers to the action_methods.\nSteps to reproduce:\n\nCreate a new mountable Engine: rails plugin new Example --mountable\nRemove the isolate_namespace call from the lib/example/engine.rb file. This is done so we can test the order in which events occur - it will be called later on.\nNavigate to the test/dummy directory\nrails c\n\nclass Example::SomeController < Example::ApplicationController; end\n# this controller has no methods yet - action_methods should be an empty set\nExample::SomeController.action_methods\n=> #<Set: {}> \n\nExample::Engine.isolate_namespace Example\n=> #<Proc:0x00000001574508@...gems/railties-4.0.1/lib/rails/engine.rb:394 (lambda)> \n\nclass Example::SomeController2 < Example::ApplicationController; end\n=> nil \n\n# I expect this controller's action_methods to also be an empty Set, but...\nExample::SomeController2.action_methods\n=> #<Set: {\"rails_info_properties_path\", \"rails_info_properties_url\", \"rails_info_routes_path\", \"rails_info_routes_url\",  ...\nIs this a bug? If so, does anyone have a handle on how I can help fixing it?", "number_of_comments": 9, "comment_authors": ["ReneB", "ww2lin", "pixeltrix", "ReneB", "ReneB", "ReneB", "rails-bot", "ReneB", "p8"]}
]